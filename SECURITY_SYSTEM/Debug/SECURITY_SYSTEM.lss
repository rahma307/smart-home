
SECURITY_SYSTEM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  00005136  000051ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008001fe  008001fe  00005368  2**0
                  ALLOC
  3 .stab         00004c8c  00000000  00000000  00005368  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001023  00000000  00000000  00009ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b017  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b157  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b2c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cf10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ddfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000eba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ed08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ef95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f763  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f1 e5       	ldi	r31, 0x51	; 81
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bc 22 	call	0x4578	; 0x4578 <main>
      8a:	0c 94 99 28 	jmp	0x5132	; 0x5132 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 62 28 	jmp	0x50c4	; 0x50c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ed       	ldi	r26, 0xDA	; 218
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7e 28 	jmp	0x50fc	; 0x50fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6e 28 	jmp	0x50dc	; 0x50dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8a 28 	jmp	0x5114	; 0x5114 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6e 28 	jmp	0x50dc	; 0x50dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8a 28 	jmp	0x5114	; 0x5114 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 62 28 	jmp	0x50c4	; 0x50c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ed       	ldi	r24, 0xDA	; 218
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7e 28 	jmp	0x50fc	; 0x50fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6e 28 	jmp	0x50dc	; 0x50dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8a 28 	jmp	0x5114	; 0x5114 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6e 28 	jmp	0x50dc	; 0x50dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8a 28 	jmp	0x5114	; 0x5114 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6e 28 	jmp	0x50dc	; 0x50dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8a 28 	jmp	0x5114	; 0x5114 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8e 28 	jmp	0x511c	; 0x511c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_VoINIT>:
#include  "ADC_CONFIG.h"
#include  "ADC_PRV.h"

 static void (* ptr)(u16)=NULL;
static u8 Adc_busy_flag =0 ;
void ADC_VoINIT(void){  // this initalization from datasheet 
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* select Vref  >> vcc */
	
	CLR_BIT(ADC_U8_ADMUX,7);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADC_U8_ADMUX,6);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24
	
	/* right adjust   */
	
	CLR_BIT(ADC_U8_ADMUX,5);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24
	
	/* disable to auto trigger " we choise  right adjust " */
	
	CLR_BIT(ADC_U8_ADCSRA,5);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24
	
	/* select clock/64 */
	
	SET_BIT(ADC_U8_ADCSRA,2);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	84 60       	ori	r24, 0x04	; 4
     b92:	8c 93       	st	X, r24
	SET_BIT(ADC_U8_ADCSRA,1);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
	CLR_BIT(ADC_U8_ADCSRA,0);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8e 7f       	andi	r24, 0xFE	; 254
     bae:	8c 93       	st	X, r24
	
	/* enable ADC*/
	
	SET_BIT(ADC_U8_ADCSRA,7);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
	
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_GETDigitalValueSynchronusNonBlocking>:

u8 ADC_GETDigitalValueSynchronusNonBlocking(u8 copy_u8Channel_num ,u16 *copy_digitalvalue ) {
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	28 97       	sbiw	r28, 0x08	; 8
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	8e 83       	std	Y+6, r24	; 0x06
     bda:	78 87       	std	Y+8, r23	; 0x08
     bdc:	6f 83       	std	Y+7, r22	; 0x07
	/* user in runtime choose channel number */
	u32 local_u32counter =0;
     bde:	1a 82       	std	Y+2, r1	; 0x02
     be0:	1b 82       	std	Y+3, r1	; 0x03
     be2:	1c 82       	std	Y+4, r1	; 0x04
     be4:	1d 82       	std	Y+5, r1	; 0x05
	u8 local_u8errorstate= STD_TYPES_OK ;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8Channel_num<32 && copy_digitalvalue!=NULL && (Adc_busy_flag ==0)){
     bea:	8e 81       	ldd	r24, Y+6	; 0x06
     bec:	80 32       	cpi	r24, 0x20	; 32
     bee:	08 f0       	brcs	.+2      	; 0xbf2 <ADC_GETDigitalValueSynchronusNonBlocking+0x2e>
     bf0:	65 c0       	rjmp	.+202    	; 0xcbc <ADC_GETDigitalValueSynchronusNonBlocking+0xf8>
     bf2:	8f 81       	ldd	r24, Y+7	; 0x07
     bf4:	98 85       	ldd	r25, Y+8	; 0x08
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	09 f4       	brne	.+2      	; 0xbfc <ADC_GETDigitalValueSynchronusNonBlocking+0x38>
     bfa:	60 c0       	rjmp	.+192    	; 0xcbc <ADC_GETDigitalValueSynchronusNonBlocking+0xf8>
     bfc:	80 91 00 02 	lds	r24, 0x0200
     c00:	88 23       	and	r24, r24
     c02:	09 f0       	breq	.+2      	; 0xc06 <ADC_GETDigitalValueSynchronusNonBlocking+0x42>
     c04:	5b c0       	rjmp	.+182    	; 0xcbc <ADC_GETDigitalValueSynchronusNonBlocking+0xf8>

		/* set Flag to make ADC is Busy */

		Adc_busy_flag =1 ;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	80 93 00 02 	sts	0x0200, r24
		/* clear mux4..0*/
		ADC_U8_ADMUX &= 0b11100000;
     c0c:	a7 e2       	ldi	r26, 0x27	; 39
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e2       	ldi	r30, 0x27	; 39
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	80 7e       	andi	r24, 0xE0	; 224
     c18:	8c 93       	st	X, r24
		/* select channel*/
		  ADC_U8_ADMUX |= (copy_u8Channel_num) ;
     c1a:	a7 e2       	ldi	r26, 0x27	; 39
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e7 e2       	ldi	r30, 0x27	; 39
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	90 81       	ld	r25, Z
     c24:	8e 81       	ldd	r24, Y+6	; 0x06
     c26:	89 2b       	or	r24, r25
     c28:	8c 93       	st	X, r24
		 /* start conversion */
		SET_BIT(ADC_U8_ADCSRA,6);	
     c2a:	a6 e2       	ldi	r26, 0x26	; 38
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e6 e2       	ldi	r30, 0x26	; 38
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	80 64       	ori	r24, 0x40	; 64
     c36:	8c 93       	st	X, r24
     c38:	0b c0       	rjmp	.+22     	; 0xc50 <ADC_GETDigitalValueSynchronusNonBlocking+0x8c>
         /* wait flag =1 */
         while((GET_BIT(ADC_U8_ADCSRA,4) == 0)&& (local_u32counter<ADC_u32_counter_time_out)){
        	 local_u32counter++;
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	9b 81       	ldd	r25, Y+3	; 0x03
     c3e:	ac 81       	ldd	r26, Y+4	; 0x04
     c40:	bd 81       	ldd	r27, Y+5	; 0x05
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	a1 1d       	adc	r26, r1
     c46:	b1 1d       	adc	r27, r1
     c48:	8a 83       	std	Y+2, r24	; 0x02
     c4a:	9b 83       	std	Y+3, r25	; 0x03
     c4c:	ac 83       	std	Y+4, r26	; 0x04
     c4e:	bd 83       	std	Y+5, r27	; 0x05
		/* select channel*/
		  ADC_U8_ADMUX |= (copy_u8Channel_num) ;
		 /* start conversion */
		SET_BIT(ADC_U8_ADCSRA,6);	
         /* wait flag =1 */
         while((GET_BIT(ADC_U8_ADCSRA,4) == 0)&& (local_u32counter<ADC_u32_counter_time_out)){
     c50:	e6 e2       	ldi	r30, 0x26	; 38
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	82 95       	swap	r24
     c58:	8f 70       	andi	r24, 0x0F	; 15
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	81 70       	andi	r24, 0x01	; 1
     c60:	90 70       	andi	r25, 0x00	; 0
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	61 f4       	brne	.+24     	; 0xc7e <ADC_GETDigitalValueSynchronusNonBlocking+0xba>
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	9b 81       	ldd	r25, Y+3	; 0x03
     c6a:	ac 81       	ldd	r26, Y+4	; 0x04
     c6c:	bd 81       	ldd	r27, Y+5	; 0x05
     c6e:	80 35       	cpi	r24, 0x50	; 80
     c70:	23 ec       	ldi	r18, 0xC3	; 195
     c72:	92 07       	cpc	r25, r18
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	a2 07       	cpc	r26, r18
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	b2 07       	cpc	r27, r18
     c7c:	f0 f2       	brcs	.-68     	; 0xc3a <ADC_GETDigitalValueSynchronusNonBlocking+0x76>
        	 local_u32counter++;
         }

		
        if((GET_BIT(ADC_U8_ADCSRA,4) != 0) )
     c7e:	e6 e2       	ldi	r30, 0x26	; 38
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	82 95       	swap	r24
     c86:	8f 70       	andi	r24, 0x0F	; 15
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	81 70       	andi	r24, 0x01	; 1
     c8e:	90 70       	andi	r25, 0x00	; 0
     c90:	88 23       	and	r24, r24
     c92:	91 f0       	breq	.+36     	; 0xcb8 <ADC_GETDigitalValueSynchronusNonBlocking+0xf4>
         {  /* clear flag */

        	SET_BIT(ADC_U8_ADCSRA,4);
     c94:	a6 e2       	ldi	r26, 0x26	; 38
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e6 e2       	ldi	r30, 0x26	; 38
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	80 61       	ori	r24, 0x10	; 16
     ca0:	8c 93       	st	X, r24
		
		/* Read the Digital value */
		
		*copy_digitalvalue = ADC_U16_ADC_REG ;
     ca2:	e4 e2       	ldi	r30, 0x24	; 36
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	91 81       	ldd	r25, Z+1	; 0x01
     caa:	ef 81       	ldd	r30, Y+7	; 0x07
     cac:	f8 85       	ldd	r31, Y+8	; 0x08
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
		Adc_busy_flag =0 ;
     cb2:	10 92 00 02 	sts	0x0200, r1
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <ADC_GETDigitalValueSynchronusNonBlocking+0xfa>
         }
        else{
        	local_u8errorstate= STD_TYPES_NOK ;
     cb8:	19 82       	std	Y+1, r1	; 0x01
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <ADC_GETDigitalValueSynchronusNonBlocking+0xfa>
        }
		
	}
	else{
		
		local_u8errorstate= STD_TYPES_NOK ;
     cbc:	19 82       	std	Y+1, r1	; 0x01
	
	
	
	
	
	return local_u8errorstate;
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
     cc0:	28 96       	adiw	r28, 0x08	; 8
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <ADC_GetDigitalValueAsynch>:


u8 ADC_GetDigitalValueAsynch(u8 channel_num, void (*notification_func)(u16)){
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <ADC_GetDigitalValueAsynch+0x6>
     cd8:	00 d0       	rcall	.+0      	; 0xcda <ADC_GetDigitalValueAsynch+0x8>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	8a 83       	std	Y+2, r24	; 0x02
     ce0:	7c 83       	std	Y+4, r23	; 0x04
     ce2:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errorstate= STD_TYPES_OK ;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	89 83       	std	Y+1, r24	; 0x01

	if(channel_num<32 &&(notification_func != NULL) && (Adc_busy_flag ==0)){
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	80 32       	cpi	r24, 0x20	; 32
     cec:	78 f5       	brcc	.+94     	; 0xd4c <ADC_GetDigitalValueAsynch+0x7a>
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	9c 81       	ldd	r25, Y+4	; 0x04
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	59 f1       	breq	.+86     	; 0xd4c <ADC_GetDigitalValueAsynch+0x7a>
     cf6:	80 91 00 02 	lds	r24, 0x0200
     cfa:	88 23       	and	r24, r24
     cfc:	39 f5       	brne	.+78     	; 0xd4c <ADC_GetDigitalValueAsynch+0x7a>

		/* set Flag to make ADC is Busy */

		Adc_busy_flag =1 ;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	80 93 00 02 	sts	0x0200, r24

		/* Update Global Pointer to a Function */

           ptr = notification_func;
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	9c 81       	ldd	r25, Y+4	; 0x04
     d08:	90 93 ff 01 	sts	0x01FF, r25
     d0c:	80 93 fe 01 	sts	0x01FE, r24

         /* Enable ADC interrupt */
           SET_BIT(ADC_U8_ADCSRA, 3);
     d10:	a6 e2       	ldi	r26, 0x26	; 38
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e6 e2       	ldi	r30, 0x26	; 38
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	88 60       	ori	r24, 0x08	; 8
     d1c:	8c 93       	st	X, r24

           /* clear mux4..0*/
           ADC_U8_ADMUX &= 0b11100000;
     d1e:	a7 e2       	ldi	r26, 0x27	; 39
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e7 e2       	ldi	r30, 0x27	; 39
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	80 7e       	andi	r24, 0xE0	; 224
     d2a:	8c 93       	st	X, r24
           /* select channel*/
            ADC_U8_ADMUX |= (channel_num) ;
     d2c:	a7 e2       	ldi	r26, 0x27	; 39
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e7 e2       	ldi	r30, 0x27	; 39
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	90 81       	ld	r25, Z
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	89 2b       	or	r24, r25
     d3a:	8c 93       	st	X, r24
           /* start conversion */
           	SET_BIT(ADC_U8_ADCSRA,6);
     d3c:	a6 e2       	ldi	r26, 0x26	; 38
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e6 e2       	ldi	r30, 0x26	; 38
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	80 64       	ori	r24, 0x40	; 64
     d48:	8c 93       	st	X, r24
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <ADC_GetDigitalValueAsynch+0x7c>
    }
	else{

			local_u8errorstate= STD_TYPES_NOK ;
     d4c:	19 82       	std	Y+1, r1	; 0x01
		}


	return local_u8errorstate;
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <ADC_U8GetRegValue>:

u8 ADC_U8GetRegValue (u16 * value){
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	00 d0       	rcall	.+0      	; 0xd64 <ADC_U8GetRegValue+0x6>
     d64:	0f 92       	push	r0
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	9b 83       	std	Y+3, r25	; 0x03
     d6c:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8errorstate= STD_TYPES_OK ;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	89 83       	std	Y+1, r24	; 0x01
	if(value != NULL){
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	9b 81       	ldd	r25, Y+3	; 0x03
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	49 f0       	breq	.+18     	; 0xd8c <ADC_U8GetRegValue+0x2e>
       *value =  ADC_U16_ADC_REG ;
     d7a:	e4 e2       	ldi	r30, 0x24	; 36
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	ea 81       	ldd	r30, Y+2	; 0x02
     d84:	fb 81       	ldd	r31, Y+3	; 0x03
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24
     d8a:	01 c0       	rjmp	.+2      	; 0xd8e <ADC_U8GetRegValue+0x30>
	}
	else{
		local_u8errorstate= STD_TYPES_NOK ;
     d8c:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8errorstate;
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <__vector_16>:

/* prototype for ISR */

void __vector_16(void) __attribute__((signal));

void __vector_16(void) {
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	11 24       	eor	r1, r1
     da6:	2f 93       	push	r18
     da8:	3f 93       	push	r19
     daa:	4f 93       	push	r20
     dac:	5f 93       	push	r21
     dae:	6f 93       	push	r22
     db0:	7f 93       	push	r23
     db2:	8f 93       	push	r24
     db4:	9f 93       	push	r25
     db6:	af 93       	push	r26
     db8:	bf 93       	push	r27
     dba:	ef 93       	push	r30
     dbc:	ff 93       	push	r31
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
	if(ptr != NULL){
     dc6:	80 91 fe 01 	lds	r24, 0x01FE
     dca:	90 91 ff 01 	lds	r25, 0x01FF
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	99 f0       	breq	.+38     	; 0xdf8 <__vector_16+0x5c>
		/* clear flag */
		 Adc_busy_flag =0;
     dd2:	10 92 00 02 	sts	0x0200, r1
		/* Clear PIE of ADC*/
		   CLR_BIT(ADC_U8_ADCSRA, 3);
     dd6:	a6 e2       	ldi	r26, 0x26	; 38
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e6 e2       	ldi	r30, 0x26	; 38
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	87 7f       	andi	r24, 0xF7	; 247
     de2:	8c 93       	st	X, r24

        /* calling notification function*/
	         ptr(ADC_U16_ADC_REG);
     de4:	20 91 fe 01 	lds	r18, 0x01FE
     de8:	30 91 ff 01 	lds	r19, 0x01FF
     dec:	e4 e2       	ldi	r30, 0x24	; 36
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	91 81       	ldd	r25, Z+1	; 0x01
     df4:	f9 01       	movw	r30, r18
     df6:	09 95       	icall

	}


}
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	ff 91       	pop	r31
     dfe:	ef 91       	pop	r30
     e00:	bf 91       	pop	r27
     e02:	af 91       	pop	r26
     e04:	9f 91       	pop	r25
     e06:	8f 91       	pop	r24
     e08:	7f 91       	pop	r23
     e0a:	6f 91       	pop	r22
     e0c:	5f 91       	pop	r21
     e0e:	4f 91       	pop	r20
     e10:	3f 91       	pop	r19
     e12:	2f 91       	pop	r18
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	0f 90       	pop	r0
     e1a:	1f 90       	pop	r1
     e1c:	18 95       	reti

00000e1e <DIO_voidInit>:
#include   "DIO_INT.h"
#include   "DIO_CONFIG.h"
 
 
 void DIO_voidInit(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	 DDRA_REGISTER = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
     e26:	ea e3       	ldi	r30, 0x3A	; 58
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	8f e9       	ldi	r24, 0x9F	; 159
     e2c:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

	 DDRB_REGISTER = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
     e2e:	e7 e3       	ldi	r30, 0x37	; 55
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	8f ef       	ldi	r24, 0xFF	; 255
     e34:	80 83       	st	Z, r24
						   DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

	 DDRC_REGISTER = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
     e36:	e4 e3       	ldi	r30, 0x34	; 52
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	80 83       	st	Z, r24
						   DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

	 DDRD_REGISTER = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
     e3e:	e1 e3       	ldi	r30, 0x31	; 49
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 eb       	ldi	r24, 0xB0	; 176
     e44:	80 83       	st	Z, r24
						   DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);

	 PORTA_REGISTER = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
     e46:	eb e3       	ldi	r30, 0x3B	; 59
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	10 82       	st	Z, r1
						   DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);

	 PORTB_REGISTER = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
     e4c:	e8 e3       	ldi	r30, 0x38	; 56
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 ef       	ldi	r24, 0xF0	; 240
     e52:	80 83       	st	Z, r24
						   DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);

	 PORTC_REGISTER = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
     e54:	e5 e3       	ldi	r30, 0x35	; 53
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	10 82       	st	Z, r1
						   DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);

	 PORTD_REGISTER = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
     e5a:	e2 e3       	ldi	r30, 0x32	; 50
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	8f e4       	ldi	r24, 0x4F	; 79
     e60:	80 83       	st	Z, r24
						   DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <DIO_u8SetPinDirection>:
 
 u8  DIO_u8SetPinDirection(u8 COPY_u8PortId , u8 COPY_u8PinId ,u8 COPY_u8Direction)
 {
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <DIO_u8SetPinDirection+0x6>
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <DIO_u8SetPinDirection+0x8>
     e70:	00 d0       	rcall	.+0      	; 0xe72 <DIO_u8SetPinDirection+0xa>
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	8a 83       	std	Y+2, r24	; 0x02
     e78:	6b 83       	std	Y+3, r22	; 0x03
     e7a:	4c 83       	std	Y+4, r20	; 0x04
	 u8 Local_u8ErrorState = STD_TYPES_OK ;    // flage 
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	89 83       	std	Y+1, r24	; 0x01
	  
	if( (COPY_u8PortId <= PORTD)   && ( COPY_u8PinId <=PIN_7 ) &&  ((COPY_u8Direction == INPUT) ||(COPY_u8Direction == OUTPUT) ) ) {   //  ظˆط¯ظٹ   ط¹ظ…ط±ظ‡ط§ ظ…ط§ ظ‡طھط¬ظٹط¨ ط±ظ‚ظ…ط³ط§ظ„ط¨u8ظ…ط³طھط­ظٹظ„ ط±ظ‚ظ… ط§ظ„ط¨ظˆط±طھ ظٹط¨ظ‚ظٹ ط§ظ‚ظ„ ظ…ظ† طµظپط± ظ„ط§ظ† ط§ظ„ظ†ظˆط¹ ط¨طھط§ط¹ظ‡  
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	85 30       	cpi	r24, 0x05	; 5
     e84:	08 f0       	brcs	.+2      	; 0xe88 <DIO_u8SetPinDirection+0x20>
     e86:	ed c0       	rjmp	.+474    	; 0x1062 <DIO_u8SetPinDirection+0x1fa>
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	88 30       	cpi	r24, 0x08	; 8
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <DIO_u8SetPinDirection+0x28>
     e8e:	e9 c0       	rjmp	.+466    	; 0x1062 <DIO_u8SetPinDirection+0x1fa>
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	88 23       	and	r24, r24
     e94:	21 f0       	breq	.+8      	; 0xe9e <DIO_u8SetPinDirection+0x36>
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	09 f0       	breq	.+2      	; 0xe9e <DIO_u8SetPinDirection+0x36>
     e9c:	e2 c0       	rjmp	.+452    	; 0x1062 <DIO_u8SetPinDirection+0x1fa>
	 switch(COPY_u8PortId ){
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	3e 83       	std	Y+6, r19	; 0x06
     ea6:	2d 83       	std	Y+5, r18	; 0x05
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	91 05       	cpc	r25, r1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <DIO_u8SetPinDirection+0x4c>
     eb2:	48 c0       	rjmp	.+144    	; 0xf44 <DIO_u8SetPinDirection+0xdc>
     eb4:	2d 81       	ldd	r18, Y+5	; 0x05
     eb6:	3e 81       	ldd	r19, Y+6	; 0x06
     eb8:	23 30       	cpi	r18, 0x03	; 3
     eba:	31 05       	cpc	r19, r1
     ebc:	34 f4       	brge	.+12     	; 0xeca <DIO_u8SetPinDirection+0x62>
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	9e 81       	ldd	r25, Y+6	; 0x06
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	91 05       	cpc	r25, r1
     ec6:	71 f0       	breq	.+28     	; 0xee4 <DIO_u8SetPinDirection+0x7c>
     ec8:	cd c0       	rjmp	.+410    	; 0x1064 <DIO_u8SetPinDirection+0x1fc>
     eca:	2d 81       	ldd	r18, Y+5	; 0x05
     ecc:	3e 81       	ldd	r19, Y+6	; 0x06
     ece:	23 30       	cpi	r18, 0x03	; 3
     ed0:	31 05       	cpc	r19, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <DIO_u8SetPinDirection+0x6e>
     ed4:	67 c0       	rjmp	.+206    	; 0xfa4 <DIO_u8SetPinDirection+0x13c>
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	84 30       	cpi	r24, 0x04	; 4
     edc:	91 05       	cpc	r25, r1
     ede:	09 f4       	brne	.+2      	; 0xee2 <DIO_u8SetPinDirection+0x7a>
     ee0:	91 c0       	rjmp	.+290    	; 0x1004 <DIO_u8SetPinDirection+0x19c>
     ee2:	c0 c0       	rjmp	.+384    	; 0x1064 <DIO_u8SetPinDirection+0x1fc>

	case PORTA :
		if(COPY_u8Direction == INPUT){
     ee4:	8c 81       	ldd	r24, Y+4	; 0x04
     ee6:	88 23       	and	r24, r24
     ee8:	a9 f4       	brne	.+42     	; 0xf14 <DIO_u8SetPinDirection+0xac>
			CLR_BIT(DDRA_REGISTER ,COPY_u8PinId );
     eea:	aa e3       	ldi	r26, 0x3A	; 58
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ea e3       	ldi	r30, 0x3A	; 58
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_u8SetPinDirection+0xa0>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_u8SetPinDirection+0x9c>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	a8 c0       	rjmp	.+336    	; 0x1064 <DIO_u8SetPinDirection+0x1fc>
		}
		else if(COPY_u8Direction == OUTPUT){
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	09 f0       	breq	.+2      	; 0xf1c <DIO_u8SetPinDirection+0xb4>
     f1a:	a4 c0       	rjmp	.+328    	; 0x1064 <DIO_u8SetPinDirection+0x1fc>
			SET_BIT(DDRA_REGISTER ,COPY_u8PinId );
     f1c:	aa e3       	ldi	r26, 0x3A	; 58
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	ea e3       	ldi	r30, 0x3A	; 58
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_u8SetPinDirection+0xd2>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_u8SetPinDirection+0xce>
     f3e:	84 2b       	or	r24, r20
     f40:	8c 93       	st	X, r24
     f42:	90 c0       	rjmp	.+288    	; 0x1064 <DIO_u8SetPinDirection+0x1fc>
		}
	 break ;

	case PORTB :
		if(COPY_u8Direction == INPUT){
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	88 23       	and	r24, r24
     f48:	a9 f4       	brne	.+42     	; 0xf74 <DIO_u8SetPinDirection+0x10c>
				CLR_BIT(DDRB_REGISTER ,COPY_u8PinId);
     f4a:	a7 e3       	ldi	r26, 0x37	; 55
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e7 e3       	ldi	r30, 0x37	; 55
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_u8SetPinDirection+0x100>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_u8SetPinDirection+0xfc>
     f6c:	80 95       	com	r24
     f6e:	84 23       	and	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	78 c0       	rjmp	.+240    	; 0x1064 <DIO_u8SetPinDirection+0x1fc>
			}
			else if(COPY_u8Direction == OUTPUT){
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	09 f0       	breq	.+2      	; 0xf7c <DIO_u8SetPinDirection+0x114>
     f7a:	74 c0       	rjmp	.+232    	; 0x1064 <DIO_u8SetPinDirection+0x1fc>
				SET_BIT(DDRB_REGISTER ,COPY_u8PinId );
     f7c:	a7 e3       	ldi	r26, 0x37	; 55
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e7 e3       	ldi	r30, 0x37	; 55
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_u8SetPinDirection+0x132>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_u8SetPinDirection+0x12e>
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	60 c0       	rjmp	.+192    	; 0x1064 <DIO_u8SetPinDirection+0x1fc>

		 break ;

	case PORTC :

		if(COPY_u8Direction == INPUT){
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	88 23       	and	r24, r24
     fa8:	a9 f4       	brne	.+42     	; 0xfd4 <DIO_u8SetPinDirection+0x16c>
				CLR_BIT(DDRC_REGISTER ,COPY_u8PinId);
     faa:	a4 e3       	ldi	r26, 0x34	; 52
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e4 e3       	ldi	r30, 0x34	; 52
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_u8SetPinDirection+0x160>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_u8SetPinDirection+0x15c>
     fcc:	80 95       	com	r24
     fce:	84 23       	and	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	48 c0       	rjmp	.+144    	; 0x1064 <DIO_u8SetPinDirection+0x1fc>
			}
			else if(COPY_u8Direction == OUTPUT){
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	09 f0       	breq	.+2      	; 0xfdc <DIO_u8SetPinDirection+0x174>
     fda:	44 c0       	rjmp	.+136    	; 0x1064 <DIO_u8SetPinDirection+0x1fc>
				SET_BIT(DDRC_REGISTER ,COPY_u8PinId );
     fdc:	a4 e3       	ldi	r26, 0x34	; 52
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e4 e3       	ldi	r30, 0x34	; 52
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_u8SetPinDirection+0x192>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_u8SetPinDirection+0x18e>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	30 c0       	rjmp	.+96     	; 0x1064 <DIO_u8SetPinDirection+0x1fc>

			break ;

	case PORTD :

		if(COPY_u8Direction == INPUT){
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	88 23       	and	r24, r24
    1008:	a9 f4       	brne	.+42     	; 0x1034 <DIO_u8SetPinDirection+0x1cc>
				CLR_BIT(DDRD_REGISTER ,COPY_u8PinId );
    100a:	a1 e3       	ldi	r26, 0x31	; 49
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e1 e3       	ldi	r30, 0x31	; 49
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_u8SetPinDirection+0x1c0>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_u8SetPinDirection+0x1bc>
    102c:	80 95       	com	r24
    102e:	84 23       	and	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	18 c0       	rjmp	.+48     	; 0x1064 <DIO_u8SetPinDirection+0x1fc>
			}
			else if(COPY_u8Direction == OUTPUT){
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	a9 f4       	brne	.+42     	; 0x1064 <DIO_u8SetPinDirection+0x1fc>
				SET_BIT(DDRD_REGISTER ,COPY_u8PinId );
    103a:	a1 e3       	ldi	r26, 0x31	; 49
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e1 e3       	ldi	r30, 0x31	; 49
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_u8SetPinDirection+0x1f0>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_u8SetPinDirection+0x1ec>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	01 c0       	rjmp	.+2      	; 0x1064 <DIO_u8SetPinDirection+0x1fc>
	}}
	
	
	else{ 
		
		Local_u8ErrorState =STD_TYPES_NOK;
    1062:	19 82       	std	Y+1, r1	; 0x01
	}

return   Local_u8ErrorState ;
    1064:	89 81       	ldd	r24, Y+1	; 0x01
	 
 } 
    1066:	26 96       	adiw	r28, 0x06	; 6
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <DIO_u8SetPinValue>:
 u8  DIO_u8SetPinValue(u8 COPY_u8PortId , u8 COPY_u8PinId ,u8 COPY_u8Value){
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	00 d0       	rcall	.+0      	; 0x107e <DIO_u8SetPinValue+0x6>
    107e:	00 d0       	rcall	.+0      	; 0x1080 <DIO_u8SetPinValue+0x8>
    1080:	00 d0       	rcall	.+0      	; 0x1082 <DIO_u8SetPinValue+0xa>
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	8a 83       	std	Y+2, r24	; 0x02
    1088:	6b 83       	std	Y+3, r22	; 0x03
    108a:	4c 83       	std	Y+4, r20	; 0x04
	  u8 Local_u8ErrorState = STD_TYPES_OK ;    // flage 
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	89 83       	std	Y+1, r24	; 0x01
	  
	if( (COPY_u8PortId <= PORTD)   && ( COPY_u8PinId <=PIN_7 ) &&  ((COPY_u8Value == LOGIC_LOW) ||(COPY_u8Value == LOGIC_HIGH) ) ) {   //  ظˆط¯ظٹ   ط¹ظ…ط±ظ‡ط§ ظ…ط§ ظ‡طھط¬ظٹط¨ ط±ظ‚ظ…ط³ط§ظ„ط¨u8ظ…ط³طھط­ظٹظ„ ط±ظ‚ظ… ط§ظ„ط¨ظˆط±طھ ظٹط¨ظ‚ظٹ ط§ظ‚ظ„ ظ…ظ† طµظپط± ظ„ط§ظ† ط§ظ„ظ†ظˆط¹ ط¨طھط§ط¹ظ‡  
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	85 30       	cpi	r24, 0x05	; 5
    1094:	08 f0       	brcs	.+2      	; 0x1098 <DIO_u8SetPinValue+0x20>
    1096:	ed c0       	rjmp	.+474    	; 0x1272 <DIO_u8SetPinValue+0x1fa>
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	88 30       	cpi	r24, 0x08	; 8
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <DIO_u8SetPinValue+0x28>
    109e:	e9 c0       	rjmp	.+466    	; 0x1272 <DIO_u8SetPinValue+0x1fa>
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	88 23       	and	r24, r24
    10a4:	21 f0       	breq	.+8      	; 0x10ae <DIO_u8SetPinValue+0x36>
    10a6:	8c 81       	ldd	r24, Y+4	; 0x04
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	09 f0       	breq	.+2      	; 0x10ae <DIO_u8SetPinValue+0x36>
    10ac:	e2 c0       	rjmp	.+452    	; 0x1272 <DIO_u8SetPinValue+0x1fa>
	 switch(COPY_u8PortId ){
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	3e 83       	std	Y+6, r19	; 0x06
    10b6:	2d 83       	std	Y+5, r18	; 0x05
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	9e 81       	ldd	r25, Y+6	; 0x06
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	91 05       	cpc	r25, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <DIO_u8SetPinValue+0x4c>
    10c2:	48 c0       	rjmp	.+144    	; 0x1154 <DIO_u8SetPinValue+0xdc>
    10c4:	2d 81       	ldd	r18, Y+5	; 0x05
    10c6:	3e 81       	ldd	r19, Y+6	; 0x06
    10c8:	23 30       	cpi	r18, 0x03	; 3
    10ca:	31 05       	cpc	r19, r1
    10cc:	34 f4       	brge	.+12     	; 0x10da <DIO_u8SetPinValue+0x62>
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	9e 81       	ldd	r25, Y+6	; 0x06
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	91 05       	cpc	r25, r1
    10d6:	71 f0       	breq	.+28     	; 0x10f4 <DIO_u8SetPinValue+0x7c>
    10d8:	cd c0       	rjmp	.+410    	; 0x1274 <DIO_u8SetPinValue+0x1fc>
    10da:	2d 81       	ldd	r18, Y+5	; 0x05
    10dc:	3e 81       	ldd	r19, Y+6	; 0x06
    10de:	23 30       	cpi	r18, 0x03	; 3
    10e0:	31 05       	cpc	r19, r1
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <DIO_u8SetPinValue+0x6e>
    10e4:	67 c0       	rjmp	.+206    	; 0x11b4 <DIO_u8SetPinValue+0x13c>
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ea:	84 30       	cpi	r24, 0x04	; 4
    10ec:	91 05       	cpc	r25, r1
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <DIO_u8SetPinValue+0x7a>
    10f0:	91 c0       	rjmp	.+290    	; 0x1214 <DIO_u8SetPinValue+0x19c>
    10f2:	c0 c0       	rjmp	.+384    	; 0x1274 <DIO_u8SetPinValue+0x1fc>

	case PORTA :
		if(COPY_u8Value == LOGIC_LOW){
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	88 23       	and	r24, r24
    10f8:	a9 f4       	brne	.+42     	; 0x1124 <DIO_u8SetPinValue+0xac>
			CLR_BIT(PORTA_REGISTER ,COPY_u8PinId );
    10fa:	ab e3       	ldi	r26, 0x3B	; 59
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	eb e3       	ldi	r30, 0x3B	; 59
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 2e       	mov	r0, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_u8SetPinValue+0xa0>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_u8SetPinValue+0x9c>
    111c:	80 95       	com	r24
    111e:	84 23       	and	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	a8 c0       	rjmp	.+336    	; 0x1274 <DIO_u8SetPinValue+0x1fc>
		}
		else if(COPY_u8Value == LOGIC_HIGH){
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	09 f0       	breq	.+2      	; 0x112c <DIO_u8SetPinValue+0xb4>
    112a:	a4 c0       	rjmp	.+328    	; 0x1274 <DIO_u8SetPinValue+0x1fc>
			SET_BIT(PORTA_REGISTER ,COPY_u8PinId );
    112c:	ab e3       	ldi	r26, 0x3B	; 59
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	eb e3       	ldi	r30, 0x3B	; 59
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_u8SetPinValue+0xd2>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_u8SetPinValue+0xce>
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	90 c0       	rjmp	.+288    	; 0x1274 <DIO_u8SetPinValue+0x1fc>
		}
	 break ;

	case PORTB :
		if(COPY_u8Value == LOGIC_LOW){
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	88 23       	and	r24, r24
    1158:	a9 f4       	brne	.+42     	; 0x1184 <DIO_u8SetPinValue+0x10c>
				CLR_BIT(PORTB_REGISTER ,COPY_u8PinId);
    115a:	a8 e3       	ldi	r26, 0x38	; 56
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e8 e3       	ldi	r30, 0x38	; 56
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_u8SetPinValue+0x100>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_u8SetPinValue+0xfc>
    117c:	80 95       	com	r24
    117e:	84 23       	and	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	78 c0       	rjmp	.+240    	; 0x1274 <DIO_u8SetPinValue+0x1fc>
			}
			else if(COPY_u8Value == LOGIC_HIGH){
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	09 f0       	breq	.+2      	; 0x118c <DIO_u8SetPinValue+0x114>
    118a:	74 c0       	rjmp	.+232    	; 0x1274 <DIO_u8SetPinValue+0x1fc>
				SET_BIT(PORTB_REGISTER  ,COPY_u8PinId );
    118c:	a8 e3       	ldi	r26, 0x38	; 56
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e8 e3       	ldi	r30, 0x38	; 56
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_u8SetPinValue+0x132>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_u8SetPinValue+0x12e>
    11ae:	84 2b       	or	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	60 c0       	rjmp	.+192    	; 0x1274 <DIO_u8SetPinValue+0x1fc>

		 break ;

	case PORTC :

		if(COPY_u8Value == LOGIC_LOW){
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	88 23       	and	r24, r24
    11b8:	a9 f4       	brne	.+42     	; 0x11e4 <DIO_u8SetPinValue+0x16c>
				CLR_BIT(PORTC_REGISTER  ,COPY_u8PinId);
    11ba:	a5 e3       	ldi	r26, 0x35	; 53
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e5 e3       	ldi	r30, 0x35	; 53
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_u8SetPinValue+0x160>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_u8SetPinValue+0x15c>
    11dc:	80 95       	com	r24
    11de:	84 23       	and	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	48 c0       	rjmp	.+144    	; 0x1274 <DIO_u8SetPinValue+0x1fc>
			}
			else if(COPY_u8Value == LOGIC_HIGH){
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	09 f0       	breq	.+2      	; 0x11ec <DIO_u8SetPinValue+0x174>
    11ea:	44 c0       	rjmp	.+136    	; 0x1274 <DIO_u8SetPinValue+0x1fc>
				SET_BIT(PORTC_REGISTER  ,COPY_u8PinId );
    11ec:	a5 e3       	ldi	r26, 0x35	; 53
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e5 e3       	ldi	r30, 0x35	; 53
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_u8SetPinValue+0x192>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_u8SetPinValue+0x18e>
    120e:	84 2b       	or	r24, r20
    1210:	8c 93       	st	X, r24
    1212:	30 c0       	rjmp	.+96     	; 0x1274 <DIO_u8SetPinValue+0x1fc>

			break ;

	case PORTD :

		if(COPY_u8Value == LOGIC_LOW){
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	88 23       	and	r24, r24
    1218:	a9 f4       	brne	.+42     	; 0x1244 <DIO_u8SetPinValue+0x1cc>
				CLR_BIT(PORTD_REGISTER  ,COPY_u8PinId );
    121a:	a2 e3       	ldi	r26, 0x32	; 50
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e2 e3       	ldi	r30, 0x32	; 50
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_u8SetPinValue+0x1c0>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_u8SetPinValue+0x1bc>
    123c:	80 95       	com	r24
    123e:	84 23       	and	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	18 c0       	rjmp	.+48     	; 0x1274 <DIO_u8SetPinValue+0x1fc>
			}
			else if(COPY_u8Value == LOGIC_HIGH){
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	a9 f4       	brne	.+42     	; 0x1274 <DIO_u8SetPinValue+0x1fc>
				SET_BIT(PORTD_REGISTER  ,COPY_u8PinId );
    124a:	a2 e3       	ldi	r26, 0x32	; 50
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e2 e3       	ldi	r30, 0x32	; 50
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_u8SetPinValue+0x1f0>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_u8SetPinValue+0x1ec>
    126c:	84 2b       	or	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	01 c0       	rjmp	.+2      	; 0x1274 <DIO_u8SetPinValue+0x1fc>
	}}
	
	
	else{ 
		
		Local_u8ErrorState =STD_TYPES_NOK;
    1272:	19 82       	std	Y+1, r1	; 0x01
	}

return   Local_u8ErrorState ;
    1274:	89 81       	ldd	r24, Y+1	; 0x01
	 
	 
 }   
    1276:	26 96       	adiw	r28, 0x06	; 6
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <DIO_u8GetPinValue>:
 
 u8  DIO_u8GetPinValue(u8 COPY_u8PortId , u8 COPY_u8PinId ,u8 *COPY_Pu8PinValue) {
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	28 97       	sbiw	r28, 0x08	; 8
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	8b 83       	std	Y+3, r24	; 0x03
    129e:	6c 83       	std	Y+4, r22	; 0x04
    12a0:	5e 83       	std	Y+6, r21	; 0x06
    12a2:	4d 83       	std	Y+5, r20	; 0x05
 u8 Local_u8ErrorState = STD_TYPES_OK ; 	 
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	8a 83       	std	Y+2, r24	; 0x02
 u8 Local_u8PinValue ;  // to ensure that the fuction get_BIT_value will return 0 or 1  if true we will store the value in pointer 
if( (COPY_u8PortId <= PORTD)   && ( COPY_u8PinId <=PIN_7 )  && (COPY_Pu8PinValue != NULL  ) ) { // ptr >> is a variable in main to store the state of pin on it
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	85 30       	cpi	r24, 0x05	; 5
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <DIO_u8GetPinValue+0x28>
    12ae:	ad c0       	rjmp	.+346    	; 0x140a <DIO_u8GetPinValue+0x182>
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	88 30       	cpi	r24, 0x08	; 8
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <DIO_u8GetPinValue+0x30>
    12b6:	a9 c0       	rjmp	.+338    	; 0x140a <DIO_u8GetPinValue+0x182>
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	09 f4       	brne	.+2      	; 0x12c2 <DIO_u8GetPinValue+0x3a>
    12c0:	a4 c0       	rjmp	.+328    	; 0x140a <DIO_u8GetPinValue+0x182>

	 switch(COPY_u8PortId ){
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	38 87       	std	Y+8, r19	; 0x08
    12ca:	2f 83       	std	Y+7, r18	; 0x07
    12cc:	4f 81       	ldd	r20, Y+7	; 0x07
    12ce:	58 85       	ldd	r21, Y+8	; 0x08
    12d0:	42 30       	cpi	r20, 0x02	; 2
    12d2:	51 05       	cpc	r21, r1
    12d4:	c9 f1       	breq	.+114    	; 0x1348 <DIO_u8GetPinValue+0xc0>
    12d6:	8f 81       	ldd	r24, Y+7	; 0x07
    12d8:	98 85       	ldd	r25, Y+8	; 0x08
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	91 05       	cpc	r25, r1
    12de:	34 f4       	brge	.+12     	; 0x12ec <DIO_u8GetPinValue+0x64>
    12e0:	2f 81       	ldd	r18, Y+7	; 0x07
    12e2:	38 85       	ldd	r19, Y+8	; 0x08
    12e4:	21 30       	cpi	r18, 0x01	; 1
    12e6:	31 05       	cpc	r19, r1
    12e8:	71 f0       	breq	.+28     	; 0x1306 <DIO_u8GetPinValue+0x7e>
    12ea:	90 c0       	rjmp	.+288    	; 0x140c <DIO_u8GetPinValue+0x184>
    12ec:	4f 81       	ldd	r20, Y+7	; 0x07
    12ee:	58 85       	ldd	r21, Y+8	; 0x08
    12f0:	43 30       	cpi	r20, 0x03	; 3
    12f2:	51 05       	cpc	r21, r1
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <DIO_u8GetPinValue+0x70>
    12f6:	49 c0       	rjmp	.+146    	; 0x138a <DIO_u8GetPinValue+0x102>
    12f8:	8f 81       	ldd	r24, Y+7	; 0x07
    12fa:	98 85       	ldd	r25, Y+8	; 0x08
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	91 05       	cpc	r25, r1
    1300:	09 f4       	brne	.+2      	; 0x1304 <DIO_u8GetPinValue+0x7c>
    1302:	63 c0       	rjmp	.+198    	; 0x13ca <DIO_u8GetPinValue+0x142>
    1304:	83 c0       	rjmp	.+262    	; 0x140c <DIO_u8GetPinValue+0x184>

	 	 	case PORTA :
	 	 		 Local_u8PinValue =  GET_BIT(PINA_REGISTER , COPY_u8PinId);
    1306:	e9 e3       	ldi	r30, 0x39	; 57
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	a9 01       	movw	r20, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <DIO_u8GetPinValue+0x96>
    131a:	55 95       	asr	r21
    131c:	47 95       	ror	r20
    131e:	8a 95       	dec	r24
    1320:	e2 f7       	brpl	.-8      	; 0x131a <DIO_u8GetPinValue+0x92>
    1322:	ca 01       	movw	r24, r20
    1324:	81 70       	andi	r24, 0x01	; 1
    1326:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	88 23       	and	r24, r24
    132c:	21 f4       	brne	.+8      	; 0x1336 <DIO_u8GetPinValue+0xae>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    132e:	ed 81       	ldd	r30, Y+5	; 0x05
    1330:	fe 81       	ldd	r31, Y+6	; 0x06
    1332:	10 82       	st	Z, r1
    1334:	6b c0       	rjmp	.+214    	; 0x140c <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	09 f0       	breq	.+2      	; 0x133e <DIO_u8GetPinValue+0xb6>
    133c:	67 c0       	rjmp	.+206    	; 0x140c <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    133e:	ed 81       	ldd	r30, Y+5	; 0x05
    1340:	fe 81       	ldd	r31, Y+6	; 0x06
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	80 83       	st	Z, r24
    1346:	62 c0       	rjmp	.+196    	; 0x140c <DIO_u8GetPinValue+0x184>
				 }
	 	 	 break ;

	 	 	case PORTB :
	 	 		  Local_u8PinValue =  GET_BIT(PINB_REGISTER , COPY_u8PinId);
    1348:	e6 e3       	ldi	r30, 0x36	; 54
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a9 01       	movw	r20, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_u8GetPinValue+0xd8>
    135c:	55 95       	asr	r21
    135e:	47 95       	ror	r20
    1360:	8a 95       	dec	r24
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_u8GetPinValue+0xd4>
    1364:	ca 01       	movw	r24, r20
    1366:	81 70       	andi	r24, 0x01	; 1
    1368:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	88 23       	and	r24, r24
    136e:	21 f4       	brne	.+8      	; 0x1378 <DIO_u8GetPinValue+0xf0>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    1370:	ed 81       	ldd	r30, Y+5	; 0x05
    1372:	fe 81       	ldd	r31, Y+6	; 0x06
    1374:	10 82       	st	Z, r1
    1376:	4a c0       	rjmp	.+148    	; 0x140c <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	09 f0       	breq	.+2      	; 0x1380 <DIO_u8GetPinValue+0xf8>
    137e:	46 c0       	rjmp	.+140    	; 0x140c <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    1380:	ed 81       	ldd	r30, Y+5	; 0x05
    1382:	fe 81       	ldd	r31, Y+6	; 0x06
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	80 83       	st	Z, r24
    1388:	41 c0       	rjmp	.+130    	; 0x140c <DIO_u8GetPinValue+0x184>
				 }
	 	 		 break ;

	 	 	case PORTC :
	 	 		  Local_u8PinValue =  GET_BIT(PINC_REGISTER , COPY_u8PinId);
    138a:	e3 e3       	ldi	r30, 0x33	; 51
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_u8GetPinValue+0x11a>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_u8GetPinValue+0x116>
    13a6:	ca 01       	movw	r24, r20
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	88 23       	and	r24, r24
    13b0:	21 f4       	brne	.+8      	; 0x13ba <DIO_u8GetPinValue+0x132>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    13b2:	ed 81       	ldd	r30, Y+5	; 0x05
    13b4:	fe 81       	ldd	r31, Y+6	; 0x06
    13b6:	10 82       	st	Z, r1
    13b8:	29 c0       	rjmp	.+82     	; 0x140c <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	31 f5       	brne	.+76     	; 0x140c <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    13c0:	ed 81       	ldd	r30, Y+5	; 0x05
    13c2:	fe 81       	ldd	r31, Y+6	; 0x06
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 83       	st	Z, r24
    13c8:	21 c0       	rjmp	.+66     	; 0x140c <DIO_u8GetPinValue+0x184>
				 }
	 	 			break ;

	 	 	case PORTD :
	 	 		 Local_u8PinValue =  GET_BIT(PIND_REGISTER , COPY_u8PinId);
    13ca:	e0 e3       	ldi	r30, 0x30	; 48
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	88 2f       	mov	r24, r24
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	a9 01       	movw	r20, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <DIO_u8GetPinValue+0x15a>
    13de:	55 95       	asr	r21
    13e0:	47 95       	ror	r20
    13e2:	8a 95       	dec	r24
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <DIO_u8GetPinValue+0x156>
    13e6:	ca 01       	movw	r24, r20
    13e8:	81 70       	andi	r24, 0x01	; 1
    13ea:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	88 23       	and	r24, r24
    13f0:	21 f4       	brne	.+8      	; 0x13fa <DIO_u8GetPinValue+0x172>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    13f2:	ed 81       	ldd	r30, Y+5	; 0x05
    13f4:	fe 81       	ldd	r31, Y+6	; 0x06
    13f6:	10 82       	st	Z, r1
    13f8:	09 c0       	rjmp	.+18     	; 0x140c <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	31 f4       	brne	.+12     	; 0x140c <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    1400:	ed 81       	ldd	r30, Y+5	; 0x05
    1402:	fe 81       	ldd	r31, Y+6	; 0x06
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	80 83       	st	Z, r24
    1408:	01 c0       	rjmp	.+2      	; 0x140c <DIO_u8GetPinValue+0x184>
	 	 		 break ;

}}

else{
	Local_u8ErrorState =STD_TYPES_NOK;
    140a:	1a 82       	std	Y+2, r1	; 0x02
}

	return   Local_u8ErrorState ; 
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
 } 
    140e:	28 96       	adiw	r28, 0x08	; 8
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <DIO_u8SetPortDirection>:
 
 
 u8  DIO_u8SetPortDirection(u8 COPY_u8PortId  ,u8 COPY_u8Direction) {
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <DIO_u8SetPortDirection+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <DIO_u8SetPortDirection+0x8>
    1428:	0f 92       	push	r0
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	8a 83       	std	Y+2, r24	; 0x02
    1430:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK ;  
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	89 83       	std	Y+1, r24	; 0x01
	 if( (COPY_u8PortId <= PORTD)   &&  ((COPY_u8Direction == INPUT) ||(COPY_u8Direction == OUTPUT) ) ){
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	85 30       	cpi	r24, 0x05	; 5
    143a:	d0 f5       	brcc	.+116    	; 0x14b0 <DIO_u8SetPortDirection+0x90>
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	88 23       	and	r24, r24
    1440:	19 f0       	breq	.+6      	; 0x1448 <DIO_u8SetPortDirection+0x28>
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	a1 f5       	brne	.+104    	; 0x14b0 <DIO_u8SetPortDirection+0x90>
	 
	  switch (COPY_u8PortId){
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	3d 83       	std	Y+5, r19	; 0x05
    1450:	2c 83       	std	Y+4, r18	; 0x04
    1452:	8c 81       	ldd	r24, Y+4	; 0x04
    1454:	9d 81       	ldd	r25, Y+5	; 0x05
    1456:	82 30       	cpi	r24, 0x02	; 2
    1458:	91 05       	cpc	r25, r1
    145a:	d9 f0       	breq	.+54     	; 0x1492 <DIO_u8SetPortDirection+0x72>
    145c:	2c 81       	ldd	r18, Y+4	; 0x04
    145e:	3d 81       	ldd	r19, Y+5	; 0x05
    1460:	23 30       	cpi	r18, 0x03	; 3
    1462:	31 05       	cpc	r19, r1
    1464:	34 f4       	brge	.+12     	; 0x1472 <DIO_u8SetPortDirection+0x52>
    1466:	8c 81       	ldd	r24, Y+4	; 0x04
    1468:	9d 81       	ldd	r25, Y+5	; 0x05
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	91 05       	cpc	r25, r1
    146e:	61 f0       	breq	.+24     	; 0x1488 <DIO_u8SetPortDirection+0x68>
    1470:	20 c0       	rjmp	.+64     	; 0x14b2 <DIO_u8SetPortDirection+0x92>
    1472:	2c 81       	ldd	r18, Y+4	; 0x04
    1474:	3d 81       	ldd	r19, Y+5	; 0x05
    1476:	23 30       	cpi	r18, 0x03	; 3
    1478:	31 05       	cpc	r19, r1
    147a:	81 f0       	breq	.+32     	; 0x149c <DIO_u8SetPortDirection+0x7c>
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	9d 81       	ldd	r25, Y+5	; 0x05
    1480:	84 30       	cpi	r24, 0x04	; 4
    1482:	91 05       	cpc	r25, r1
    1484:	81 f0       	breq	.+32     	; 0x14a6 <DIO_u8SetPortDirection+0x86>
    1486:	15 c0       	rjmp	.+42     	; 0x14b2 <DIO_u8SetPortDirection+0x92>
    case PORTA:
    	DDRA_REGISTER = COPY_u8Direction;
    1488:	ea e3       	ldi	r30, 0x3A	; 58
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	80 83       	st	Z, r24
    1490:	10 c0       	rjmp	.+32     	; 0x14b2 <DIO_u8SetPortDirection+0x92>
    	break ;
    case PORTB:
       	DDRB_REGISTER = COPY_u8Direction;
    1492:	e7 e3       	ldi	r30, 0x37	; 55
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	80 83       	st	Z, r24
    149a:	0b c0       	rjmp	.+22     	; 0x14b2 <DIO_u8SetPortDirection+0x92>
       	break ;
    case PORTC:
        DDRC_REGISTER = COPY_u8Direction;
    149c:	e4 e3       	ldi	r30, 0x34	; 52
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	80 83       	st	Z, r24
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <DIO_u8SetPortDirection+0x92>
        break ;
    case PORTD:
       DDRB_REGISTER = COPY_u8Direction;
    14a6:	e7 e3       	ldi	r30, 0x37	; 55
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	80 83       	st	Z, r24
    14ae:	01 c0       	rjmp	.+2      	; 0x14b2 <DIO_u8SetPortDirection+0x92>
           	break ;

	 }}
	 
	 else{
	Local_u8ErrorState =STD_TYPES_NOK;
    14b0:	19 82       	std	Y+1, r1	; 0x01
}

	return   Local_u8ErrorState ; 
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
	 
 }
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <DIO_u8SetPortValue>:
 
 u8  DIO_u8SetPortValue(u8 COPY_u8PortId  ,u8 COPY_u8Value) {
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <DIO_u8SetPortValue+0x6>
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <DIO_u8SetPortValue+0x8>
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	8a 83       	std	Y+2, r24	; 0x02
    14d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK ;   
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	89 83       	std	Y+1, r24	; 0x01
     if( (COPY_u8PortId <= PORTD)){
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	85 30       	cpi	r24, 0x05	; 5
    14de:	98 f5       	brcc	.+102    	; 0x1546 <DIO_u8SetPortValue+0x82>
	
	switch(COPY_u8PortId ){
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3d 83       	std	Y+5, r19	; 0x05
    14e8:	2c 83       	std	Y+4, r18	; 0x04
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	82 30       	cpi	r24, 0x02	; 2
    14f0:	91 05       	cpc	r25, r1
    14f2:	d9 f0       	breq	.+54     	; 0x152a <DIO_u8SetPortValue+0x66>
    14f4:	2c 81       	ldd	r18, Y+4	; 0x04
    14f6:	3d 81       	ldd	r19, Y+5	; 0x05
    14f8:	23 30       	cpi	r18, 0x03	; 3
    14fa:	31 05       	cpc	r19, r1
    14fc:	34 f4       	brge	.+12     	; 0x150a <DIO_u8SetPortValue+0x46>
    14fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1500:	9d 81       	ldd	r25, Y+5	; 0x05
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	91 05       	cpc	r25, r1
    1506:	61 f0       	breq	.+24     	; 0x1520 <DIO_u8SetPortValue+0x5c>
    1508:	1e c0       	rjmp	.+60     	; 0x1546 <DIO_u8SetPortValue+0x82>
    150a:	2c 81       	ldd	r18, Y+4	; 0x04
    150c:	3d 81       	ldd	r19, Y+5	; 0x05
    150e:	23 30       	cpi	r18, 0x03	; 3
    1510:	31 05       	cpc	r19, r1
    1512:	81 f0       	breq	.+32     	; 0x1534 <DIO_u8SetPortValue+0x70>
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
    1516:	9d 81       	ldd	r25, Y+5	; 0x05
    1518:	84 30       	cpi	r24, 0x04	; 4
    151a:	91 05       	cpc	r25, r1
    151c:	81 f0       	breq	.+32     	; 0x153e <DIO_u8SetPortValue+0x7a>
    151e:	13 c0       	rjmp	.+38     	; 0x1546 <DIO_u8SetPortValue+0x82>

			 	case PORTA :
			 		 PORTA_REGISTER = COPY_u8Value ;
    1520:	eb e3       	ldi	r30, 0x3B	; 59
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	80 83       	st	Z, r24
    1528:	0e c0       	rjmp	.+28     	; 0x1546 <DIO_u8SetPortValue+0x82>
			 	 break ;

			 	case PORTB :
			 		 PORTB_REGISTER = COPY_u8Value ;
    152a:	e8 e3       	ldi	r30, 0x38	; 56
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	80 83       	st	Z, r24
    1532:	09 c0       	rjmp	.+18     	; 0x1546 <DIO_u8SetPortValue+0x82>
			 		 break ;

			 	case PORTC :

			 		 PORTC_REGISTER = COPY_u8Value ;
    1534:	e5 e3       	ldi	r30, 0x35	; 53
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	80 83       	st	Z, r24
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <DIO_u8SetPortValue+0x82>
			 			break ;

			 	case PORTD :
			 		 PORTD_REGISTER = COPY_u8Value ;
    153e:	e2 e3       	ldi	r30, 0x32	; 50
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	80 83       	st	Z, r24



			 	}
	 }
	 return   Local_u8ErrorState ; 
    1546:	89 81       	ldd	r24, Y+1	; 0x01
 }
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <DIO_u8GetPortValue>:
  
 u8  DIO_u8GetPortValue (u8 COPY_u8PortId , u8 *COPY_Pu8PortValue){
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <DIO_u8GetPortValue+0x6>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <DIO_u8GetPortValue+0x8>
    1560:	00 d0       	rcall	.+0      	; 0x1562 <DIO_u8GetPortValue+0xa>
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	8a 83       	std	Y+2, r24	; 0x02
    1568:	7c 83       	std	Y+4, r23	; 0x04
    156a:	6b 83       	std	Y+3, r22	; 0x03
	 
u8 Local_u8ErrorState = STD_TYPES_OK ; 	 
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	89 83       	std	Y+1, r24	; 0x01
  
 
if( (COPY_u8PortId <= PORTD)  && (COPY_Pu8PortValue != NULL  ) ) { // ptr >> is a variable in main to store the state of pin on it
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	85 30       	cpi	r24, 0x05	; 5
    1574:	08 f0       	brcs	.+2      	; 0x1578 <DIO_u8GetPortValue+0x20>
    1576:	40 c0       	rjmp	.+128    	; 0x15f8 <DIO_u8GetPortValue+0xa0>
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	e1 f1       	breq	.+120    	; 0x15f8 <DIO_u8GetPortValue+0xa0>

	 switch(COPY_u8PortId ){
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	3e 83       	std	Y+6, r19	; 0x06
    1588:	2d 83       	std	Y+5, r18	; 0x05
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	82 30       	cpi	r24, 0x02	; 2
    1590:	91 05       	cpc	r25, r1
    1592:	e9 f0       	breq	.+58     	; 0x15ce <DIO_u8GetPortValue+0x76>
    1594:	2d 81       	ldd	r18, Y+5	; 0x05
    1596:	3e 81       	ldd	r19, Y+6	; 0x06
    1598:	23 30       	cpi	r18, 0x03	; 3
    159a:	31 05       	cpc	r19, r1
    159c:	34 f4       	brge	.+12     	; 0x15aa <DIO_u8GetPortValue+0x52>
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	9e 81       	ldd	r25, Y+6	; 0x06
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	91 05       	cpc	r25, r1
    15a6:	61 f0       	breq	.+24     	; 0x15c0 <DIO_u8GetPortValue+0x68>
    15a8:	28 c0       	rjmp	.+80     	; 0x15fa <DIO_u8GetPortValue+0xa2>
    15aa:	2d 81       	ldd	r18, Y+5	; 0x05
    15ac:	3e 81       	ldd	r19, Y+6	; 0x06
    15ae:	23 30       	cpi	r18, 0x03	; 3
    15b0:	31 05       	cpc	r19, r1
    15b2:	a1 f0       	breq	.+40     	; 0x15dc <DIO_u8GetPortValue+0x84>
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	9e 81       	ldd	r25, Y+6	; 0x06
    15b8:	84 30       	cpi	r24, 0x04	; 4
    15ba:	91 05       	cpc	r25, r1
    15bc:	b1 f0       	breq	.+44     	; 0x15ea <DIO_u8GetPortValue+0x92>
    15be:	1d c0       	rjmp	.+58     	; 0x15fa <DIO_u8GetPortValue+0xa2>

	 	 	case PORTA :
	 	 		*COPY_Pu8PortValue = PINA_REGISTER;
    15c0:	e9 e3       	ldi	r30, 0x39	; 57
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	eb 81       	ldd	r30, Y+3	; 0x03
    15c8:	fc 81       	ldd	r31, Y+4	; 0x04
    15ca:	80 83       	st	Z, r24
    15cc:	16 c0       	rjmp	.+44     	; 0x15fa <DIO_u8GetPortValue+0xa2>
				 
	 	 	 break ;

	 	 	case PORTB :
	 	 		 *COPY_Pu8PortValue = PINB_REGISTER;
    15ce:	e6 e3       	ldi	r30, 0x36	; 54
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	eb 81       	ldd	r30, Y+3	; 0x03
    15d6:	fc 81       	ldd	r31, Y+4	; 0x04
    15d8:	80 83       	st	Z, r24
    15da:	0f c0       	rjmp	.+30     	; 0x15fa <DIO_u8GetPortValue+0xa2>
	 	 		 break ;

	 	 	case PORTC :
	 	 		 *COPY_Pu8PortValue = PINC_REGISTER;
    15dc:	e3 e3       	ldi	r30, 0x33	; 51
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	eb 81       	ldd	r30, Y+3	; 0x03
    15e4:	fc 81       	ldd	r31, Y+4	; 0x04
    15e6:	80 83       	st	Z, r24
    15e8:	08 c0       	rjmp	.+16     	; 0x15fa <DIO_u8GetPortValue+0xa2>
	 	 			break ;

	 	 	case PORTD :
	 	 		 *COPY_Pu8PortValue = PIND_REGISTER ;
    15ea:	e0 e3       	ldi	r30, 0x30	; 48
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	eb 81       	ldd	r30, Y+3	; 0x03
    15f2:	fc 81       	ldd	r31, Y+4	; 0x04
    15f4:	80 83       	st	Z, r24
    15f6:	01 c0       	rjmp	.+2      	; 0x15fa <DIO_u8GetPortValue+0xa2>
	 	 		 break ;

}}

else{
	Local_u8ErrorState =STD_TYPES_NOK;
    15f8:	19 82       	std	Y+1, r1	; 0x01
}

	return   Local_u8ErrorState ; 	 
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
	 
	 
	 
 }
    15fc:	26 96       	adiw	r28, 0x06	; 6
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <GI_voidEnable>:
#include "GLOPAL_INT.h"

#define  SREG             *((volatile u8 *)(0x5f))


void  GI_voidEnable(void){
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
/* ENABLE  GIE */

SET_BIT(SREG,7);	
    1616:	af e5       	ldi	r26, 0x5F	; 95
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	ef e5       	ldi	r30, 0x5F	; 95
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	80 68       	ori	r24, 0x80	; 128
    1622:	8c 93       	st	X, r24
	
	
}
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <GI_voidDisAble>:
void  GI_voidDisAble(void){
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
	
	CLR_BIT(SREG,7);
    1632:	af e5       	ldi	r26, 0x5F	; 95
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ef e5       	ldi	r30, 0x5F	; 95
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	8f 77       	andi	r24, 0x7F	; 127
    163e:	8c 93       	st	X, r24
	
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <KPD_u8KpdGetKeyState>:
 

const u8 Kpd_rows [4] ={KPD_RL1_PIN,KPD_RL2_PIN,KPD_RL3_PIN,KPD_RL4_PIN} ;
const u8 Kpd_cols [4] ={KPD_CL1_PIN,KPD_CL2_PIN,KPD_CL3_PIN ,KPD_CL4_PIN } ;

u8 KPD_u8KpdGetKeyState(u8 * Copy_pu8RteurnedKey){
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	65 97       	sbiw	r28, 0x15	; 21
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	9d 8b       	std	Y+21, r25	; 0x15
    165c:	8c 8b       	std	Y+20, r24	; 0x14
	*Copy_pu8RteurnedKey = Kpd_keynotpressed ;
    165e:	ec 89       	ldd	r30, Y+20	; 0x14
    1660:	fd 89       	ldd	r31, Y+21	; 0x15
    1662:	8f ef       	ldi	r24, 0xFF	; 255
    1664:	80 83       	st	Z, r24

	 u8 LOCAL_ERROR_STATE = STD_TYPES_OK;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	8a 8b       	std	Y+18, r24	; 0x12
	 u8 local_u8Rowscounter ;
	 u8 local_u8CLScounter ;
	  u8 local_u8PinValue;
	  u8 local_flage =0 ;
    166a:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8RteurnedKey !=NULL){
    166c:	8c 89       	ldd	r24, Y+20	; 0x14
    166e:	9d 89       	ldd	r25, Y+21	; 0x15
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	09 f4       	brne	.+2      	; 0x1676 <KPD_u8KpdGetKeyState+0x30>
    1674:	ec c0       	rjmp	.+472    	; 0x184e <KPD_u8KpdGetKeyState+0x208>
	   /* Activation Each Row => for loop on the pins of rows */
	   
	   for(local_u8Rowscounter =0 ; local_u8Rowscounter <=3 ; local_u8Rowscounter++){
    1676:	19 8a       	std	Y+17, r1	; 0x11
    1678:	e5 c0       	rjmp	.+458    	; 0x1844 <KPD_u8KpdGetKeyState+0x1fe>
		   DIO_u8SetPinValue(KPD_PORT_row,  Kpd_rows[local_u8Rowscounter], LOGIC_LOW);
    167a:	89 89       	ldd	r24, Y+17	; 0x11
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	fc 01       	movw	r30, r24
    1682:	eb 50       	subi	r30, 0x0B	; 11
    1684:	fe 4f       	sbci	r31, 0xFE	; 254
    1686:	90 81       	ld	r25, Z
    1688:	82 e0       	ldi	r24, 0x02	; 2
    168a:	69 2f       	mov	r22, r25
    168c:	40 e0       	ldi	r20, 0x00	; 0
    168e:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
		   
		   for(local_u8CLScounter =0 ; local_u8CLScounter <= 2 ; local_u8CLScounter++){
    1692:	18 8a       	std	Y+16, r1	; 0x10
    1694:	c1 c0       	rjmp	.+386    	; 0x1818 <KPD_u8KpdGetKeyState+0x1d2>
			  
			   DIO_u8GetPinValue(KPD_PORT_col,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
    1696:	88 89       	ldd	r24, Y+16	; 0x10
    1698:	88 2f       	mov	r24, r24
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	fc 01       	movw	r30, r24
    169e:	e7 50       	subi	r30, 0x07	; 7
    16a0:	fe 4f       	sbci	r31, 0xFE	; 254
    16a2:	90 81       	ld	r25, Z
    16a4:	9e 01       	movw	r18, r28
    16a6:	2d 5e       	subi	r18, 0xED	; 237
    16a8:	3f 4f       	sbci	r19, 0xFF	; 255
    16aa:	84 e0       	ldi	r24, 0x04	; 4
    16ac:	69 2f       	mov	r22, r25
    16ae:	a9 01       	movw	r20, r18
    16b0:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_u8GetPinValue>
				  
			  if(local_u8PinValue == LOGIC_LOW){  /*Switch is presed */
    16b4:	8b 89       	ldd	r24, Y+19	; 0x13
    16b6:	88 23       	and	r24, r24
    16b8:	09 f0       	breq	.+2      	; 0x16bc <KPD_u8KpdGetKeyState+0x76>
    16ba:	ab c0       	rjmp	.+342    	; 0x1812 <KPD_u8KpdGetKeyState+0x1cc>
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	a0 ea       	ldi	r26, 0xA0	; 160
    16c2:	b1 e4       	ldi	r27, 0x41	; 65
    16c4:	8b 87       	std	Y+11, r24	; 0x0b
    16c6:	9c 87       	std	Y+12, r25	; 0x0c
    16c8:	ad 87       	std	Y+13, r26	; 0x0d
    16ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	4a ef       	ldi	r20, 0xFA	; 250
    16da:	54 e4       	ldi	r21, 0x44	; 68
    16dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	8f 83       	std	Y+7, r24	; 0x07
    16e6:	98 87       	std	Y+8, r25	; 0x08
    16e8:	a9 87       	std	Y+9, r26	; 0x09
    16ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ec:	6f 81       	ldd	r22, Y+7	; 0x07
    16ee:	78 85       	ldd	r23, Y+8	; 0x08
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e8       	ldi	r20, 0x80	; 128
    16fa:	5f e3       	ldi	r21, 0x3F	; 63
    16fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1700:	88 23       	and	r24, r24
    1702:	2c f4       	brge	.+10     	; 0x170e <KPD_u8KpdGetKeyState+0xc8>
		__ticks = 1;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
    170c:	3f c0       	rjmp	.+126    	; 0x178c <KPD_u8KpdGetKeyState+0x146>
	else if (__tmp > 65535)
    170e:	6f 81       	ldd	r22, Y+7	; 0x07
    1710:	78 85       	ldd	r23, Y+8	; 0x08
    1712:	89 85       	ldd	r24, Y+9	; 0x09
    1714:	9a 85       	ldd	r25, Y+10	; 0x0a
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	3f ef       	ldi	r19, 0xFF	; 255
    171a:	4f e7       	ldi	r20, 0x7F	; 127
    171c:	57 e4       	ldi	r21, 0x47	; 71
    171e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1722:	18 16       	cp	r1, r24
    1724:	4c f5       	brge	.+82     	; 0x1778 <KPD_u8KpdGetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1726:	6b 85       	ldd	r22, Y+11	; 0x0b
    1728:	7c 85       	ldd	r23, Y+12	; 0x0c
    172a:	8d 85       	ldd	r24, Y+13	; 0x0d
    172c:	9e 85       	ldd	r25, Y+14	; 0x0e
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e2       	ldi	r20, 0x20	; 32
    1734:	51 e4       	ldi	r21, 0x41	; 65
    1736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	9e 83       	std	Y+6, r25	; 0x06
    174c:	8d 83       	std	Y+5, r24	; 0x05
    174e:	0f c0       	rjmp	.+30     	; 0x176e <KPD_u8KpdGetKeyState+0x128>
    1750:	88 ec       	ldi	r24, 0xC8	; 200
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <KPD_u8KpdGetKeyState+0x116>
    1760:	9c 83       	std	Y+4, r25	; 0x04
    1762:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	69 f7       	brne	.-38     	; 0x1750 <KPD_u8KpdGetKeyState+0x10a>
    1776:	14 c0       	rjmp	.+40     	; 0x17a0 <KPD_u8KpdGetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1778:	6f 81       	ldd	r22, Y+7	; 0x07
    177a:	78 85       	ldd	r23, Y+8	; 0x08
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <KPD_u8KpdGetKeyState+0x152>
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	89 83       	std	Y+1, r24	; 0x01
				   _delay_ms(20); // FOR BOUNCING 
				   /* check if the pin is still low */
				   DIO_u8GetPinValue(KPD_PORT_col,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
    17a0:	88 89       	ldd	r24, Y+16	; 0x10
    17a2:	88 2f       	mov	r24, r24
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	fc 01       	movw	r30, r24
    17a8:	e7 50       	subi	r30, 0x07	; 7
    17aa:	fe 4f       	sbci	r31, 0xFE	; 254
    17ac:	90 81       	ld	r25, Z
    17ae:	9e 01       	movw	r18, r28
    17b0:	2d 5e       	subi	r18, 0xED	; 237
    17b2:	3f 4f       	sbci	r19, 0xFF	; 255
    17b4:	84 e0       	ldi	r24, 0x04	; 4
    17b6:	69 2f       	mov	r22, r25
    17b8:	a9 01       	movw	r20, r18
    17ba:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_u8GetPinValue>
    17be:	0f c0       	rjmp	.+30     	; 0x17de <KPD_u8KpdGetKeyState+0x198>
			     while(local_u8PinValue == LOGIC_LOW){  // TO TAKE READ OF PIN ONE TIME 
			    	 DIO_u8GetPinValue(KPD_PORT_col,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
    17c0:	88 89       	ldd	r24, Y+16	; 0x10
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	fc 01       	movw	r30, r24
    17c8:	e7 50       	subi	r30, 0x07	; 7
    17ca:	fe 4f       	sbci	r31, 0xFE	; 254
    17cc:	90 81       	ld	r25, Z
    17ce:	9e 01       	movw	r18, r28
    17d0:	2d 5e       	subi	r18, 0xED	; 237
    17d2:	3f 4f       	sbci	r19, 0xFF	; 255
    17d4:	84 e0       	ldi	r24, 0x04	; 4
    17d6:	69 2f       	mov	r22, r25
    17d8:	a9 01       	movw	r20, r18
    17da:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_u8GetPinValue>
				  
			  if(local_u8PinValue == LOGIC_LOW){  /*Switch is presed */
				   _delay_ms(20); // FOR BOUNCING 
				   /* check if the pin is still low */
				   DIO_u8GetPinValue(KPD_PORT_col,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
			     while(local_u8PinValue == LOGIC_LOW){  // TO TAKE READ OF PIN ONE TIME 
    17de:	8b 89       	ldd	r24, Y+19	; 0x13
    17e0:	88 23       	and	r24, r24
    17e2:	71 f3       	breq	.-36     	; 0x17c0 <KPD_u8KpdGetKeyState+0x17a>
			    	 DIO_u8GetPinValue(KPD_PORT_col,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
				 }
				 local_flage =1 ;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	8f 87       	std	Y+15, r24	; 0x0f
			  * Copy_pu8RteurnedKey = KPD_Au8Keys[local_u8Rowscounter][local_u8CLScounter];
    17e8:	89 89       	ldd	r24, Y+17	; 0x11
    17ea:	48 2f       	mov	r20, r24
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	88 89       	ldd	r24, Y+16	; 0x10
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	ca 01       	movw	r24, r20
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	82 0f       	add	r24, r18
    1800:	93 1f       	adc	r25, r19
    1802:	fc 01       	movw	r30, r24
    1804:	eb 51       	subi	r30, 0x1B	; 27
    1806:	fe 4f       	sbci	r31, 0xFE	; 254
    1808:	80 81       	ld	r24, Z
    180a:	ec 89       	ldd	r30, Y+20	; 0x14
    180c:	fd 89       	ldd	r31, Y+21	; 0x15
    180e:	80 83       	st	Z, r24
    1810:	07 c0       	rjmp	.+14     	; 0x1820 <KPD_u8KpdGetKeyState+0x1da>
	   /* Activation Each Row => for loop on the pins of rows */
	   
	   for(local_u8Rowscounter =0 ; local_u8Rowscounter <=3 ; local_u8Rowscounter++){
		   DIO_u8SetPinValue(KPD_PORT_row,  Kpd_rows[local_u8Rowscounter], LOGIC_LOW);
		   
		   for(local_u8CLScounter =0 ; local_u8CLScounter <= 2 ; local_u8CLScounter++){
    1812:	88 89       	ldd	r24, Y+16	; 0x10
    1814:	8f 5f       	subi	r24, 0xFF	; 255
    1816:	88 8b       	std	Y+16, r24	; 0x10
    1818:	88 89       	ldd	r24, Y+16	; 0x10
    181a:	83 30       	cpi	r24, 0x03	; 3
    181c:	08 f4       	brcc	.+2      	; 0x1820 <KPD_u8KpdGetKeyState+0x1da>
    181e:	3b cf       	rjmp	.-394    	; 0x1696 <KPD_u8KpdGetKeyState+0x50>
			  * Copy_pu8RteurnedKey = KPD_Au8Keys[local_u8Rowscounter][local_u8CLScounter];
			  break ; 
		   }	  }
		   
		   /* disactivate Row */
          DIO_u8SetPinValue(KPD_PORT_row,  Kpd_rows[local_u8Rowscounter], LOGIC_HIGH);
    1820:	89 89       	ldd	r24, Y+17	; 0x11
    1822:	88 2f       	mov	r24, r24
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	fc 01       	movw	r30, r24
    1828:	eb 50       	subi	r30, 0x0B	; 11
    182a:	fe 4f       	sbci	r31, 0xFE	; 254
    182c:	90 81       	ld	r25, Z
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	69 2f       	mov	r22, r25
    1832:	41 e0       	ldi	r20, 0x01	; 1
    1834:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
		   if(local_flage){
    1838:	8f 85       	ldd	r24, Y+15	; 0x0f
    183a:	88 23       	and	r24, r24
    183c:	49 f4       	brne	.+18     	; 0x1850 <KPD_u8KpdGetKeyState+0x20a>
	  u8 local_u8PinValue;
	  u8 local_flage =0 ;
	if(Copy_pu8RteurnedKey !=NULL){
	   /* Activation Each Row => for loop on the pins of rows */
	   
	   for(local_u8Rowscounter =0 ; local_u8Rowscounter <=3 ; local_u8Rowscounter++){
    183e:	89 89       	ldd	r24, Y+17	; 0x11
    1840:	8f 5f       	subi	r24, 0xFF	; 255
    1842:	89 8b       	std	Y+17, r24	; 0x11
    1844:	89 89       	ldd	r24, Y+17	; 0x11
    1846:	84 30       	cpi	r24, 0x04	; 4
    1848:	08 f4       	brcc	.+2      	; 0x184c <KPD_u8KpdGetKeyState+0x206>
    184a:	17 cf       	rjmp	.-466    	; 0x167a <KPD_u8KpdGetKeyState+0x34>
    184c:	01 c0       	rjmp	.+2      	; 0x1850 <KPD_u8KpdGetKeyState+0x20a>
		   
	   }
	}
	else{
		
		LOCAL_ERROR_STATE = STD_TYPES_NOK;
    184e:	1a 8a       	std	Y+18, r1	; 0x12
	}
	
	return LOCAL_ERROR_STATE ;
    1850:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1852:	65 96       	adiw	r28, 0x15	; 21
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <LCD_INIT>:
#include "LCD_PRV.h"


 
 
 void LCD_INIT(void){
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	e8 97       	sbiw	r28, 0x38	; 56
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
#if LCD_MODE == LCD_u8_Mode_8_bit
 
	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	62 e0       	ldi	r22, 0x02	; 2
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	ac e0       	ldi	r26, 0x0C	; 12
    1888:	b2 e4       	ldi	r27, 0x42	; 66
    188a:	8d ab       	std	Y+53, r24	; 0x35
    188c:	9e ab       	std	Y+54, r25	; 0x36
    188e:	af ab       	std	Y+55, r26	; 0x37
    1890:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	6d a9       	ldd	r22, Y+53	; 0x35
    1894:	7e a9       	ldd	r23, Y+54	; 0x36
    1896:	8f a9       	ldd	r24, Y+55	; 0x37
    1898:	98 ad       	ldd	r25, Y+56	; 0x38
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a ef       	ldi	r20, 0xFA	; 250
    18a0:	54 e4       	ldi	r21, 0x44	; 68
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	89 ab       	std	Y+49, r24	; 0x31
    18ac:	9a ab       	std	Y+50, r25	; 0x32
    18ae:	ab ab       	std	Y+51, r26	; 0x33
    18b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18b2:	69 a9       	ldd	r22, Y+49	; 0x31
    18b4:	7a a9       	ldd	r23, Y+50	; 0x32
    18b6:	8b a9       	ldd	r24, Y+51	; 0x33
    18b8:	9c a9       	ldd	r25, Y+52	; 0x34
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <LCD_INIT+0x70>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	98 ab       	std	Y+48, r25	; 0x30
    18d0:	8f a7       	std	Y+47, r24	; 0x2f
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <LCD_INIT+0xee>
	else if (__tmp > 65535)
    18d4:	69 a9       	ldd	r22, Y+49	; 0x31
    18d6:	7a a9       	ldd	r23, Y+50	; 0x32
    18d8:	8b a9       	ldd	r24, Y+51	; 0x33
    18da:	9c a9       	ldd	r25, Y+52	; 0x34
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	4c f5       	brge	.+82     	; 0x193e <LCD_INIT+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	6d a9       	ldd	r22, Y+53	; 0x35
    18ee:	7e a9       	ldd	r23, Y+54	; 0x36
    18f0:	8f a9       	ldd	r24, Y+55	; 0x37
    18f2:	98 ad       	ldd	r25, Y+56	; 0x38
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	98 ab       	std	Y+48, r25	; 0x30
    1912:	8f a7       	std	Y+47, r24	; 0x2f
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <LCD_INIT+0xd0>
    1916:	88 ec       	ldi	r24, 0xC8	; 200
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9e a7       	std	Y+46, r25	; 0x2e
    191c:	8d a7       	std	Y+45, r24	; 0x2d
    191e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1920:	9e a5       	ldd	r25, Y+46	; 0x2e
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <LCD_INIT+0xbe>
    1926:	9e a7       	std	Y+46, r25	; 0x2e
    1928:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	8f a5       	ldd	r24, Y+47	; 0x2f
    192c:	98 a9       	ldd	r25, Y+48	; 0x30
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	98 ab       	std	Y+48, r25	; 0x30
    1932:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	8f a5       	ldd	r24, Y+47	; 0x2f
    1936:	98 a9       	ldd	r25, Y+48	; 0x30
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <LCD_INIT+0xb2>
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <LCD_INIT+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	69 a9       	ldd	r22, Y+49	; 0x31
    1940:	7a a9       	ldd	r23, Y+50	; 0x32
    1942:	8b a9       	ldd	r24, Y+51	; 0x33
    1944:	9c a9       	ldd	r25, Y+52	; 0x34
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	98 ab       	std	Y+48, r25	; 0x30
    1950:	8f a7       	std	Y+47, r24	; 0x2f
    1952:	8f a5       	ldd	r24, Y+47	; 0x2f
    1954:	98 a9       	ldd	r25, Y+48	; 0x30
    1956:	9c a7       	std	Y+44, r25	; 0x2c
    1958:	8b a7       	std	Y+43, r24	; 0x2b
    195a:	8b a5       	ldd	r24, Y+43	; 0x2b
    195c:	9c a5       	ldd	r25, Y+44	; 0x2c
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <LCD_INIT+0xfa>
    1962:	9c a7       	std	Y+44, r25	; 0x2c
    1964:	8b a7       	std	Y+43, r24	; 0x2b
	  _delay_ms(35);
	 LCD_WRITE_COMMAND(lcd_FunctionSet8bit);
    1966:	88 e3       	ldi	r24, 0x38	; 56
    1968:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a0 ea       	ldi	r26, 0xA0	; 160
    1972:	b0 e4       	ldi	r27, 0x40	; 64
    1974:	8f a3       	std	Y+39, r24	; 0x27
    1976:	98 a7       	std	Y+40, r25	; 0x28
    1978:	a9 a7       	std	Y+41, r26	; 0x29
    197a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197c:	6f a1       	ldd	r22, Y+39	; 0x27
    197e:	78 a5       	ldd	r23, Y+40	; 0x28
    1980:	89 a5       	ldd	r24, Y+41	; 0x29
    1982:	9a a5       	ldd	r25, Y+42	; 0x2a
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	4a ef       	ldi	r20, 0xFA	; 250
    198a:	54 e4       	ldi	r21, 0x44	; 68
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	8b a3       	std	Y+35, r24	; 0x23
    1996:	9c a3       	std	Y+36, r25	; 0x24
    1998:	ad a3       	std	Y+37, r26	; 0x25
    199a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    199c:	6b a1       	ldd	r22, Y+35	; 0x23
    199e:	7c a1       	ldd	r23, Y+36	; 0x24
    19a0:	8d a1       	ldd	r24, Y+37	; 0x25
    19a2:	9e a1       	ldd	r25, Y+38	; 0x26
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e8       	ldi	r20, 0x80	; 128
    19aa:	5f e3       	ldi	r21, 0x3F	; 63
    19ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	2c f4       	brge	.+10     	; 0x19be <LCD_INIT+0x15a>
		__ticks = 1;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9a a3       	std	Y+34, r25	; 0x22
    19ba:	89 a3       	std	Y+33, r24	; 0x21
    19bc:	3f c0       	rjmp	.+126    	; 0x1a3c <LCD_INIT+0x1d8>
	else if (__tmp > 65535)
    19be:	6b a1       	ldd	r22, Y+35	; 0x23
    19c0:	7c a1       	ldd	r23, Y+36	; 0x24
    19c2:	8d a1       	ldd	r24, Y+37	; 0x25
    19c4:	9e a1       	ldd	r25, Y+38	; 0x26
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	3f ef       	ldi	r19, 0xFF	; 255
    19ca:	4f e7       	ldi	r20, 0x7F	; 127
    19cc:	57 e4       	ldi	r21, 0x47	; 71
    19ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d2:	18 16       	cp	r1, r24
    19d4:	4c f5       	brge	.+82     	; 0x1a28 <LCD_INIT+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d6:	6f a1       	ldd	r22, Y+39	; 0x27
    19d8:	78 a5       	ldd	r23, Y+40	; 0x28
    19da:	89 a5       	ldd	r24, Y+41	; 0x29
    19dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e2       	ldi	r20, 0x20	; 32
    19e4:	51 e4       	ldi	r21, 0x41	; 65
    19e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	bc 01       	movw	r22, r24
    19f0:	cd 01       	movw	r24, r26
    19f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	9a a3       	std	Y+34, r25	; 0x22
    19fc:	89 a3       	std	Y+33, r24	; 0x21
    19fe:	0f c0       	rjmp	.+30     	; 0x1a1e <LCD_INIT+0x1ba>
    1a00:	88 ec       	ldi	r24, 0xC8	; 200
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	98 a3       	std	Y+32, r25	; 0x20
    1a06:	8f 8f       	std	Y+31, r24	; 0x1f
    1a08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a0a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_INIT+0x1a8>
    1a10:	98 a3       	std	Y+32, r25	; 0x20
    1a12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a14:	89 a1       	ldd	r24, Y+33	; 0x21
    1a16:	9a a1       	ldd	r25, Y+34	; 0x22
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	9a a3       	std	Y+34, r25	; 0x22
    1a1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a20:	9a a1       	ldd	r25, Y+34	; 0x22
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	69 f7       	brne	.-38     	; 0x1a00 <LCD_INIT+0x19c>
    1a26:	14 c0       	rjmp	.+40     	; 0x1a50 <LCD_INIT+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a28:	6b a1       	ldd	r22, Y+35	; 0x23
    1a2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9a a3       	std	Y+34, r25	; 0x22
    1a3a:	89 a3       	std	Y+33, r24	; 0x21
    1a3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a40:	9e 8f       	std	Y+30, r25	; 0x1e
    1a42:	8d 8f       	std	Y+29, r24	; 0x1d
    1a44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <LCD_INIT+0x1e4>
    1a4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a4e:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(5);
	 LCD_WRITE_COMMAND(lcd_DisplayOn );
    1a50:	8c e0       	ldi	r24, 0x0C	; 12
    1a52:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a0 ea       	ldi	r26, 0xA0	; 160
    1a5c:	b0 e4       	ldi	r27, 0x40	; 64
    1a5e:	89 8f       	std	Y+25, r24	; 0x19
    1a60:	9a 8f       	std	Y+26, r25	; 0x1a
    1a62:	ab 8f       	std	Y+27, r26	; 0x1b
    1a64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a66:	69 8d       	ldd	r22, Y+25	; 0x19
    1a68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	4a ef       	ldi	r20, 0xFA	; 250
    1a74:	54 e4       	ldi	r21, 0x44	; 68
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8d 8b       	std	Y+21, r24	; 0x15
    1a80:	9e 8b       	std	Y+22, r25	; 0x16
    1a82:	af 8b       	std	Y+23, r26	; 0x17
    1a84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a86:	6d 89       	ldd	r22, Y+21	; 0x15
    1a88:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e8       	ldi	r20, 0x80	; 128
    1a94:	5f e3       	ldi	r21, 0x3F	; 63
    1a96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9a:	88 23       	and	r24, r24
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <LCD_INIT+0x244>
		__ticks = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9c 8b       	std	Y+20, r25	; 0x14
    1aa4:	8b 8b       	std	Y+19, r24	; 0x13
    1aa6:	3f c0       	rjmp	.+126    	; 0x1b26 <LCD_INIT+0x2c2>
	else if (__tmp > 65535)
    1aa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aaa:	7e 89       	ldd	r23, Y+22	; 0x16
    1aac:	8f 89       	ldd	r24, Y+23	; 0x17
    1aae:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	57 e4       	ldi	r21, 0x47	; 71
    1ab8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	4c f5       	brge	.+82     	; 0x1b12 <LCD_INIT+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e2       	ldi	r20, 0x20	; 32
    1ace:	51 e4       	ldi	r21, 0x41	; 65
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9c 8b       	std	Y+20, r25	; 0x14
    1ae6:	8b 8b       	std	Y+19, r24	; 0x13
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <LCD_INIT+0x2a4>
    1aea:	88 ec       	ldi	r24, 0xC8	; 200
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9a 8b       	std	Y+18, r25	; 0x12
    1af0:	89 8b       	std	Y+17, r24	; 0x11
    1af2:	89 89       	ldd	r24, Y+17	; 0x11
    1af4:	9a 89       	ldd	r25, Y+18	; 0x12
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_INIT+0x292>
    1afa:	9a 8b       	std	Y+18, r25	; 0x12
    1afc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	8b 89       	ldd	r24, Y+19	; 0x13
    1b00:	9c 89       	ldd	r25, Y+20	; 0x14
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <LCD_INIT+0x286>
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <LCD_INIT+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	6d 89       	ldd	r22, Y+21	; 0x15
    1b14:	7e 89       	ldd	r23, Y+22	; 0x16
    1b16:	8f 89       	ldd	r24, Y+23	; 0x17
    1b18:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9c 8b       	std	Y+20, r25	; 0x14
    1b24:	8b 8b       	std	Y+19, r24	; 0x13
    1b26:	8b 89       	ldd	r24, Y+19	; 0x13
    1b28:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2a:	98 8b       	std	Y+16, r25	; 0x10
    1b2c:	8f 87       	std	Y+15, r24	; 0x0f
    1b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b30:	98 89       	ldd	r25, Y+16	; 0x10
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_INIT+0x2ce>
    1b36:	98 8b       	std	Y+16, r25	; 0x10
    1b38:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(5);
	 LCD_WRITE_COMMAND(lcd_Clear );
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a0 ea       	ldi	r26, 0xA0	; 160
    1b46:	b0 e4       	ldi	r27, 0x40	; 64
    1b48:	8b 87       	std	Y+11, r24	; 0x0b
    1b4a:	9c 87       	std	Y+12, r25	; 0x0c
    1b4c:	ad 87       	std	Y+13, r26	; 0x0d
    1b4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	4a ef       	ldi	r20, 0xFA	; 250
    1b5e:	54 e4       	ldi	r21, 0x44	; 68
    1b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	8f 83       	std	Y+7, r24	; 0x07
    1b6a:	98 87       	std	Y+8, r25	; 0x08
    1b6c:	a9 87       	std	Y+9, r26	; 0x09
    1b6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b70:	6f 81       	ldd	r22, Y+7	; 0x07
    1b72:	78 85       	ldd	r23, Y+8	; 0x08
    1b74:	89 85       	ldd	r24, Y+9	; 0x09
    1b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <LCD_INIT+0x32e>
		__ticks = 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9e 83       	std	Y+6, r25	; 0x06
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
    1b90:	3f c0       	rjmp	.+126    	; 0x1c10 <LCD_INIT+0x3ac>
	else if (__tmp > 65535)
    1b92:	6f 81       	ldd	r22, Y+7	; 0x07
    1b94:	78 85       	ldd	r23, Y+8	; 0x08
    1b96:	89 85       	ldd	r24, Y+9	; 0x09
    1b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	3f ef       	ldi	r19, 0xFF	; 255
    1b9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ba0:	57 e4       	ldi	r21, 0x47	; 71
    1ba2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba6:	18 16       	cp	r1, r24
    1ba8:	4c f5       	brge	.+82     	; 0x1bfc <LCD_INIT+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1baa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e2       	ldi	r20, 0x20	; 32
    1bb8:	51 e4       	ldi	r21, 0x41	; 65
    1bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <LCD_INIT+0x38e>
    1bd4:	88 ec       	ldi	r24, 0xC8	; 200
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9c 83       	std	Y+4, r25	; 0x04
    1bda:	8b 83       	std	Y+3, r24	; 0x03
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD_INIT+0x37c>
    1be4:	9c 83       	std	Y+4, r25	; 0x04
    1be6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	69 f7       	brne	.-38     	; 0x1bd4 <LCD_INIT+0x370>
    1bfa:	14 c0       	rjmp	.+40     	; 0x1c24 <LCD_INIT+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfe:	78 85       	ldd	r23, Y+8	; 0x08
    1c00:	89 85       	ldd	r24, Y+9	; 0x09
    1c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	8d 81       	ldd	r24, Y+5	; 0x05
    1c12:	9e 81       	ldd	r25, Y+6	; 0x06
    1c14:	9a 83       	std	Y+2, r25	; 0x02
    1c16:	89 83       	std	Y+1, r24	; 0x01
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <LCD_INIT+0x3b8>
    1c20:	9a 83       	std	Y+2, r25	; 0x02
    1c22:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(5);
	 LCD_WRITE_COMMAND(lcd_EntryMode );
    1c24:	86 e0       	ldi	r24, 0x06	; 6
    1c26:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
//	 	 _delay_ms(5);
//	 	 LCD_WRITE_COMMAND(lcd_EntryMode );

	 
#endif
 }
    1c2a:	e8 96       	adiw	r28, 0x38	; 56
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <LCD_WRITE_COMMAND>:
 void LCD_WRITE_COMMAND(u8 Copy_u8command){
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	2f 97       	sbiw	r28, 0x0f	; 15
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	8f 87       	std	Y+15, r24	; 0x0f
	
#if LCD_MODE == LCD_u8_Mode_8_bit
	/* step1 : RS =0  */  // PIN0 PORTA   SET THIS VALUES IN CONFIGRATION FILE 
	
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,  RS_PIN , LOGIC_LOW);
    1c52:	82 e0       	ldi	r24, 0x02	; 2
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	40 e0       	ldi	r20, 0x00	; 0
    1c58:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 
	 /* Step2 : RW =0 */
	 
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,RW_PIN  , LOGIC_LOW);  // PIN1 PORTA   SET THIS VALUES IN CONFIGRATION FILE
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	61 e0       	ldi	r22, 0x01	; 1
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	
     DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);   // TO ENSURE THAT ENABLE PIN IS 0 BEFORE WE SEND DATA TO LCD 
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	62 e0       	ldi	r22, 0x02	; 2
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	
	 /* Write Command */
	 
	 DIO_u8SetPortValue(LCD_DATA_PORT , Copy_u8command) ; // SET PORT NUMBER IN CONFIGURATION FILE 
    1c70:	83 e0       	ldi	r24, 0x03	; 3
    1c72:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c74:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_u8SetPortValue>
	 
	 /*  E=1 */
	 
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_HIGH);
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	62 e0       	ldi	r22, 0x02	; 2
    1c7c:	41 e0       	ldi	r20, 0x01	; 1
    1c7e:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a0 e8       	ldi	r26, 0x80	; 128
    1c88:	bf e3       	ldi	r27, 0x3F	; 63
    1c8a:	8b 87       	std	Y+11, r24	; 0x0b
    1c8c:	9c 87       	std	Y+12, r25	; 0x0c
    1c8e:	ad 87       	std	Y+13, r26	; 0x0d
    1c90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ca0:	54 e4       	ldi	r21, 0x44	; 68
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	8f 83       	std	Y+7, r24	; 0x07
    1cac:	98 87       	std	Y+8, r25	; 0x08
    1cae:	a9 87       	std	Y+9, r26	; 0x09
    1cb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb4:	78 85       	ldd	r23, Y+8	; 0x08
    1cb6:	89 85       	ldd	r24, Y+9	; 0x09
    1cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	5f e3       	ldi	r21, 0x3F	; 63
    1cc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <LCD_WRITE_COMMAND+0x98>
		__ticks = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
    1cd2:	3f c0       	rjmp	.+126    	; 0x1d52 <LCD_WRITE_COMMAND+0x116>
	else if (__tmp > 65535)
    1cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd6:	78 85       	ldd	r23, Y+8	; 0x08
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	3f ef       	ldi	r19, 0xFF	; 255
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	57 e4       	ldi	r21, 0x47	; 71
    1ce4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	4c f5       	brge	.+82     	; 0x1d3e <LCD_WRITE_COMMAND+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9e 83       	std	Y+6, r25	; 0x06
    1d12:	8d 83       	std	Y+5, r24	; 0x05
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <LCD_WRITE_COMMAND+0xf8>
    1d16:	88 ec       	ldi	r24, 0xC8	; 200
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9c 83       	std	Y+4, r25	; 0x04
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <LCD_WRITE_COMMAND+0xe6>
    1d26:	9c 83       	std	Y+4, r25	; 0x04
    1d28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	69 f7       	brne	.-38     	; 0x1d16 <LCD_WRITE_COMMAND+0xda>
    1d3c:	14 c0       	rjmp	.+40     	; 0x1d66 <LCD_WRITE_COMMAND+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d40:	78 85       	ldd	r23, Y+8	; 0x08
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_WRITE_COMMAND+0x122>
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
 	 _delay_ms(1);
	 
	 /*  E=0 */
	 
	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	62 e0       	ldi	r22, 0x02	; 2
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
//	 /*  E=0 */
//
//	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);

	 #endif 
 }
    1d70:	2f 96       	adiw	r28, 0x0f	; 15
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	cd bf       	out	0x3d, r28	; 61
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <LCD_WRITE_Char>:
 
 
 void LCD_WRITE_Char(u8 Copy_u8char){
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	2f 97       	sbiw	r28, 0x0f	; 15
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
    1d96:	8f 87       	std	Y+15, r24	; 0x0f
#if LCD_MODE == LCD_u8_Mode_8_bit
	/* step1 : RS =1  */  // PIN0 PORTA   SET THIS VALUES IN CONFIGRATION FILE 
	
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,  RS_PIN , LOGIC_HIGH);
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 
	 /* Step2 : RW =0 */
	 
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,RW_PIN  , LOGIC_LOW);  // PIN1 PORTA   SET THIS VALUES IN CONFIGRATION FILE
    1da2:	82 e0       	ldi	r24, 0x02	; 2
    1da4:	61 e0       	ldi	r22, 0x01	; 1
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	
     DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);   // TO ENSURE THAT ENABLE PIN IS 0 BEFORE WE SEND DATA TO LCD 
    1dac:	82 e0       	ldi	r24, 0x02	; 2
    1dae:	62 e0       	ldi	r22, 0x02	; 2
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	
	 /* Write Command */
	 
	 DIO_u8SetPortValue(LCD_DATA_PORT , Copy_u8char) ; // SET PORT NUMBER IN CONFIGURATION FILE
    1db6:	83 e0       	ldi	r24, 0x03	; 3
    1db8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dba:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_u8SetPortValue>
	 
	 /*  E=1 */
	 
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_HIGH);
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	62 e0       	ldi	r22, 0x02	; 2
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
    1dc4:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	a0 e8       	ldi	r26, 0x80	; 128
    1dce:	bf e3       	ldi	r27, 0x3F	; 63
    1dd0:	8b 87       	std	Y+11, r24	; 0x0b
    1dd2:	9c 87       	std	Y+12, r25	; 0x0c
    1dd4:	ad 87       	std	Y+13, r26	; 0x0d
    1dd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	4a ef       	ldi	r20, 0xFA	; 250
    1de6:	54 e4       	ldi	r21, 0x44	; 68
    1de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	8f 83       	std	Y+7, r24	; 0x07
    1df2:	98 87       	std	Y+8, r25	; 0x08
    1df4:	a9 87       	std	Y+9, r26	; 0x09
    1df6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfa:	78 85       	ldd	r23, Y+8	; 0x08
    1dfc:	89 85       	ldd	r24, Y+9	; 0x09
    1dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e8       	ldi	r20, 0x80	; 128
    1e06:	5f e3       	ldi	r21, 0x3F	; 63
    1e08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e0c:	88 23       	and	r24, r24
    1e0e:	2c f4       	brge	.+10     	; 0x1e1a <LCD_WRITE_Char+0x98>
		__ticks = 1;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9e 83       	std	Y+6, r25	; 0x06
    1e16:	8d 83       	std	Y+5, r24	; 0x05
    1e18:	3f c0       	rjmp	.+126    	; 0x1e98 <LCD_WRITE_Char+0x116>
	else if (__tmp > 65535)
    1e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1c:	78 85       	ldd	r23, Y+8	; 0x08
    1e1e:	89 85       	ldd	r24, Y+9	; 0x09
    1e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	3f ef       	ldi	r19, 0xFF	; 255
    1e26:	4f e7       	ldi	r20, 0x7F	; 127
    1e28:	57 e4       	ldi	r21, 0x47	; 71
    1e2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e2e:	18 16       	cp	r1, r24
    1e30:	4c f5       	brge	.+82     	; 0x1e84 <LCD_WRITE_Char+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e2       	ldi	r20, 0x20	; 32
    1e40:	51 e4       	ldi	r21, 0x41	; 65
    1e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	bc 01       	movw	r22, r24
    1e4c:	cd 01       	movw	r24, r26
    1e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	9e 83       	std	Y+6, r25	; 0x06
    1e58:	8d 83       	std	Y+5, r24	; 0x05
    1e5a:	0f c0       	rjmp	.+30     	; 0x1e7a <LCD_WRITE_Char+0xf8>
    1e5c:	88 ec       	ldi	r24, 0xC8	; 200
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9c 83       	std	Y+4, r25	; 0x04
    1e62:	8b 83       	std	Y+3, r24	; 0x03
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <LCD_WRITE_Char+0xe6>
    1e6c:	9c 83       	std	Y+4, r25	; 0x04
    1e6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	9e 83       	std	Y+6, r25	; 0x06
    1e78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	69 f7       	brne	.-38     	; 0x1e5c <LCD_WRITE_Char+0xda>
    1e82:	14 c0       	rjmp	.+40     	; 0x1eac <LCD_WRITE_Char+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e84:	6f 81       	ldd	r22, Y+7	; 0x07
    1e86:	78 85       	ldd	r23, Y+8	; 0x08
    1e88:	89 85       	ldd	r24, Y+9	; 0x09
    1e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <LCD_WRITE_Char+0x122>
    1ea8:	9a 83       	std	Y+2, r25	; 0x02
    1eaa:	89 83       	std	Y+1, r24	; 0x01
 	 _delay_ms(1);
	 
	 /*  E=0 */
	 
	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);
    1eac:	82 e0       	ldi	r24, 0x02	; 2
    1eae:	62 e0       	ldi	r22, 0x02	; 2
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 /*  E=0 */
	 
	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);

	 #endif 
 }
    1eb6:	2f 96       	adiw	r28, 0x0f	; 15
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <LCD_WRITE_STRING>:
 
 void LCD_WRITE_STRING(u8 *copy_string ){
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <LCD_WRITE_STRING+0x6>
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <LCD_WRITE_STRING+0x8>
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	9c 83       	std	Y+4, r25	; 0x04
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
	u16 i =0 ;
    1ed8:	1a 82       	std	Y+2, r1	; 0x02
    1eda:	19 82       	std	Y+1, r1	; 0x01
    1edc:	0f c0       	rjmp	.+30     	; 0x1efc <LCD_WRITE_STRING+0x34>
	while(copy_string[i] !='\0'){
		LCD_WRITE_Char(copy_string[i]);
    1ede:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee6:	f9 01       	movw	r30, r18
    1ee8:	e8 0f       	add	r30, r24
    1eea:	f9 1f       	adc	r31, r25
    1eec:	80 81       	ld	r24, Z
    1eee:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LCD_WRITE_Char>
		i++ ;
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	89 83       	std	Y+1, r24	; 0x01
	 #endif 
 }
 
 void LCD_WRITE_STRING(u8 *copy_string ){
	u16 i =0 ;
	while(copy_string[i] !='\0'){
    1efc:	2b 81       	ldd	r18, Y+3	; 0x03
    1efe:	3c 81       	ldd	r19, Y+4	; 0x04
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	9a 81       	ldd	r25, Y+2	; 0x02
    1f04:	f9 01       	movw	r30, r18
    1f06:	e8 0f       	add	r30, r24
    1f08:	f9 1f       	adc	r31, r25
    1f0a:	80 81       	ld	r24, Z
    1f0c:	88 23       	and	r24, r24
    1f0e:	39 f7       	brne	.-50     	; 0x1ede <LCD_WRITE_STRING+0x16>
		LCD_WRITE_Char(copy_string[i]);
		i++ ;

	}

 }
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <Lcd_voidDisplayNumber>:


 void Lcd_voidDisplayNumber(s32 Copy_s32Number){
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	6b 97       	sbiw	r28, 0x1b	; 27
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	68 8f       	std	Y+24, r22	; 0x18
    1f34:	79 8f       	std	Y+25, r23	; 0x19
    1f36:	8a 8f       	std	Y+26, r24	; 0x1a
    1f38:	9b 8f       	std	Y+27, r25	; 0x1b
	 u8 arr[20];
	 u8  i =1 ;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
	 u8  j  ;
	 if( Copy_s32Number < 0 ){
    1f3e:	88 8d       	ldd	r24, Y+24	; 0x18
    1f40:	99 8d       	ldd	r25, Y+25	; 0x19
    1f42:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1f44:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1f46:	bb 23       	and	r27, r27
    1f48:	0c f0       	brlt	.+2      	; 0x1f4c <Lcd_voidDisplayNumber+0x2e>
    1f4a:	43 c0       	rjmp	.+134    	; 0x1fd2 <Lcd_voidDisplayNumber+0xb4>
		 LCD_WRITE_Char('-');
    1f4c:	8d e2       	ldi	r24, 0x2D	; 45
    1f4e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LCD_WRITE_Char>
	 		Copy_s32Number *= -1 ;
    1f52:	88 8d       	ldd	r24, Y+24	; 0x18
    1f54:	99 8d       	ldd	r25, Y+25	; 0x19
    1f56:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1f58:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1f5a:	b0 95       	com	r27
    1f5c:	a0 95       	com	r26
    1f5e:	90 95       	com	r25
    1f60:	81 95       	neg	r24
    1f62:	9f 4f       	sbci	r25, 0xFF	; 255
    1f64:	af 4f       	sbci	r26, 0xFF	; 255
    1f66:	bf 4f       	sbci	r27, 0xFF	; 255
    1f68:	88 8f       	std	Y+24, r24	; 0x18
    1f6a:	99 8f       	std	Y+25, r25	; 0x19
    1f6c:	aa 8f       	std	Y+26, r26	; 0x1a
    1f6e:	bb 8f       	std	Y+27, r27	; 0x1b
    1f70:	30 c0       	rjmp	.+96     	; 0x1fd2 <Lcd_voidDisplayNumber+0xb4>
	 	}

	 while(Copy_s32Number !=0 ){
		u8 units = Copy_s32Number%10 ;
    1f72:	88 8d       	ldd	r24, Y+24	; 0x18
    1f74:	99 8d       	ldd	r25, Y+25	; 0x19
    1f76:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1f78:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1f7a:	2a e0       	ldi	r18, 0x0A	; 10
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 47 28 	call	0x508e	; 0x508e <__divmodsi4>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	89 83       	std	Y+1, r24	; 0x01
		arr[i]= ('0'+units);
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	48 2f       	mov	r20, r24
    1f9a:	40 5d       	subi	r20, 0xD0	; 208
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	04 96       	adiw	r24, 0x04	; 4
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	e2 0f       	add	r30, r18
    1fa4:	f3 1f       	adc	r31, r19
    1fa6:	40 83       	st	Z, r20
		Copy_s32Number /= 10 ;
    1fa8:	88 8d       	ldd	r24, Y+24	; 0x18
    1faa:	99 8d       	ldd	r25, Y+25	; 0x19
    1fac:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1fae:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1fb0:	2a e0       	ldi	r18, 0x0A	; 10
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	0e 94 47 28 	call	0x508e	; 0x508e <__divmodsi4>
    1fc0:	da 01       	movw	r26, r20
    1fc2:	c9 01       	movw	r24, r18
    1fc4:	88 8f       	std	Y+24, r24	; 0x18
    1fc6:	99 8f       	std	Y+25, r25	; 0x19
    1fc8:	aa 8f       	std	Y+26, r26	; 0x1a
    1fca:	bb 8f       	std	Y+27, r27	; 0x1b
		 i++ ;
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	8f 5f       	subi	r24, 0xFF	; 255
    1fd0:	8b 83       	std	Y+3, r24	; 0x03
	 if( Copy_s32Number < 0 ){
		 LCD_WRITE_Char('-');
	 		Copy_s32Number *= -1 ;
	 	}

	 while(Copy_s32Number !=0 ){
    1fd2:	88 8d       	ldd	r24, Y+24	; 0x18
    1fd4:	99 8d       	ldd	r25, Y+25	; 0x19
    1fd6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1fd8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	a1 05       	cpc	r26, r1
    1fde:	b1 05       	cpc	r27, r1
    1fe0:	41 f6       	brne	.-112    	; 0x1f72 <Lcd_voidDisplayNumber+0x54>
		arr[i]= ('0'+units);
		Copy_s32Number /= 10 ;
		 i++ ;
	 }

	 for ( j =i-1 ; j>0 ; --j) {
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	81 50       	subi	r24, 0x01	; 1
    1fe6:	8a 83       	std	Y+2, r24	; 0x02
    1fe8:	0e c0       	rjmp	.+28     	; 0x2006 <Lcd_voidDisplayNumber+0xe8>
		LCD_WRITE_Char(arr[j]);
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	04 96       	adiw	r24, 0x04	; 4
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	e2 0f       	add	r30, r18
    1ff8:	f3 1f       	adc	r31, r19
    1ffa:	80 81       	ld	r24, Z
    1ffc:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LCD_WRITE_Char>
		arr[i]= ('0'+units);
		Copy_s32Number /= 10 ;
		 i++ ;
	 }

	 for ( j =i-1 ; j>0 ; --j) {
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	81 50       	subi	r24, 0x01	; 1
    2004:	8a 83       	std	Y+2, r24	; 0x02
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	88 23       	and	r24, r24
    200a:	79 f7       	brne	.-34     	; 0x1fea <Lcd_voidDisplayNumber+0xcc>
		LCD_WRITE_Char(arr[j]);
	}

 }
    200c:	6b 96       	adiw	r28, 0x1b	; 27
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <LCD_GO_TO>:

u8 LCD_GO_TO(u8 line , u8 colummn){
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	00 d0       	rcall	.+0      	; 0x2024 <LCD_GO_TO+0x6>
    2024:	00 d0       	rcall	.+0      	; 0x2026 <LCD_GO_TO+0x8>
    2026:	0f 92       	push	r0
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	8a 83       	std	Y+2, r24	; 0x02
    202e:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_error_state = STD_TYPES_OK;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	89 83       	std	Y+1, r24	; 0x01
	
	if( colummn<=39){
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	88 32       	cpi	r24, 0x28	; 40
    2038:	d8 f4       	brcc	.+54     	; 0x2070 <LCD_GO_TO+0x52>
		
		switch(line){
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	3d 83       	std	Y+5, r19	; 0x05
    2042:	2c 83       	std	Y+4, r18	; 0x04
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	9d 81       	ldd	r25, Y+5	; 0x05
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	31 f0       	breq	.+12     	; 0x2058 <LCD_GO_TO+0x3a>
    204c:	2c 81       	ldd	r18, Y+4	; 0x04
    204e:	3d 81       	ldd	r19, Y+5	; 0x05
    2050:	21 30       	cpi	r18, 0x01	; 1
    2052:	31 05       	cpc	r19, r1
    2054:	31 f0       	breq	.+12     	; 0x2062 <LCD_GO_TO+0x44>
    2056:	0a c0       	rjmp	.+20     	; 0x206c <LCD_GO_TO+0x4e>
			case line1:  LCD_WRITE_COMMAND(0x80 +colummn ); break ;
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	80 58       	subi	r24, 0x80	; 128
    205c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
    2060:	08 c0       	rjmp	.+16     	; 0x2072 <LCD_GO_TO+0x54>
			
			case line2:  LCD_WRITE_COMMAND(0xc0 +colummn ); break ;
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	80 54       	subi	r24, 0x40	; 64
    2066:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
    206a:	03 c0       	rjmp	.+6      	; 0x2072 <LCD_GO_TO+0x54>
			default:local_error_state = STD_TYPES_NOK;
    206c:	19 82       	std	Y+1, r1	; 0x01
    206e:	01 c0       	rjmp	.+2      	; 0x2072 <LCD_GO_TO+0x54>
			
		}
	}
	
	else{
		local_error_state = STD_TYPES_NOK;
    2070:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
	return  local_error_state ;
    2072:	89 81       	ldd	r24, Y+1	; 0x01
}
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <LCD_store_customchar>:

void LCD_store_customchar(u8 index,u8 *customchar){  // number of pattern  
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	00 d0       	rcall	.+0      	; 0x208a <LCD_store_customchar+0x6>
    208a:	00 d0       	rcall	.+0      	; 0x208c <LCD_store_customchar+0x8>
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	8a 83       	std	Y+2, r24	; 0x02
    2092:	7c 83       	std	Y+4, r23	; 0x04
    2094:	6b 83       	std	Y+3, r22	; 0x03
	if(index<8){
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	88 30       	cpi	r24, 0x08	; 8
    209a:	18 f5       	brcc	.+70     	; 0x20e2 <LCD_store_customchar+0x5e>
		LCD_WRITE_COMMAND(CG_RAM_ADDRESS +index*8);
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	88 2f       	mov	r24, r24
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	08 96       	adiw	r24, 0x08	; 8
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
		for(u8 i=0;i<8;i++){
    20b4:	19 82       	std	Y+1, r1	; 0x01
    20b6:	0e c0       	rjmp	.+28     	; 0x20d4 <LCD_store_customchar+0x50>
			LCD_WRITE_Char(customchar[i]);
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	9c 81       	ldd	r25, Y+4	; 0x04
    20c2:	fc 01       	movw	r30, r24
    20c4:	e2 0f       	add	r30, r18
    20c6:	f3 1f       	adc	r31, r19
    20c8:	80 81       	ld	r24, Z
    20ca:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LCD_WRITE_Char>
}

void LCD_store_customchar(u8 index,u8 *customchar){  // number of pattern  
	if(index<8){
		LCD_WRITE_COMMAND(CG_RAM_ADDRESS +index*8);
		for(u8 i=0;i<8;i++){
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	8f 5f       	subi	r24, 0xFF	; 255
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	88 30       	cpi	r24, 0x08	; 8
    20d8:	78 f3       	brcs	.-34     	; 0x20b8 <LCD_store_customchar+0x34>
			LCD_WRITE_Char(customchar[i]);
		}
	    LCD_GO_TO(line1 , 1) ;	 
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	61 e0       	ldi	r22, 0x01	; 1
    20de:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
	}
}
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <LCD_DISPLAY_CUSTOM_CHAR>:
//***************************************************
void LCD_DISPLAY_CUSTOM_CHAR(u8 index){
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	0f 92       	push	r0
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	89 83       	std	Y+1, r24	; 0x01
	if(index<8){
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	88 30       	cpi	r24, 0x08	; 8
    2100:	18 f4       	brcc	.+6      	; 0x2108 <LCD_DISPLAY_CUSTOM_CHAR+0x18>
		LCD_WRITE_Char(index);
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LCD_WRITE_Char>
	}
}
    2108:	0f 90       	pop	r0
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <STEPPER_voidmotion>:
#include "STEPPER-CONFIG.h"
 



void STEPPER_voidmotion(u8 direction , u16 degree) {
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	cd 57       	subi	r28, 0x7D	; 125
    211e:	d0 40       	sbci	r29, 0x00	; 0
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	fe 01       	movw	r30, r28
    212c:	e7 58       	subi	r30, 0x87	; 135
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	80 83       	st	Z, r24
    2132:	fe 01       	movw	r30, r28
    2134:	e6 58       	subi	r30, 0x86	; 134
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	71 83       	std	Z+1, r23	; 0x01
    213a:	60 83       	st	Z, r22
u16 number_of_steps = (degree*2048UL)/360 ;
    213c:	fe 01       	movw	r30, r28
    213e:	e6 58       	subi	r30, 0x86	; 134
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 81       	ld	r24, Z
    2144:	91 81       	ldd	r25, Z+1	; 0x01
    2146:	cc 01       	movw	r24, r24
    2148:	a0 e0       	ldi	r26, 0x00	; 0
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	07 2e       	mov	r0, r23
    214e:	7b e0       	ldi	r23, 0x0B	; 11
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	aa 1f       	adc	r26, r26
    2156:	bb 1f       	adc	r27, r27
    2158:	7a 95       	dec	r23
    215a:	d1 f7       	brne	.-12     	; 0x2150 <STEPPER_voidmotion+0x40>
    215c:	70 2d       	mov	r23, r0
    215e:	28 e6       	ldi	r18, 0x68	; 104
    2160:	31 e0       	ldi	r19, 0x01	; 1
    2162:	40 e0       	ldi	r20, 0x00	; 0
    2164:	50 e0       	ldi	r21, 0x00	; 0
    2166:	bc 01       	movw	r22, r24
    2168:	cd 01       	movw	r24, r26
    216a:	0e 94 25 28 	call	0x504a	; 0x504a <__udivmodsi4>
    216e:	da 01       	movw	r26, r20
    2170:	c9 01       	movw	r24, r18
    2172:	fe 01       	movw	r30, r28
    2174:	e9 58       	subi	r30, 0x89	; 137
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	91 83       	std	Z+1, r25	; 0x01
    217a:	80 83       	st	Z, r24
u16 number_of_iteration = number_of_steps/4 ;
    217c:	de 01       	movw	r26, r28
    217e:	ab 58       	subi	r26, 0x8B	; 139
    2180:	bf 4f       	sbci	r27, 0xFF	; 255
    2182:	fe 01       	movw	r30, r28
    2184:	e9 58       	subi	r30, 0x89	; 137
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	80 81       	ld	r24, Z
    218a:	91 81       	ldd	r25, Z+1	; 0x01
    218c:	96 95       	lsr	r25
    218e:	87 95       	ror	r24
    2190:	96 95       	lsr	r25
    2192:	87 95       	ror	r24
    2194:	11 96       	adiw	r26, 0x01	; 1
    2196:	9c 93       	st	X, r25
    2198:	8e 93       	st	-X, r24

/* TO ROTATE CLOCK WISE */	
switch(direction){
    219a:	fe 01       	movw	r30, r28
    219c:	e7 58       	subi	r30, 0x87	; 135
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	ee 96       	adiw	r28, 0x3e	; 62
    21a8:	3f af       	std	Y+63, r19	; 0x3f
    21aa:	2e af       	std	Y+62, r18	; 0x3e
    21ac:	ee 97       	sbiw	r28, 0x3e	; 62
    21ae:	ee 96       	adiw	r28, 0x3e	; 62
    21b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    21b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    21b4:	ee 97       	sbiw	r28, 0x3e	; 62
    21b6:	00 97       	sbiw	r24, 0x00	; 0
    21b8:	49 f0       	breq	.+18     	; 0x21cc <STEPPER_voidmotion+0xbc>
    21ba:	ee 96       	adiw	r28, 0x3e	; 62
    21bc:	ee ad       	ldd	r30, Y+62	; 0x3e
    21be:	ff ad       	ldd	r31, Y+63	; 0x3f
    21c0:	ee 97       	sbiw	r28, 0x3e	; 62
    21c2:	e1 30       	cpi	r30, 0x01	; 1
    21c4:	f1 05       	cpc	r31, r1
    21c6:	09 f4       	brne	.+2      	; 0x21ca <STEPPER_voidmotion+0xba>
    21c8:	10 c3       	rjmp	.+1568   	; 0x27ea <STEPPER_voidmotion+0x6da>
    21ca:	47 c5       	rjmp	.+2702   	; 0x2c5a <STEPPER_voidmotion+0xb4a>

case CLOCK_WISE :

for( int i=0 ; i< number_of_iteration ; i++ ){
    21cc:	fe 01       	movw	r30, r28
    21ce:	ed 58       	subi	r30, 0x8D	; 141
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	11 82       	std	Z+1, r1	; 0x01
    21d4:	10 82       	st	Z, r1
    21d6:	fa c2       	rjmp	.+1524   	; 0x27cc <STEPPER_voidmotion+0x6bc>
	
	/*  DISACTIVATE ALL PINS EXCEPT BLUE PIN */
	
	 DIO_u8SetPinValue(TRANSISTOR_PORT , PINK , LOGIC_HIGH);
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	61 e0       	ldi	r22, 0x01	; 1
    21dc:	41 e0       	ldi	r20, 0x01	; 1
    21de:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , ORANGE , LOGIC_HIGH);
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	63 e0       	ldi	r22, 0x03	; 3
    21e6:	41 e0       	ldi	r20, 0x01	; 1
    21e8:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , YELLOW , LOGIC_HIGH);	
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	62 e0       	ldi	r22, 0x02	; 2
    21f0:	41 e0       	ldi	r20, 0x01	; 1
    21f2:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , BLUE ,   LOGIC_LOW);
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    2200:	fe 01       	movw	r30, r28
    2202:	e3 59       	subi	r30, 0x93	; 147
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a0 e2       	ldi	r26, 0x20	; 32
    220c:	b1 e4       	ldi	r27, 0x41	; 65
    220e:	80 83       	st	Z, r24
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	a2 83       	std	Z+2, r26	; 0x02
    2214:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2216:	8e 01       	movw	r16, r28
    2218:	07 59       	subi	r16, 0x97	; 151
    221a:	1f 4f       	sbci	r17, 0xFF	; 255
    221c:	fe 01       	movw	r30, r28
    221e:	e3 59       	subi	r30, 0x93	; 147
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	60 81       	ld	r22, Z
    2224:	71 81       	ldd	r23, Z+1	; 0x01
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	4a ef       	ldi	r20, 0xFA	; 250
    2230:	54 e4       	ldi	r21, 0x44	; 68
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	f8 01       	movw	r30, r16
    223c:	80 83       	st	Z, r24
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	a2 83       	std	Z+2, r26	; 0x02
    2242:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2244:	fe 01       	movw	r30, r28
    2246:	e7 59       	subi	r30, 0x97	; 151
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	60 81       	ld	r22, Z
    224c:	71 81       	ldd	r23, Z+1	; 0x01
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e8       	ldi	r20, 0x80	; 128
    2258:	5f e3       	ldi	r21, 0x3F	; 63
    225a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    225e:	88 23       	and	r24, r24
    2260:	44 f4       	brge	.+16     	; 0x2272 <STEPPER_voidmotion+0x162>
		__ticks = 1;
    2262:	fe 01       	movw	r30, r28
    2264:	e9 59       	subi	r30, 0x99	; 153
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	80 83       	st	Z, r24
    2270:	64 c0       	rjmp	.+200    	; 0x233a <STEPPER_voidmotion+0x22a>
	else if (__tmp > 65535)
    2272:	fe 01       	movw	r30, r28
    2274:	e7 59       	subi	r30, 0x97	; 151
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	3f ef       	ldi	r19, 0xFF	; 255
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	57 e4       	ldi	r21, 0x47	; 71
    2288:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	0c f0       	brlt	.+2      	; 0x2292 <STEPPER_voidmotion+0x182>
    2290:	43 c0       	rjmp	.+134    	; 0x2318 <STEPPER_voidmotion+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	fe 01       	movw	r30, r28
    2294:	e3 59       	subi	r30, 0x93	; 147
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e2       	ldi	r20, 0x20	; 32
    22a6:	51 e4       	ldi	r21, 0x41	; 65
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8e 01       	movw	r16, r28
    22b2:	09 59       	subi	r16, 0x99	; 153
    22b4:	1f 4f       	sbci	r17, 0xFF	; 255
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	f8 01       	movw	r30, r16
    22c4:	91 83       	std	Z+1, r25	; 0x01
    22c6:	80 83       	st	Z, r24
    22c8:	1f c0       	rjmp	.+62     	; 0x2308 <STEPPER_voidmotion+0x1f8>
    22ca:	fe 01       	movw	r30, r28
    22cc:	eb 59       	subi	r30, 0x9B	; 155
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	88 ec       	ldi	r24, 0xC8	; 200
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	91 83       	std	Z+1, r25	; 0x01
    22d6:	80 83       	st	Z, r24
    22d8:	fe 01       	movw	r30, r28
    22da:	eb 59       	subi	r30, 0x9B	; 155
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	80 81       	ld	r24, Z
    22e0:	91 81       	ldd	r25, Z+1	; 0x01
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <STEPPER_voidmotion+0x1d2>
    22e6:	fe 01       	movw	r30, r28
    22e8:	eb 59       	subi	r30, 0x9B	; 155
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f0:	de 01       	movw	r26, r28
    22f2:	a9 59       	subi	r26, 0x99	; 153
    22f4:	bf 4f       	sbci	r27, 0xFF	; 255
    22f6:	fe 01       	movw	r30, r28
    22f8:	e9 59       	subi	r30, 0x99	; 153
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	11 96       	adiw	r26, 0x01	; 1
    2304:	9c 93       	st	X, r25
    2306:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	fe 01       	movw	r30, r28
    230a:	e9 59       	subi	r30, 0x99	; 153
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 81       	ld	r24, Z
    2310:	91 81       	ldd	r25, Z+1	; 0x01
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	d1 f6       	brne	.-76     	; 0x22ca <STEPPER_voidmotion+0x1ba>
    2316:	27 c0       	rjmp	.+78     	; 0x2366 <STEPPER_voidmotion+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	8e 01       	movw	r16, r28
    231a:	09 59       	subi	r16, 0x99	; 153
    231c:	1f 4f       	sbci	r17, 0xFF	; 255
    231e:	fe 01       	movw	r30, r28
    2320:	e7 59       	subi	r30, 0x97	; 151
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	60 81       	ld	r22, Z
    2326:	71 81       	ldd	r23, Z+1	; 0x01
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	f8 01       	movw	r30, r16
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	80 83       	st	Z, r24
    233a:	de 01       	movw	r26, r28
    233c:	ad 59       	subi	r26, 0x9D	; 157
    233e:	bf 4f       	sbci	r27, 0xFF	; 255
    2340:	fe 01       	movw	r30, r28
    2342:	e9 59       	subi	r30, 0x99	; 153
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	91 81       	ldd	r25, Z+1	; 0x01
    234a:	8d 93       	st	X+, r24
    234c:	9c 93       	st	X, r25
    234e:	fe 01       	movw	r30, r28
    2350:	ed 59       	subi	r30, 0x9D	; 157
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 81       	ld	r24, Z
    2356:	91 81       	ldd	r25, Z+1	; 0x01
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <STEPPER_voidmotion+0x248>
    235c:	fe 01       	movw	r30, r28
    235e:	ed 59       	subi	r30, 0x9D	; 157
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	80 83       	st	Z, r24
    _delay_ms(10);
	
	/*  DISACTIVATE ALL PINS EXCEPT PINK PIN */
	
     DIO_u8SetPinValue(PORTA , BLUE , LOGIC_HIGH);
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	60 e0       	ldi	r22, 0x00	; 0
    236a:	41 e0       	ldi	r20, 0x01	; 1
    236c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(PORTA , YELLOW , LOGIC_HIGH);
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	62 e0       	ldi	r22, 0x02	; 2
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(PORTA , ORANGE , LOGIC_HIGH);
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	63 e0       	ldi	r22, 0x03	; 3
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(PORTA , PINK , LOGIC_LOW);
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	61 e0       	ldi	r22, 0x01	; 1
    2388:	40 e0       	ldi	r20, 0x00	; 0
    238a:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    238e:	fe 01       	movw	r30, r28
    2390:	e1 5a       	subi	r30, 0xA1	; 161
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	a0 e2       	ldi	r26, 0x20	; 32
    239a:	b1 e4       	ldi	r27, 0x41	; 65
    239c:	80 83       	st	Z, r24
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	a2 83       	std	Z+2, r26	; 0x02
    23a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a4:	8e 01       	movw	r16, r28
    23a6:	05 5a       	subi	r16, 0xA5	; 165
    23a8:	1f 4f       	sbci	r17, 0xFF	; 255
    23aa:	fe 01       	movw	r30, r28
    23ac:	e1 5a       	subi	r30, 0xA1	; 161
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	60 81       	ld	r22, Z
    23b2:	71 81       	ldd	r23, Z+1	; 0x01
    23b4:	82 81       	ldd	r24, Z+2	; 0x02
    23b6:	93 81       	ldd	r25, Z+3	; 0x03
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	4a ef       	ldi	r20, 0xFA	; 250
    23be:	54 e4       	ldi	r21, 0x44	; 68
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	f8 01       	movw	r30, r16
    23ca:	80 83       	st	Z, r24
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	a2 83       	std	Z+2, r26	; 0x02
    23d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23d2:	fe 01       	movw	r30, r28
    23d4:	e5 5a       	subi	r30, 0xA5	; 165
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	60 81       	ld	r22, Z
    23da:	71 81       	ldd	r23, Z+1	; 0x01
    23dc:	82 81       	ldd	r24, Z+2	; 0x02
    23de:	93 81       	ldd	r25, Z+3	; 0x03
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e8       	ldi	r20, 0x80	; 128
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ec:	88 23       	and	r24, r24
    23ee:	44 f4       	brge	.+16     	; 0x2400 <STEPPER_voidmotion+0x2f0>
		__ticks = 1;
    23f0:	fe 01       	movw	r30, r28
    23f2:	e7 5a       	subi	r30, 0xA7	; 167
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	80 83       	st	Z, r24
    23fe:	64 c0       	rjmp	.+200    	; 0x24c8 <STEPPER_voidmotion+0x3b8>
	else if (__tmp > 65535)
    2400:	fe 01       	movw	r30, r28
    2402:	e5 5a       	subi	r30, 0xA5	; 165
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	60 81       	ld	r22, Z
    2408:	71 81       	ldd	r23, Z+1	; 0x01
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	93 81       	ldd	r25, Z+3	; 0x03
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	3f ef       	ldi	r19, 0xFF	; 255
    2412:	4f e7       	ldi	r20, 0x7F	; 127
    2414:	57 e4       	ldi	r21, 0x47	; 71
    2416:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    241a:	18 16       	cp	r1, r24
    241c:	0c f0       	brlt	.+2      	; 0x2420 <STEPPER_voidmotion+0x310>
    241e:	43 c0       	rjmp	.+134    	; 0x24a6 <STEPPER_voidmotion+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2420:	fe 01       	movw	r30, r28
    2422:	e1 5a       	subi	r30, 0xA1	; 161
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	60 81       	ld	r22, Z
    2428:	71 81       	ldd	r23, Z+1	; 0x01
    242a:	82 81       	ldd	r24, Z+2	; 0x02
    242c:	93 81       	ldd	r25, Z+3	; 0x03
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e2       	ldi	r20, 0x20	; 32
    2434:	51 e4       	ldi	r21, 0x41	; 65
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	8e 01       	movw	r16, r28
    2440:	07 5a       	subi	r16, 0xA7	; 167
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	f8 01       	movw	r30, r16
    2452:	91 83       	std	Z+1, r25	; 0x01
    2454:	80 83       	st	Z, r24
    2456:	1f c0       	rjmp	.+62     	; 0x2496 <STEPPER_voidmotion+0x386>
    2458:	fe 01       	movw	r30, r28
    245a:	e9 5a       	subi	r30, 0xA9	; 169
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	88 ec       	ldi	r24, 0xC8	; 200
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	91 83       	std	Z+1, r25	; 0x01
    2464:	80 83       	st	Z, r24
    2466:	fe 01       	movw	r30, r28
    2468:	e9 5a       	subi	r30, 0xA9	; 169
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	80 81       	ld	r24, Z
    246e:	91 81       	ldd	r25, Z+1	; 0x01
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <STEPPER_voidmotion+0x360>
    2474:	fe 01       	movw	r30, r28
    2476:	e9 5a       	subi	r30, 0xA9	; 169
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247e:	de 01       	movw	r26, r28
    2480:	a7 5a       	subi	r26, 0xA7	; 167
    2482:	bf 4f       	sbci	r27, 0xFF	; 255
    2484:	fe 01       	movw	r30, r28
    2486:	e7 5a       	subi	r30, 0xA7	; 167
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	11 96       	adiw	r26, 0x01	; 1
    2492:	9c 93       	st	X, r25
    2494:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2496:	fe 01       	movw	r30, r28
    2498:	e7 5a       	subi	r30, 0xA7	; 167
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 81       	ld	r24, Z
    249e:	91 81       	ldd	r25, Z+1	; 0x01
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	d1 f6       	brne	.-76     	; 0x2458 <STEPPER_voidmotion+0x348>
    24a4:	27 c0       	rjmp	.+78     	; 0x24f4 <STEPPER_voidmotion+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a6:	8e 01       	movw	r16, r28
    24a8:	07 5a       	subi	r16, 0xA7	; 167
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	fe 01       	movw	r30, r28
    24ae:	e5 5a       	subi	r30, 0xA5	; 165
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	f8 01       	movw	r30, r16
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	80 83       	st	Z, r24
    24c8:	de 01       	movw	r26, r28
    24ca:	ab 5a       	subi	r26, 0xAB	; 171
    24cc:	bf 4f       	sbci	r27, 0xFF	; 255
    24ce:	fe 01       	movw	r30, r28
    24d0:	e7 5a       	subi	r30, 0xA7	; 167
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 81       	ld	r24, Z
    24d6:	91 81       	ldd	r25, Z+1	; 0x01
    24d8:	8d 93       	st	X+, r24
    24da:	9c 93       	st	X, r25
    24dc:	fe 01       	movw	r30, r28
    24de:	eb 5a       	subi	r30, 0xAB	; 171
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	80 81       	ld	r24, Z
    24e4:	91 81       	ldd	r25, Z+1	; 0x01
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <STEPPER_voidmotion+0x3d6>
    24ea:	fe 01       	movw	r30, r28
    24ec:	eb 5a       	subi	r30, 0xAB	; 171
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	91 83       	std	Z+1, r25	; 0x01
    24f2:	80 83       	st	Z, r24
	 _delay_ms(10);
	 
	 /*  DISACTIVATE ALL PINS EXCEPT YELLOW PIN */
	 
	 DIO_u8SetPinValue(TRANSISTOR_PORT , BLUE , LOGIC_HIGH);
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	60 e0       	ldi	r22, 0x00	; 0
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , ORANGE , LOGIC_HIGH);
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	63 e0       	ldi	r22, 0x03	; 3
    2502:	41 e0       	ldi	r20, 0x01	; 1
    2504:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , PINK , LOGIC_HIGH);
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	61 e0       	ldi	r22, 0x01	; 1
    250c:	41 e0       	ldi	r20, 0x01	; 1
    250e:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , YELLOW , LOGIC_LOW);
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	62 e0       	ldi	r22, 0x02	; 2
    2516:	40 e0       	ldi	r20, 0x00	; 0
    2518:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    251c:	fe 01       	movw	r30, r28
    251e:	ef 5a       	subi	r30, 0xAF	; 175
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	a0 e2       	ldi	r26, 0x20	; 32
    2528:	b1 e4       	ldi	r27, 0x41	; 65
    252a:	80 83       	st	Z, r24
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	a2 83       	std	Z+2, r26	; 0x02
    2530:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2532:	8e 01       	movw	r16, r28
    2534:	03 5b       	subi	r16, 0xB3	; 179
    2536:	1f 4f       	sbci	r17, 0xFF	; 255
    2538:	fe 01       	movw	r30, r28
    253a:	ef 5a       	subi	r30, 0xAF	; 175
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	60 81       	ld	r22, Z
    2540:	71 81       	ldd	r23, Z+1	; 0x01
    2542:	82 81       	ldd	r24, Z+2	; 0x02
    2544:	93 81       	ldd	r25, Z+3	; 0x03
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	4a ef       	ldi	r20, 0xFA	; 250
    254c:	54 e4       	ldi	r21, 0x44	; 68
    254e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	f8 01       	movw	r30, r16
    2558:	80 83       	st	Z, r24
    255a:	91 83       	std	Z+1, r25	; 0x01
    255c:	a2 83       	std	Z+2, r26	; 0x02
    255e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2560:	fe 01       	movw	r30, r28
    2562:	e3 5b       	subi	r30, 0xB3	; 179
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	60 81       	ld	r22, Z
    2568:	71 81       	ldd	r23, Z+1	; 0x01
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	93 81       	ldd	r25, Z+3	; 0x03
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e8       	ldi	r20, 0x80	; 128
    2574:	5f e3       	ldi	r21, 0x3F	; 63
    2576:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257a:	88 23       	and	r24, r24
    257c:	44 f4       	brge	.+16     	; 0x258e <STEPPER_voidmotion+0x47e>
		__ticks = 1;
    257e:	fe 01       	movw	r30, r28
    2580:	e5 5b       	subi	r30, 0xB5	; 181
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	80 83       	st	Z, r24
    258c:	64 c0       	rjmp	.+200    	; 0x2656 <STEPPER_voidmotion+0x546>
	else if (__tmp > 65535)
    258e:	fe 01       	movw	r30, r28
    2590:	e3 5b       	subi	r30, 0xB3	; 179
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	60 81       	ld	r22, Z
    2596:	71 81       	ldd	r23, Z+1	; 0x01
    2598:	82 81       	ldd	r24, Z+2	; 0x02
    259a:	93 81       	ldd	r25, Z+3	; 0x03
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	3f ef       	ldi	r19, 0xFF	; 255
    25a0:	4f e7       	ldi	r20, 0x7F	; 127
    25a2:	57 e4       	ldi	r21, 0x47	; 71
    25a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a8:	18 16       	cp	r1, r24
    25aa:	0c f0       	brlt	.+2      	; 0x25ae <STEPPER_voidmotion+0x49e>
    25ac:	43 c0       	rjmp	.+134    	; 0x2634 <STEPPER_voidmotion+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ae:	fe 01       	movw	r30, r28
    25b0:	ef 5a       	subi	r30, 0xAF	; 175
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	60 81       	ld	r22, Z
    25b6:	71 81       	ldd	r23, Z+1	; 0x01
    25b8:	82 81       	ldd	r24, Z+2	; 0x02
    25ba:	93 81       	ldd	r25, Z+3	; 0x03
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e2       	ldi	r20, 0x20	; 32
    25c2:	51 e4       	ldi	r21, 0x41	; 65
    25c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	8e 01       	movw	r16, r28
    25ce:	05 5b       	subi	r16, 0xB5	; 181
    25d0:	1f 4f       	sbci	r17, 0xFF	; 255
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	f8 01       	movw	r30, r16
    25e0:	91 83       	std	Z+1, r25	; 0x01
    25e2:	80 83       	st	Z, r24
    25e4:	1f c0       	rjmp	.+62     	; 0x2624 <STEPPER_voidmotion+0x514>
    25e6:	fe 01       	movw	r30, r28
    25e8:	e7 5b       	subi	r30, 0xB7	; 183
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	88 ec       	ldi	r24, 0xC8	; 200
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	80 83       	st	Z, r24
    25f4:	fe 01       	movw	r30, r28
    25f6:	e7 5b       	subi	r30, 0xB7	; 183
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 81       	ld	r24, Z
    25fc:	91 81       	ldd	r25, Z+1	; 0x01
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <STEPPER_voidmotion+0x4ee>
    2602:	fe 01       	movw	r30, r28
    2604:	e7 5b       	subi	r30, 0xB7	; 183
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	91 83       	std	Z+1, r25	; 0x01
    260a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260c:	de 01       	movw	r26, r28
    260e:	a5 5b       	subi	r26, 0xB5	; 181
    2610:	bf 4f       	sbci	r27, 0xFF	; 255
    2612:	fe 01       	movw	r30, r28
    2614:	e5 5b       	subi	r30, 0xB5	; 181
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	11 96       	adiw	r26, 0x01	; 1
    2620:	9c 93       	st	X, r25
    2622:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2624:	fe 01       	movw	r30, r28
    2626:	e5 5b       	subi	r30, 0xB5	; 181
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 81       	ld	r24, Z
    262c:	91 81       	ldd	r25, Z+1	; 0x01
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	d1 f6       	brne	.-76     	; 0x25e6 <STEPPER_voidmotion+0x4d6>
    2632:	27 c0       	rjmp	.+78     	; 0x2682 <STEPPER_voidmotion+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2634:	8e 01       	movw	r16, r28
    2636:	05 5b       	subi	r16, 0xB5	; 181
    2638:	1f 4f       	sbci	r17, 0xFF	; 255
    263a:	fe 01       	movw	r30, r28
    263c:	e3 5b       	subi	r30, 0xB3	; 179
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	f8 01       	movw	r30, r16
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	80 83       	st	Z, r24
    2656:	de 01       	movw	r26, r28
    2658:	a9 5b       	subi	r26, 0xB9	; 185
    265a:	bf 4f       	sbci	r27, 0xFF	; 255
    265c:	fe 01       	movw	r30, r28
    265e:	e5 5b       	subi	r30, 0xB5	; 181
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 81       	ld	r24, Z
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	8d 93       	st	X+, r24
    2668:	9c 93       	st	X, r25
    266a:	fe 01       	movw	r30, r28
    266c:	e9 5b       	subi	r30, 0xB9	; 185
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	80 81       	ld	r24, Z
    2672:	91 81       	ldd	r25, Z+1	; 0x01
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	f1 f7       	brne	.-4      	; 0x2674 <STEPPER_voidmotion+0x564>
    2678:	fe 01       	movw	r30, r28
    267a:	e9 5b       	subi	r30, 0xB9	; 185
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	91 83       	std	Z+1, r25	; 0x01
    2680:	80 83       	st	Z, r24
	 _delay_ms(10);
	 
	 /*  DISACTIVATE ALL PINS EXCEPT ORANGE  PIN */
	 
	 DIO_u8SetPinValue(TRANSISTOR_PORT , BLUE , LOGIC_HIGH);
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , YELLOW , LOGIC_HIGH);
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	62 e0       	ldi	r22, 0x02	; 2
    2690:	41 e0       	ldi	r20, 0x01	; 1
    2692:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , PINK , LOGIC_HIGH);
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	61 e0       	ldi	r22, 0x01	; 1
    269a:	41 e0       	ldi	r20, 0x01	; 1
    269c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , ORANGE , LOGIC_LOW);
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	63 e0       	ldi	r22, 0x03	; 3
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    26aa:	fe 01       	movw	r30, r28
    26ac:	ed 5b       	subi	r30, 0xBD	; 189
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	a0 e2       	ldi	r26, 0x20	; 32
    26b6:	b1 e4       	ldi	r27, 0x41	; 65
    26b8:	80 83       	st	Z, r24
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	a2 83       	std	Z+2, r26	; 0x02
    26be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c0:	8e 01       	movw	r16, r28
    26c2:	01 5c       	subi	r16, 0xC1	; 193
    26c4:	1f 4f       	sbci	r17, 0xFF	; 255
    26c6:	fe 01       	movw	r30, r28
    26c8:	ed 5b       	subi	r30, 0xBD	; 189
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	4a ef       	ldi	r20, 0xFA	; 250
    26da:	54 e4       	ldi	r21, 0x44	; 68
    26dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	f8 01       	movw	r30, r16
    26e6:	80 83       	st	Z, r24
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	a2 83       	std	Z+2, r26	; 0x02
    26ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ee:	fe 01       	movw	r30, r28
    26f0:	ff 96       	adiw	r30, 0x3f	; 63
    26f2:	60 81       	ld	r22, Z
    26f4:	71 81       	ldd	r23, Z+1	; 0x01
    26f6:	82 81       	ldd	r24, Z+2	; 0x02
    26f8:	93 81       	ldd	r25, Z+3	; 0x03
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e8       	ldi	r20, 0x80	; 128
    2700:	5f e3       	ldi	r21, 0x3F	; 63
    2702:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2706:	88 23       	and	r24, r24
    2708:	2c f4       	brge	.+10     	; 0x2714 <STEPPER_voidmotion+0x604>
		__ticks = 1;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	9e af       	std	Y+62, r25	; 0x3e
    2710:	8d af       	std	Y+61, r24	; 0x3d
    2712:	46 c0       	rjmp	.+140    	; 0x27a0 <STEPPER_voidmotion+0x690>
	else if (__tmp > 65535)
    2714:	fe 01       	movw	r30, r28
    2716:	ff 96       	adiw	r30, 0x3f	; 63
    2718:	60 81       	ld	r22, Z
    271a:	71 81       	ldd	r23, Z+1	; 0x01
    271c:	82 81       	ldd	r24, Z+2	; 0x02
    271e:	93 81       	ldd	r25, Z+3	; 0x03
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	3f ef       	ldi	r19, 0xFF	; 255
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	57 e4       	ldi	r21, 0x47	; 71
    2728:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	64 f5       	brge	.+88     	; 0x2788 <STEPPER_voidmotion+0x678>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2730:	fe 01       	movw	r30, r28
    2732:	ed 5b       	subi	r30, 0xBD	; 189
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	60 81       	ld	r22, Z
    2738:	71 81       	ldd	r23, Z+1	; 0x01
    273a:	82 81       	ldd	r24, Z+2	; 0x02
    273c:	93 81       	ldd	r25, Z+3	; 0x03
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e2       	ldi	r20, 0x20	; 32
    2744:	51 e4       	ldi	r21, 0x41	; 65
    2746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	bc 01       	movw	r22, r24
    2750:	cd 01       	movw	r24, r26
    2752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	9e af       	std	Y+62, r25	; 0x3e
    275c:	8d af       	std	Y+61, r24	; 0x3d
    275e:	0f c0       	rjmp	.+30     	; 0x277e <STEPPER_voidmotion+0x66e>
    2760:	88 ec       	ldi	r24, 0xC8	; 200
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	9c af       	std	Y+60, r25	; 0x3c
    2766:	8b af       	std	Y+59, r24	; 0x3b
    2768:	8b ad       	ldd	r24, Y+59	; 0x3b
    276a:	9c ad       	ldd	r25, Y+60	; 0x3c
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <STEPPER_voidmotion+0x65c>
    2770:	9c af       	std	Y+60, r25	; 0x3c
    2772:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2774:	8d ad       	ldd	r24, Y+61	; 0x3d
    2776:	9e ad       	ldd	r25, Y+62	; 0x3e
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	9e af       	std	Y+62, r25	; 0x3e
    277c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2780:	9e ad       	ldd	r25, Y+62	; 0x3e
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	69 f7       	brne	.-38     	; 0x2760 <STEPPER_voidmotion+0x650>
    2786:	16 c0       	rjmp	.+44     	; 0x27b4 <STEPPER_voidmotion+0x6a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2788:	fe 01       	movw	r30, r28
    278a:	ff 96       	adiw	r30, 0x3f	; 63
    278c:	60 81       	ld	r22, Z
    278e:	71 81       	ldd	r23, Z+1	; 0x01
    2790:	82 81       	ldd	r24, Z+2	; 0x02
    2792:	93 81       	ldd	r25, Z+3	; 0x03
    2794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	9e af       	std	Y+62, r25	; 0x3e
    279e:	8d af       	std	Y+61, r24	; 0x3d
    27a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    27a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    27a4:	9a af       	std	Y+58, r25	; 0x3a
    27a6:	89 af       	std	Y+57, r24	; 0x39
    27a8:	89 ad       	ldd	r24, Y+57	; 0x39
    27aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <STEPPER_voidmotion+0x69c>
    27b0:	9a af       	std	Y+58, r25	; 0x3a
    27b2:	89 af       	std	Y+57, r24	; 0x39
/* TO ROTATE CLOCK WISE */	
switch(direction){

case CLOCK_WISE :

for( int i=0 ; i< number_of_iteration ; i++ ){
    27b4:	de 01       	movw	r26, r28
    27b6:	ad 58       	subi	r26, 0x8D	; 141
    27b8:	bf 4f       	sbci	r27, 0xFF	; 255
    27ba:	fe 01       	movw	r30, r28
    27bc:	ed 58       	subi	r30, 0x8D	; 141
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	11 96       	adiw	r26, 0x01	; 1
    27c8:	9c 93       	st	X, r25
    27ca:	8e 93       	st	-X, r24
    27cc:	fe 01       	movw	r30, r28
    27ce:	ed 58       	subi	r30, 0x8D	; 141
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	20 81       	ld	r18, Z
    27d4:	31 81       	ldd	r19, Z+1	; 0x01
    27d6:	fe 01       	movw	r30, r28
    27d8:	eb 58       	subi	r30, 0x8B	; 139
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01
    27e0:	28 17       	cp	r18, r24
    27e2:	39 07       	cpc	r19, r25
    27e4:	08 f4       	brcc	.+2      	; 0x27e8 <STEPPER_voidmotion+0x6d8>
    27e6:	f8 cc       	rjmp	.-1552   	; 0x21d8 <STEPPER_voidmotion+0xc8>
    27e8:	38 c2       	rjmp	.+1136   	; 0x2c5a <STEPPER_voidmotion+0xb4a>
break ;

case ANTI_CLOCK_WISE :


for( int i=0 ; i< number_of_iteration ; i++ ){
    27ea:	fe 01       	movw	r30, r28
    27ec:	ef 58       	subi	r30, 0x8F	; 143
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	11 82       	std	Z+1, r1	; 0x01
    27f2:	10 82       	st	Z, r1
    27f4:	24 c2       	rjmp	.+1096   	; 0x2c3e <STEPPER_voidmotion+0xb2e>
	
	/*  DISACTIVATE ALL PINS EXCEPT ORANGE PIN */
	
	 DIO_u8SetPinValue(TRANSISTOR_PORT , PINK ,  LOGIC_HIGH);
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	61 e0       	ldi	r22, 0x01	; 1
    27fa:	41 e0       	ldi	r20, 0x01	; 1
    27fc:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , BLUE , LOGIC_HIGH);
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	41 e0       	ldi	r20, 0x01	; 1
    2806:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , YELLOW , LOGIC_HIGH);	
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	62 e0       	ldi	r22, 0x02	; 2
    280e:	41 e0       	ldi	r20, 0x01	; 1
    2810:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , ORANGE ,   LOGIC_LOW);
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	63 e0       	ldi	r22, 0x03	; 3
    2818:	40 e0       	ldi	r20, 0x00	; 0
    281a:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	a0 e2       	ldi	r26, 0x20	; 32
    2824:	b1 e4       	ldi	r27, 0x41	; 65
    2826:	8d ab       	std	Y+53, r24	; 0x35
    2828:	9e ab       	std	Y+54, r25	; 0x36
    282a:	af ab       	std	Y+55, r26	; 0x37
    282c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282e:	6d a9       	ldd	r22, Y+53	; 0x35
    2830:	7e a9       	ldd	r23, Y+54	; 0x36
    2832:	8f a9       	ldd	r24, Y+55	; 0x37
    2834:	98 ad       	ldd	r25, Y+56	; 0x38
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	4a ef       	ldi	r20, 0xFA	; 250
    283c:	54 e4       	ldi	r21, 0x44	; 68
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	89 ab       	std	Y+49, r24	; 0x31
    2848:	9a ab       	std	Y+50, r25	; 0x32
    284a:	ab ab       	std	Y+51, r26	; 0x33
    284c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    284e:	69 a9       	ldd	r22, Y+49	; 0x31
    2850:	7a a9       	ldd	r23, Y+50	; 0x32
    2852:	8b a9       	ldd	r24, Y+51	; 0x33
    2854:	9c a9       	ldd	r25, Y+52	; 0x34
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e8       	ldi	r20, 0x80	; 128
    285c:	5f e3       	ldi	r21, 0x3F	; 63
    285e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2862:	88 23       	and	r24, r24
    2864:	2c f4       	brge	.+10     	; 0x2870 <STEPPER_voidmotion+0x760>
		__ticks = 1;
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	98 ab       	std	Y+48, r25	; 0x30
    286c:	8f a7       	std	Y+47, r24	; 0x2f
    286e:	3f c0       	rjmp	.+126    	; 0x28ee <STEPPER_voidmotion+0x7de>
	else if (__tmp > 65535)
    2870:	69 a9       	ldd	r22, Y+49	; 0x31
    2872:	7a a9       	ldd	r23, Y+50	; 0x32
    2874:	8b a9       	ldd	r24, Y+51	; 0x33
    2876:	9c a9       	ldd	r25, Y+52	; 0x34
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	3f ef       	ldi	r19, 0xFF	; 255
    287c:	4f e7       	ldi	r20, 0x7F	; 127
    287e:	57 e4       	ldi	r21, 0x47	; 71
    2880:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2884:	18 16       	cp	r1, r24
    2886:	4c f5       	brge	.+82     	; 0x28da <STEPPER_voidmotion+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2888:	6d a9       	ldd	r22, Y+53	; 0x35
    288a:	7e a9       	ldd	r23, Y+54	; 0x36
    288c:	8f a9       	ldd	r24, Y+55	; 0x37
    288e:	98 ad       	ldd	r25, Y+56	; 0x38
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e2       	ldi	r20, 0x20	; 32
    2896:	51 e4       	ldi	r21, 0x41	; 65
    2898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	bc 01       	movw	r22, r24
    28a2:	cd 01       	movw	r24, r26
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	98 ab       	std	Y+48, r25	; 0x30
    28ae:	8f a7       	std	Y+47, r24	; 0x2f
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <STEPPER_voidmotion+0x7c0>
    28b2:	88 ec       	ldi	r24, 0xC8	; 200
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9e a7       	std	Y+46, r25	; 0x2e
    28b8:	8d a7       	std	Y+45, r24	; 0x2d
    28ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    28bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <STEPPER_voidmotion+0x7ae>
    28c2:	9e a7       	std	Y+46, r25	; 0x2e
    28c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28c8:	98 a9       	ldd	r25, Y+48	; 0x30
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	98 ab       	std	Y+48, r25	; 0x30
    28ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28d2:	98 a9       	ldd	r25, Y+48	; 0x30
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	69 f7       	brne	.-38     	; 0x28b2 <STEPPER_voidmotion+0x7a2>
    28d8:	14 c0       	rjmp	.+40     	; 0x2902 <STEPPER_voidmotion+0x7f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28da:	69 a9       	ldd	r22, Y+49	; 0x31
    28dc:	7a a9       	ldd	r23, Y+50	; 0x32
    28de:	8b a9       	ldd	r24, Y+51	; 0x33
    28e0:	9c a9       	ldd	r25, Y+52	; 0x34
    28e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	98 ab       	std	Y+48, r25	; 0x30
    28ec:	8f a7       	std	Y+47, r24	; 0x2f
    28ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f0:	98 a9       	ldd	r25, Y+48	; 0x30
    28f2:	9c a7       	std	Y+44, r25	; 0x2c
    28f4:	8b a7       	std	Y+43, r24	; 0x2b
    28f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    28f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <STEPPER_voidmotion+0x7ea>
    28fe:	9c a7       	std	Y+44, r25	; 0x2c
    2900:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(10);
	
	/*  DISACTIVATE ALL PINS EXCEPT YELLOW PIN */
	
     DIO_u8SetPinValue(PORTA , BLUE , LOGIC_HIGH);
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	60 e0       	ldi	r22, 0x00	; 0
    2906:	41 e0       	ldi	r20, 0x01	; 1
    2908:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(PORTA , PINK , LOGIC_HIGH);
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	41 e0       	ldi	r20, 0x01	; 1
    2912:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(PORTA , ORANGE , LOGIC_HIGH);
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	63 e0       	ldi	r22, 0x03	; 3
    291a:	41 e0       	ldi	r20, 0x01	; 1
    291c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(PORTA , YELLOW , LOGIC_LOW);
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	62 e0       	ldi	r22, 0x02	; 2
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	a0 e2       	ldi	r26, 0x20	; 32
    2930:	b1 e4       	ldi	r27, 0x41	; 65
    2932:	8f a3       	std	Y+39, r24	; 0x27
    2934:	98 a7       	std	Y+40, r25	; 0x28
    2936:	a9 a7       	std	Y+41, r26	; 0x29
    2938:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293a:	6f a1       	ldd	r22, Y+39	; 0x27
    293c:	78 a5       	ldd	r23, Y+40	; 0x28
    293e:	89 a5       	ldd	r24, Y+41	; 0x29
    2940:	9a a5       	ldd	r25, Y+42	; 0x2a
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	4a ef       	ldi	r20, 0xFA	; 250
    2948:	54 e4       	ldi	r21, 0x44	; 68
    294a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	8b a3       	std	Y+35, r24	; 0x23
    2954:	9c a3       	std	Y+36, r25	; 0x24
    2956:	ad a3       	std	Y+37, r26	; 0x25
    2958:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    295a:	6b a1       	ldd	r22, Y+35	; 0x23
    295c:	7c a1       	ldd	r23, Y+36	; 0x24
    295e:	8d a1       	ldd	r24, Y+37	; 0x25
    2960:	9e a1       	ldd	r25, Y+38	; 0x26
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e8       	ldi	r20, 0x80	; 128
    2968:	5f e3       	ldi	r21, 0x3F	; 63
    296a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    296e:	88 23       	and	r24, r24
    2970:	2c f4       	brge	.+10     	; 0x297c <STEPPER_voidmotion+0x86c>
		__ticks = 1;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9a a3       	std	Y+34, r25	; 0x22
    2978:	89 a3       	std	Y+33, r24	; 0x21
    297a:	3f c0       	rjmp	.+126    	; 0x29fa <STEPPER_voidmotion+0x8ea>
	else if (__tmp > 65535)
    297c:	6b a1       	ldd	r22, Y+35	; 0x23
    297e:	7c a1       	ldd	r23, Y+36	; 0x24
    2980:	8d a1       	ldd	r24, Y+37	; 0x25
    2982:	9e a1       	ldd	r25, Y+38	; 0x26
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	3f ef       	ldi	r19, 0xFF	; 255
    2988:	4f e7       	ldi	r20, 0x7F	; 127
    298a:	57 e4       	ldi	r21, 0x47	; 71
    298c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2990:	18 16       	cp	r1, r24
    2992:	4c f5       	brge	.+82     	; 0x29e6 <STEPPER_voidmotion+0x8d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2994:	6f a1       	ldd	r22, Y+39	; 0x27
    2996:	78 a5       	ldd	r23, Y+40	; 0x28
    2998:	89 a5       	ldd	r24, Y+41	; 0x29
    299a:	9a a5       	ldd	r25, Y+42	; 0x2a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e2       	ldi	r20, 0x20	; 32
    29a2:	51 e4       	ldi	r21, 0x41	; 65
    29a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	bc 01       	movw	r22, r24
    29ae:	cd 01       	movw	r24, r26
    29b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	9a a3       	std	Y+34, r25	; 0x22
    29ba:	89 a3       	std	Y+33, r24	; 0x21
    29bc:	0f c0       	rjmp	.+30     	; 0x29dc <STEPPER_voidmotion+0x8cc>
    29be:	88 ec       	ldi	r24, 0xC8	; 200
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	98 a3       	std	Y+32, r25	; 0x20
    29c4:	8f 8f       	std	Y+31, r24	; 0x1f
    29c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29c8:	98 a1       	ldd	r25, Y+32	; 0x20
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <STEPPER_voidmotion+0x8ba>
    29ce:	98 a3       	std	Y+32, r25	; 0x20
    29d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d2:	89 a1       	ldd	r24, Y+33	; 0x21
    29d4:	9a a1       	ldd	r25, Y+34	; 0x22
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	9a a3       	std	Y+34, r25	; 0x22
    29da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29dc:	89 a1       	ldd	r24, Y+33	; 0x21
    29de:	9a a1       	ldd	r25, Y+34	; 0x22
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	69 f7       	brne	.-38     	; 0x29be <STEPPER_voidmotion+0x8ae>
    29e4:	14 c0       	rjmp	.+40     	; 0x2a0e <STEPPER_voidmotion+0x8fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e6:	6b a1       	ldd	r22, Y+35	; 0x23
    29e8:	7c a1       	ldd	r23, Y+36	; 0x24
    29ea:	8d a1       	ldd	r24, Y+37	; 0x25
    29ec:	9e a1       	ldd	r25, Y+38	; 0x26
    29ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	9a a3       	std	Y+34, r25	; 0x22
    29f8:	89 a3       	std	Y+33, r24	; 0x21
    29fa:	89 a1       	ldd	r24, Y+33	; 0x21
    29fc:	9a a1       	ldd	r25, Y+34	; 0x22
    29fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2a00:	8d 8f       	std	Y+29, r24	; 0x1d
    2a02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <STEPPER_voidmotion+0x8f6>
    2a0a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a0c:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(10);
	 
	 /*  DISACTIVATE ALL PINS EXCEPT PINK PIN */
	 
	 DIO_u8SetPinValue(TRANSISTOR_PORT , BLUE , LOGIC_HIGH);
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	60 e0       	ldi	r22, 0x00	; 0
    2a12:	41 e0       	ldi	r20, 0x01	; 1
    2a14:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , ORANGE , LOGIC_HIGH);
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	63 e0       	ldi	r22, 0x03	; 3
    2a1c:	41 e0       	ldi	r20, 0x01	; 1
    2a1e:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , YELLOW , LOGIC_HIGH);
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	62 e0       	ldi	r22, 0x02	; 2
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , PINK , LOGIC_LOW);
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	61 e0       	ldi	r22, 0x01	; 1
    2a30:	40 e0       	ldi	r20, 0x00	; 0
    2a32:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	a0 e2       	ldi	r26, 0x20	; 32
    2a3c:	b1 e4       	ldi	r27, 0x41	; 65
    2a3e:	89 8f       	std	Y+25, r24	; 0x19
    2a40:	9a 8f       	std	Y+26, r25	; 0x1a
    2a42:	ab 8f       	std	Y+27, r26	; 0x1b
    2a44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a46:	69 8d       	ldd	r22, Y+25	; 0x19
    2a48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	4a ef       	ldi	r20, 0xFA	; 250
    2a54:	54 e4       	ldi	r21, 0x44	; 68
    2a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	8d 8b       	std	Y+21, r24	; 0x15
    2a60:	9e 8b       	std	Y+22, r25	; 0x16
    2a62:	af 8b       	std	Y+23, r26	; 0x17
    2a64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a66:	6d 89       	ldd	r22, Y+21	; 0x15
    2a68:	7e 89       	ldd	r23, Y+22	; 0x16
    2a6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e8       	ldi	r20, 0x80	; 128
    2a74:	5f e3       	ldi	r21, 0x3F	; 63
    2a76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	2c f4       	brge	.+10     	; 0x2a88 <STEPPER_voidmotion+0x978>
		__ticks = 1;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9c 8b       	std	Y+20, r25	; 0x14
    2a84:	8b 8b       	std	Y+19, r24	; 0x13
    2a86:	3f c0       	rjmp	.+126    	; 0x2b06 <STEPPER_voidmotion+0x9f6>
	else if (__tmp > 65535)
    2a88:	6d 89       	ldd	r22, Y+21	; 0x15
    2a8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	3f ef       	ldi	r19, 0xFF	; 255
    2a94:	4f e7       	ldi	r20, 0x7F	; 127
    2a96:	57 e4       	ldi	r21, 0x47	; 71
    2a98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a9c:	18 16       	cp	r1, r24
    2a9e:	4c f5       	brge	.+82     	; 0x2af2 <STEPPER_voidmotion+0x9e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa0:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aa6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e2       	ldi	r20, 0x20	; 32
    2aae:	51 e4       	ldi	r21, 0x41	; 65
    2ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	9c 8b       	std	Y+20, r25	; 0x14
    2ac6:	8b 8b       	std	Y+19, r24	; 0x13
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <STEPPER_voidmotion+0x9d8>
    2aca:	88 ec       	ldi	r24, 0xC8	; 200
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	9a 8b       	std	Y+18, r25	; 0x12
    2ad0:	89 8b       	std	Y+17, r24	; 0x11
    2ad2:	89 89       	ldd	r24, Y+17	; 0x11
    2ad4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <STEPPER_voidmotion+0x9c6>
    2ada:	9a 8b       	std	Y+18, r25	; 0x12
    2adc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ade:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	9c 8b       	std	Y+20, r25	; 0x14
    2ae6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aea:	9c 89       	ldd	r25, Y+20	; 0x14
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	69 f7       	brne	.-38     	; 0x2aca <STEPPER_voidmotion+0x9ba>
    2af0:	14 c0       	rjmp	.+40     	; 0x2b1a <STEPPER_voidmotion+0xa0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af2:	6d 89       	ldd	r22, Y+21	; 0x15
    2af4:	7e 89       	ldd	r23, Y+22	; 0x16
    2af6:	8f 89       	ldd	r24, Y+23	; 0x17
    2af8:	98 8d       	ldd	r25, Y+24	; 0x18
    2afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9c 8b       	std	Y+20, r25	; 0x14
    2b04:	8b 8b       	std	Y+19, r24	; 0x13
    2b06:	8b 89       	ldd	r24, Y+19	; 0x13
    2b08:	9c 89       	ldd	r25, Y+20	; 0x14
    2b0a:	98 8b       	std	Y+16, r25	; 0x10
    2b0c:	8f 87       	std	Y+15, r24	; 0x0f
    2b0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b10:	98 89       	ldd	r25, Y+16	; 0x10
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <STEPPER_voidmotion+0xa02>
    2b16:	98 8b       	std	Y+16, r25	; 0x10
    2b18:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(10);
	 
	 /*  DISACTIVATE ALL PINS EXCEPT BLUE  PIN */
	 
	 DIO_u8SetPinValue(TRANSISTOR_PORT , ORANGE , LOGIC_HIGH);
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	63 e0       	ldi	r22, 0x03	; 3
    2b1e:	41 e0       	ldi	r20, 0x01	; 1
    2b20:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , YELLOW , LOGIC_HIGH);
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	62 e0       	ldi	r22, 0x02	; 2
    2b28:	41 e0       	ldi	r20, 0x01	; 1
    2b2a:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , PINK , LOGIC_HIGH);
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	61 e0       	ldi	r22, 0x01	; 1
    2b32:	41 e0       	ldi	r20, 0x01	; 1
    2b34:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 DIO_u8SetPinValue(TRANSISTOR_PORT , BLUE , LOGIC_LOW);
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	60 e0       	ldi	r22, 0x00	; 0
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	a0 e2       	ldi	r26, 0x20	; 32
    2b48:	b1 e4       	ldi	r27, 0x41	; 65
    2b4a:	8b 87       	std	Y+11, r24	; 0x0b
    2b4c:	9c 87       	std	Y+12, r25	; 0x0c
    2b4e:	ad 87       	std	Y+13, r26	; 0x0d
    2b50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a ef       	ldi	r20, 0xFA	; 250
    2b60:	54 e4       	ldi	r21, 0x44	; 68
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	8f 83       	std	Y+7, r24	; 0x07
    2b6c:	98 87       	std	Y+8, r25	; 0x08
    2b6e:	a9 87       	std	Y+9, r26	; 0x09
    2b70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b72:	6f 81       	ldd	r22, Y+7	; 0x07
    2b74:	78 85       	ldd	r23, Y+8	; 0x08
    2b76:	89 85       	ldd	r24, Y+9	; 0x09
    2b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e8       	ldi	r20, 0x80	; 128
    2b80:	5f e3       	ldi	r21, 0x3F	; 63
    2b82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b86:	88 23       	and	r24, r24
    2b88:	2c f4       	brge	.+10     	; 0x2b94 <STEPPER_voidmotion+0xa84>
		__ticks = 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9e 83       	std	Y+6, r25	; 0x06
    2b90:	8d 83       	std	Y+5, r24	; 0x05
    2b92:	3f c0       	rjmp	.+126    	; 0x2c12 <STEPPER_voidmotion+0xb02>
	else if (__tmp > 65535)
    2b94:	6f 81       	ldd	r22, Y+7	; 0x07
    2b96:	78 85       	ldd	r23, Y+8	; 0x08
    2b98:	89 85       	ldd	r24, Y+9	; 0x09
    2b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ba0:	4f e7       	ldi	r20, 0x7F	; 127
    2ba2:	57 e4       	ldi	r21, 0x47	; 71
    2ba4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba8:	18 16       	cp	r1, r24
    2baa:	4c f5       	brge	.+82     	; 0x2bfe <STEPPER_voidmotion+0xaee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e2       	ldi	r20, 0x20	; 32
    2bba:	51 e4       	ldi	r21, 0x41	; 65
    2bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	9e 83       	std	Y+6, r25	; 0x06
    2bd2:	8d 83       	std	Y+5, r24	; 0x05
    2bd4:	0f c0       	rjmp	.+30     	; 0x2bf4 <STEPPER_voidmotion+0xae4>
    2bd6:	88 ec       	ldi	r24, 0xC8	; 200
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	9c 83       	std	Y+4, r25	; 0x04
    2bdc:	8b 83       	std	Y+3, r24	; 0x03
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	9c 81       	ldd	r25, Y+4	; 0x04
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <STEPPER_voidmotion+0xad2>
    2be6:	9c 83       	std	Y+4, r25	; 0x04
    2be8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bea:	8d 81       	ldd	r24, Y+5	; 0x05
    2bec:	9e 81       	ldd	r25, Y+6	; 0x06
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	9e 83       	std	Y+6, r25	; 0x06
    2bf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	69 f7       	brne	.-38     	; 0x2bd6 <STEPPER_voidmotion+0xac6>
    2bfc:	14 c0       	rjmp	.+40     	; 0x2c26 <STEPPER_voidmotion+0xb16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2c00:	78 85       	ldd	r23, Y+8	; 0x08
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9e 83       	std	Y+6, r25	; 0x06
    2c10:	8d 83       	std	Y+5, r24	; 0x05
    2c12:	8d 81       	ldd	r24, Y+5	; 0x05
    2c14:	9e 81       	ldd	r25, Y+6	; 0x06
    2c16:	9a 83       	std	Y+2, r25	; 0x02
    2c18:	89 83       	std	Y+1, r24	; 0x01
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	f1 f7       	brne	.-4      	; 0x2c1e <STEPPER_voidmotion+0xb0e>
    2c22:	9a 83       	std	Y+2, r25	; 0x02
    2c24:	89 83       	std	Y+1, r24	; 0x01
break ;

case ANTI_CLOCK_WISE :


for( int i=0 ; i< number_of_iteration ; i++ ){
    2c26:	de 01       	movw	r26, r28
    2c28:	af 58       	subi	r26, 0x8F	; 143
    2c2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	ef 58       	subi	r30, 0x8F	; 143
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	80 81       	ld	r24, Z
    2c34:	91 81       	ldd	r25, Z+1	; 0x01
    2c36:	01 96       	adiw	r24, 0x01	; 1
    2c38:	11 96       	adiw	r26, 0x01	; 1
    2c3a:	9c 93       	st	X, r25
    2c3c:	8e 93       	st	-X, r24
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ef 58       	subi	r30, 0x8F	; 143
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	20 81       	ld	r18, Z
    2c46:	31 81       	ldd	r19, Z+1	; 0x01
    2c48:	fe 01       	movw	r30, r28
    2c4a:	eb 58       	subi	r30, 0x8B	; 139
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	80 81       	ld	r24, Z
    2c50:	91 81       	ldd	r25, Z+1	; 0x01
    2c52:	28 17       	cp	r18, r24
    2c54:	39 07       	cpc	r19, r25
    2c56:	08 f4       	brcc	.+2      	; 0x2c5a <STEPPER_voidmotion+0xb4a>
    2c58:	ce cd       	rjmp	.-1124   	; 0x27f6 <STEPPER_voidmotion+0x6e6>



}
	
}
    2c5a:	c3 58       	subi	r28, 0x83	; 131
    2c5c:	df 4f       	sbci	r29, 0xFF	; 255
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	cf 91       	pop	r28
    2c6a:	df 91       	pop	r29
    2c6c:	1f 91       	pop	r17
    2c6e:	0f 91       	pop	r16
    2c70:	08 95       	ret

00002c72 <STEPPER_voidstop>:


void STEPPER_voidstop() {
    2c72:	df 93       	push	r29
    2c74:	cf 93       	push	r28
    2c76:	cd b7       	in	r28, 0x3d	; 61
    2c78:	de b7       	in	r29, 0x3e	; 62
	    DIO_u8SetPinValue(TRANSISTOR_PORT , ORANGE , LOGIC_HIGH);
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	63 e0       	ldi	r22, 0x03	; 3
    2c7e:	41 e0       	ldi	r20, 0x01	; 1
    2c80:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
		 DIO_u8SetPinValue(TRANSISTOR_PORT , YELLOW , LOGIC_HIGH);
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	62 e0       	ldi	r22, 0x02	; 2
    2c88:	41 e0       	ldi	r20, 0x01	; 1
    2c8a:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
		 DIO_u8SetPinValue(TRANSISTOR_PORT , PINK , LOGIC_HIGH);
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	61 e0       	ldi	r22, 0x01	; 1
    2c92:	41 e0       	ldi	r20, 0x01	; 1
    2c94:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
		 DIO_u8SetPinValue(TRANSISTOR_PORT , BLUE , LOGIC_HIGH);
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	60 e0       	ldi	r22, 0x00	; 0
    2c9c:	41 e0       	ldi	r20, 0x01	; 1
    2c9e:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
}
    2ca2:	cf 91       	pop	r28
    2ca4:	df 91       	pop	r29
    2ca6:	08 95       	ret

00002ca8 <TIM0_INIT>:
#include  "TIM0_PRV.h"


/* Start timer */

void TIM0_INIT(void){
    2ca8:	df 93       	push	r29
    2caa:	cf 93       	push	r28
    2cac:	cd b7       	in	r28, 0x3d	; 61
    2cae:	de b7       	in	r29, 0x3e	; 62

	/*SELECT TIMER MODER   => fast pwm  */

	SET_BIT(TIM0_TCCR0 ,TIM0_WGM00);
    2cb0:	a3 e5       	ldi	r26, 0x53	; 83
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	e3 e5       	ldi	r30, 0x53	; 83
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	80 81       	ld	r24, Z
    2cba:	80 64       	ori	r24, 0x40	; 64
    2cbc:	8c 93       	st	X, r24
	SET_BIT(TIM0_TCCR0 ,TIM0_WGM01 );
    2cbe:	a3 e5       	ldi	r26, 0x53	; 83
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	e3 e5       	ldi	r30, 0x53	; 83
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	88 60       	ori	r24, 0x08	; 8
    2cca:	8c 93       	st	X, r24
SET_BIT(TIMERS_TIMSK,TOIE0);
*/

/*  non inverting mode */

	SET_BIT(TIM0_TCCR0,TIM0_COM01);
    2ccc:	a3 e5       	ldi	r26, 0x53	; 83
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	e3 e5       	ldi	r30, 0x53	; 83
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	80 62       	ori	r24, 0x20	; 32
    2cd8:	8c 93       	st	X, r24
	CLR_BIT(TIM0_TCCR0 ,TIM0_COM00 );
    2cda:	a3 e5       	ldi	r26, 0x53	; 83
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	e3 e5       	ldi	r30, 0x53	; 83
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	8f 7e       	andi	r24, 0xEF	; 239
    2ce6:	8c 93       	st	X, r24

/* Select clk source >> CLK/8  */

SET_BIT(TIM0_TCCR0,TIM0_CS01);	
    2ce8:	a3 e5       	ldi	r26, 0x53	; 83
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	e3 e5       	ldi	r30, 0x53	; 83
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	82 60       	ori	r24, 0x02	; 2
    2cf4:	8c 93       	st	X, r24
CLR_BIT(TIM0_TCCR0 ,TIM0_CS02);
    2cf6:	a3 e5       	ldi	r26, 0x53	; 83
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	e3 e5       	ldi	r30, 0x53	; 83
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	8b 7f       	andi	r24, 0xFB	; 251
    2d02:	8c 93       	st	X, r24
CLR_BIT(TIM0_TCCR0 ,TIM0_CS00);
    2d04:	a3 e5       	ldi	r26, 0x53	; 83
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	e3 e5       	ldi	r30, 0x53	; 83
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	8e 7f       	andi	r24, 0xFE	; 254
    2d10:	8c 93       	st	X, r24

	
}
    2d12:	cf 91       	pop	r28
    2d14:	df 91       	pop	r29
    2d16:	08 95       	ret

00002d18 <TIM1_INTI>:


void TIM1_INTI(void){
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
	/* select timer1 mode =>> mode 14 */
	SET_BIT(TIM1_TCCR1A ,  1);
    2d20:	af e4       	ldi	r26, 0x4F	; 79
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	ef e4       	ldi	r30, 0x4F	; 79
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	82 60       	ori	r24, 0x02	; 2
    2d2c:	8c 93       	st	X, r24
	CLR_BIT(TIM1_TCCR1A ,  0);
    2d2e:	af e4       	ldi	r26, 0x4F	; 79
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	ef e4       	ldi	r30, 0x4F	; 79
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	8e 7f       	andi	r24, 0xFE	; 254
    2d3a:	8c 93       	st	X, r24
    SET_BIT(TIM1_TCCR1B ,4);
    2d3c:	ae e4       	ldi	r26, 0x4E	; 78
    2d3e:	b0 e0       	ldi	r27, 0x00	; 0
    2d40:	ee e4       	ldi	r30, 0x4E	; 78
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	80 81       	ld	r24, Z
    2d46:	80 61       	ori	r24, 0x10	; 16
    2d48:	8c 93       	st	X, r24
    SET_BIT(TIM1_TCCR1B ,3);
    2d4a:	ae e4       	ldi	r26, 0x4E	; 78
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	ee e4       	ldi	r30, 0x4E	; 78
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	88 60       	ori	r24, 0x08	; 8
    2d56:	8c 93       	st	X, r24

   /* clear oc1a >> D5  on compare match set on overflow  */
	SET_BIT(TIM1_TCCR1A ,  7);
    2d58:	af e4       	ldi	r26, 0x4F	; 79
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	ef e4       	ldi	r30, 0x4F	; 79
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	80 68       	ori	r24, 0x80	; 128
    2d64:	8c 93       	st	X, r24
	CLR_BIT(TIM1_TCCR1A ,  6);
    2d66:	af e4       	ldi	r26, 0x4F	; 79
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	ef e4       	ldi	r30, 0x4F	; 79
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	8f 7b       	andi	r24, 0xBF	; 191
    2d72:	8c 93       	st	X, r24

	/* set top value in ICR1 REG */
	TIM1_ICR1 = 19999;   // period  = 20 ms
    2d74:	e6 e4       	ldi	r30, 0x46	; 70
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	8f e1       	ldi	r24, 0x1F	; 31
    2d7a:	9e e4       	ldi	r25, 0x4E	; 78
    2d7c:	91 83       	std	Z+1, r25	; 0x01
    2d7e:	80 83       	st	Z, r24



    /* Select clk source >> CLK/8  */

    		 SET_BIT(TIM1_TCCR1B,1);
    2d80:	ae e4       	ldi	r26, 0x4E	; 78
    2d82:	b0 e0       	ldi	r27, 0x00	; 0
    2d84:	ee e4       	ldi	r30, 0x4E	; 78
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	82 60       	ori	r24, 0x02	; 2
    2d8c:	8c 93       	st	X, r24
    		 CLR_BIT(TIM1_TCCR1B,2);
    2d8e:	ae e4       	ldi	r26, 0x4E	; 78
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
    2d92:	ee e4       	ldi	r30, 0x4E	; 78
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	8b 7f       	andi	r24, 0xFB	; 251
    2d9a:	8c 93       	st	X, r24
    		 CLR_BIT(TIM1_TCCR1B,0);
    2d9c:	ae e4       	ldi	r26, 0x4E	; 78
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	ee e4       	ldi	r30, 0x4E	; 78
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	8e 7f       	andi	r24, 0xFE	; 254
    2da8:	8c 93       	st	X, r24

}
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	08 95       	ret

00002db0 <TIM1_OCR1AVAL>:


void TIM1_OCR1AVAL(u16 val ){
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	00 d0       	rcall	.+0      	; 0x2db6 <TIM1_OCR1AVAL+0x6>
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
    2dba:	9a 83       	std	Y+2, r25	; 0x02
    2dbc:	89 83       	std	Y+1, r24	; 0x01

	/* set angle of servo */

	     TIM1_OCR1A = val;
    2dbe:	ea e4       	ldi	r30, 0x4A	; 74
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc6:	91 83       	std	Z+1, r25	; 0x01
    2dc8:	80 83       	st	Z, r24
}
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	cf 91       	pop	r28
    2dd0:	df 91       	pop	r29
    2dd2:	08 95       	ret

00002dd4 <TIMERS_TIM0SetCompareMatchVAlue>:



void TIMERS_TIM0SetCompareMatchVAlue(u8 val){
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	0f 92       	push	r0
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	89 83       	std	Y+1, r24	; 0x01
	TIM0_OCR0 = val ;
    2de0:	ec e5       	ldi	r30, 0x5C	; 92
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	80 83       	st	Z, r24

}
    2de8:	0f 90       	pop	r0
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <pass_correct_action>:
u8 temp ;
u8 led_flag =0 ;
u8 cond_flag =1 ;
u8 window_flag =0 ;
u8 fla =0 ;
void pass_correct_action(void){
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
	/*use tim1 ocra1 >>  500  to pen the door " servo angle 0"*/

	TIM1_OCR1AVAL(500); // angle 180
    2df8:	84 ef       	ldi	r24, 0xF4	; 244
    2dfa:	91 e0       	ldi	r25, 0x01	; 1
    2dfc:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <TIM1_OCR1AVAL>
	/* led on */
    DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_HIGH );
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	64 e0       	ldi	r22, 0x04	; 4
    2e04:	41 e0       	ldi	r20, 0x01	; 1
    2e06:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    /* dc motor use tim0  compare match >> 170  t = 25 */
    TIMERS_TIM0SetCompareMatchVAlue(170);
    2e0a:	8a ea       	ldi	r24, 0xAA	; 170
    2e0c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
   window_flag =0 ;
    2e10:	10 92 04 02 	sts	0x0204, r1
   fla=0 ;
    2e14:	10 92 05 02 	sts	0x0205, r1
    temp = 25 ;
    2e18:	89 e1       	ldi	r24, 0x19	; 25
    2e1a:	80 93 08 02 	sts	0x0208, r24
    num_1=0 ;
    2e1e:	10 92 02 02 	sts	0x0202, r1
    2e22:	10 92 01 02 	sts	0x0201, r1

}
    2e26:	cf 91       	pop	r28
    2e28:	df 91       	pop	r29
    2e2a:	08 95       	ret

00002e2c <lcd_mode>:


void lcd_mode(void){
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <lcd_mode+0x6>
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
	  num_1=0;
    2e36:	10 92 02 02 	sts	0x0202, r1
    2e3a:	10 92 01 02 	sts	0x0201, r1
	  LCD_WRITE_COMMAND(lcd_Clear);
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
	  LCD_WRITE_STRING(" 1_options");
    2e44:	80 e6       	ldi	r24, 0x60	; 96
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
	  LCD_GO_TO(line2 , 0);
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	60 e0       	ldi	r22, 0x00	; 0
    2e50:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
	  LCD_WRITE_STRING("2_Turn Off All");
    2e54:	8b e6       	ldi	r24, 0x6B	; 107
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
	  window_flag=0 ;
    2e5c:	10 92 04 02 	sts	0x0204, r1
	  do{
	  	 KPD_u8KpdGetKeyState(&pinvalue);
    2e60:	89 e0       	ldi	r24, 0x09	; 9
    2e62:	92 e0       	ldi	r25, 0x02	; 2
    2e64:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
	  }while(pinvalue == Kpd_keynotpressed);
    2e68:	80 91 09 02 	lds	r24, 0x0209
    2e6c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e6e:	c1 f3       	breq	.-16     	; 0x2e60 <lcd_mode+0x34>
	  sign_1 = pinvalue -'0';
    2e70:	80 91 09 02 	lds	r24, 0x0209
    2e74:	80 53       	subi	r24, 0x30	; 48
    2e76:	80 93 0a 02 	sts	0x020A, r24
	  if(sign_1 >=0 && sign_1<=9 ){
    2e7a:	80 91 0a 02 	lds	r24, 0x020A
    2e7e:	8a 30       	cpi	r24, 0x0A	; 10
    2e80:	c8 f4       	brcc	.+50     	; 0x2eb4 <lcd_mode+0x88>
		  num_1 = (num_1*10) + (pinvalue -'0');
    2e82:	80 91 01 02 	lds	r24, 0x0201
    2e86:	90 91 02 02 	lds	r25, 0x0202
    2e8a:	9c 01       	movw	r18, r24
    2e8c:	22 0f       	add	r18, r18
    2e8e:	33 1f       	adc	r19, r19
    2e90:	c9 01       	movw	r24, r18
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	88 0f       	add	r24, r24
    2e98:	99 1f       	adc	r25, r25
    2e9a:	28 0f       	add	r18, r24
    2e9c:	39 1f       	adc	r19, r25
    2e9e:	80 91 09 02 	lds	r24, 0x0209
    2ea2:	88 2f       	mov	r24, r24
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	82 0f       	add	r24, r18
    2ea8:	93 1f       	adc	r25, r19
    2eaa:	c0 97       	sbiw	r24, 0x30	; 48
    2eac:	90 93 02 02 	sts	0x0202, r25
    2eb0:	80 93 01 02 	sts	0x0201, r24
	  }
	 if(num_1 == 1){
    2eb4:	80 91 01 02 	lds	r24, 0x0201
    2eb8:	90 91 02 02 	lds	r25, 0x0202
    2ebc:	81 30       	cpi	r24, 0x01	; 1
    2ebe:	91 05       	cpc	r25, r1
    2ec0:	09 f0       	breq	.+2      	; 0x2ec4 <lcd_mode+0x98>
    2ec2:	3f c0       	rjmp	.+126    	; 0x2f42 <lcd_mode+0x116>
		 num_1=0 ;
    2ec4:	10 92 02 02 	sts	0x0202, r1
    2ec8:	10 92 01 02 	sts	0x0201, r1
		 LCD_WRITE_COMMAND(lcd_Clear);
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
		 LCD_WRITE_STRING(" 1-Window 2-LED");
    2ed2:	8a e7       	ldi	r24, 0x7A	; 122
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
		 LCD_GO_TO(line2 , 0);
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	60 e0       	ldi	r22, 0x00	; 0
    2ede:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
		 LCD_WRITE_STRING("3-Aircond 4-back");
    2ee2:	8a e8       	ldi	r24, 0x8A	; 138
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
		 do{
			 KPD_u8KpdGetKeyState(&pinvalue);
    2eea:	89 e0       	ldi	r24, 0x09	; 9
    2eec:	92 e0       	ldi	r25, 0x02	; 2
    2eee:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
		}while(pinvalue == Kpd_keynotpressed);
    2ef2:	80 91 09 02 	lds	r24, 0x0209
    2ef6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ef8:	c1 f3       	breq	.-16     	; 0x2eea <lcd_mode+0xbe>
		sign_1 = pinvalue -'0';
    2efa:	80 91 09 02 	lds	r24, 0x0209
    2efe:	80 53       	subi	r24, 0x30	; 48
    2f00:	80 93 0a 02 	sts	0x020A, r24
		if(sign_1 >=0 && sign_1<=9 ){
    2f04:	80 91 0a 02 	lds	r24, 0x020A
    2f08:	8a 30       	cpi	r24, 0x0A	; 10
    2f0a:	08 f0       	brcs	.+2      	; 0x2f0e <lcd_mode+0xe2>
    2f0c:	41 c0       	rjmp	.+130    	; 0x2f90 <lcd_mode+0x164>
	    num_1 = (num_1*10) + (pinvalue -'0');
    2f0e:	80 91 01 02 	lds	r24, 0x0201
    2f12:	90 91 02 02 	lds	r25, 0x0202
    2f16:	9c 01       	movw	r18, r24
    2f18:	22 0f       	add	r18, r18
    2f1a:	33 1f       	adc	r19, r19
    2f1c:	c9 01       	movw	r24, r18
    2f1e:	88 0f       	add	r24, r24
    2f20:	99 1f       	adc	r25, r25
    2f22:	88 0f       	add	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	28 0f       	add	r18, r24
    2f28:	39 1f       	adc	r19, r25
    2f2a:	80 91 09 02 	lds	r24, 0x0209
    2f2e:	88 2f       	mov	r24, r24
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	82 0f       	add	r24, r18
    2f34:	93 1f       	adc	r25, r19
    2f36:	c0 97       	sbiw	r24, 0x30	; 48
    2f38:	90 93 02 02 	sts	0x0202, r25
    2f3c:	80 93 01 02 	sts	0x0201, r24
    2f40:	27 c0       	rjmp	.+78     	; 0x2f90 <lcd_mode+0x164>
	 }
	 }
	 else if ( num_1 == 2){
    2f42:	80 91 01 02 	lds	r24, 0x0201
    2f46:	90 91 02 02 	lds	r25, 0x0202
    2f4a:	82 30       	cpi	r24, 0x02	; 2
    2f4c:	91 05       	cpc	r25, r1
    2f4e:	01 f5       	brne	.+64     	; 0x2f90 <lcd_mode+0x164>
		 // turn off all devices

		 for(int i=0 ; i<24 ; i++){       // window off
    2f50:	1a 82       	std	Y+2, r1	; 0x02
    2f52:	19 82       	std	Y+1, r1	; 0x01
    2f54:	0a c0       	rjmp	.+20     	; 0x2f6a <lcd_mode+0x13e>
		 	  STEPPER_voidmotion(CLOCK_WISE , 15);
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	6f e0       	ldi	r22, 0x0F	; 15
    2f5a:	70 e0       	ldi	r23, 0x00	; 0
    2f5c:	0e 94 88 10 	call	0x2110	; 0x2110 <STEPPER_voidmotion>
	 }
	 }
	 else if ( num_1 == 2){
		 // turn off all devices

		 for(int i=0 ; i<24 ; i++){       // window off
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	9a 81       	ldd	r25, Y+2	; 0x02
    2f64:	01 96       	adiw	r24, 0x01	; 1
    2f66:	9a 83       	std	Y+2, r25	; 0x02
    2f68:	89 83       	std	Y+1, r24	; 0x01
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6e:	88 31       	cpi	r24, 0x18	; 24
    2f70:	91 05       	cpc	r25, r1
    2f72:	8c f3       	brlt	.-30     	; 0x2f56 <lcd_mode+0x12a>
		 	  STEPPER_voidmotion(CLOCK_WISE , 15);
		 		 }
		 DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_LOW );   // room led off
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	64 e0       	ldi	r22, 0x04	; 4
    2f78:	40 e0       	ldi	r20, 0x00	; 0
    2f7a:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
		 TIMERS_TIM0SetCompareMatchVAlue(0 ); // air conditioner off
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
		 cond_flag=0 ;
    2f84:	10 92 e4 01 	sts	0x01E4, r1
		 num_1=0 ;
    2f88:	10 92 02 02 	sts	0x0202, r1
    2f8c:	10 92 01 02 	sts	0x0201, r1
	 }

 }
    2f90:	0f 90       	pop	r0
    2f92:	0f 90       	pop	r0
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <notification>:

void notification(u16 digitalvalue){  //  u16 digitalvalue = adc_reg "digital value "
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <notification+0x6>
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	9a 83       	std	Y+2, r25	; 0x02
    2fa6:	89 83       	std	Y+1, r24	; 0x01
  digital= digitalvalue;
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	9a 81       	ldd	r25, Y+2	; 0x02
    2fac:	90 93 e3 01 	sts	0x01E3, r25
    2fb0:	80 93 e2 01 	sts	0x01E2, r24
}
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	08 95       	ret

00002fbe <window>:


u8 window(u8 n){
    2fbe:	df 93       	push	r29
    2fc0:	cf 93       	push	r28
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	2b 97       	sbiw	r28, 0x0b	; 11
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	f8 94       	cli
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	cd bf       	out	0x3d, r28	; 61
    2fd2:	89 87       	std	Y+9, r24	; 0x09

	switch (n) {
    2fd4:	89 85       	ldd	r24, Y+9	; 0x09
    2fd6:	28 2f       	mov	r18, r24
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	3b 87       	std	Y+11, r19	; 0x0b
    2fdc:	2a 87       	std	Y+10, r18	; 0x0a
    2fde:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fe0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fe2:	82 30       	cpi	r24, 0x02	; 2
    2fe4:	91 05       	cpc	r25, r1
    2fe6:	c1 f1       	breq	.+112    	; 0x3058 <window+0x9a>
    2fe8:	2a 85       	ldd	r18, Y+10	; 0x0a
    2fea:	3b 85       	ldd	r19, Y+11	; 0x0b
    2fec:	23 30       	cpi	r18, 0x03	; 3
    2fee:	31 05       	cpc	r19, r1
    2ff0:	34 f4       	brge	.+12     	; 0x2ffe <window+0x40>
    2ff2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ff4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ff6:	81 30       	cpi	r24, 0x01	; 1
    2ff8:	91 05       	cpc	r25, r1
    2ffa:	71 f0       	breq	.+28     	; 0x3018 <window+0x5a>
    2ffc:	df c0       	rjmp	.+446    	; 0x31bc <window+0x1fe>
    2ffe:	2a 85       	ldd	r18, Y+10	; 0x0a
    3000:	3b 85       	ldd	r19, Y+11	; 0x0b
    3002:	23 30       	cpi	r18, 0x03	; 3
    3004:	31 05       	cpc	r19, r1
    3006:	09 f4       	brne	.+2      	; 0x300a <window+0x4c>
    3008:	4b c0       	rjmp	.+150    	; 0x30a0 <window+0xe2>
    300a:	8a 85       	ldd	r24, Y+10	; 0x0a
    300c:	9b 85       	ldd	r25, Y+11	; 0x0b
    300e:	84 30       	cpi	r24, 0x04	; 4
    3010:	91 05       	cpc	r25, r1
    3012:	09 f4       	brne	.+2      	; 0x3016 <window+0x58>
    3014:	69 c0       	rjmp	.+210    	; 0x30e8 <window+0x12a>
    3016:	d2 c0       	rjmp	.+420    	; 0x31bc <window+0x1fe>
	case 1 :
		num_1 =0 ;
    3018:	10 92 02 02 	sts	0x0202, r1
    301c:	10 92 01 02 	sts	0x0201, r1
   if( fla==1){
    3020:	80 91 05 02 	lds	r24, 0x0205
    3024:	81 30       	cpi	r24, 0x01	; 1
    3026:	09 f0       	breq	.+2      	; 0x302a <window+0x6c>
    3028:	c9 c0       	rjmp	.+402    	; 0x31bc <window+0x1fe>
		for(int i=0 ; i<24 ; i++){       // window off
    302a:	18 86       	std	Y+8, r1	; 0x08
    302c:	1f 82       	std	Y+7, r1	; 0x07
    302e:	0a c0       	rjmp	.+20     	; 0x3044 <window+0x86>
		STEPPER_voidmotion(CLOCK_WISE , 15);
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	6f e0       	ldi	r22, 0x0F	; 15
    3034:	70 e0       	ldi	r23, 0x00	; 0
    3036:	0e 94 88 10 	call	0x2110	; 0x2110 <STEPPER_voidmotion>

	switch (n) {
	case 1 :
		num_1 =0 ;
   if( fla==1){
		for(int i=0 ; i<24 ; i++){       // window off
    303a:	8f 81       	ldd	r24, Y+7	; 0x07
    303c:	98 85       	ldd	r25, Y+8	; 0x08
    303e:	01 96       	adiw	r24, 0x01	; 1
    3040:	98 87       	std	Y+8, r25	; 0x08
    3042:	8f 83       	std	Y+7, r24	; 0x07
    3044:	8f 81       	ldd	r24, Y+7	; 0x07
    3046:	98 85       	ldd	r25, Y+8	; 0x08
    3048:	88 31       	cpi	r24, 0x18	; 24
    304a:	91 05       	cpc	r25, r1
    304c:	8c f3       	brlt	.-30     	; 0x3030 <window+0x72>
		STEPPER_voidmotion(CLOCK_WISE , 15);
				 }
		fla=0;
    304e:	10 92 05 02 	sts	0x0205, r1
		 window_flag=0 ;}
    3052:	10 92 04 02 	sts	0x0204, r1
    3056:	b2 c0       	rjmp	.+356    	; 0x31bc <window+0x1fe>

		break ;
	case 2:
		num_1 =0 ;
    3058:	10 92 02 02 	sts	0x0202, r1
    305c:	10 92 01 02 	sts	0x0201, r1
	if( window_flag ==0){
    3060:	80 91 04 02 	lds	r24, 0x0204
    3064:	88 23       	and	r24, r24
    3066:	c1 f4       	brne	.+48     	; 0x3098 <window+0xda>
		for(int i=0 ; i<24 ; i++){       // window fully open
    3068:	1e 82       	std	Y+6, r1	; 0x06
    306a:	1d 82       	std	Y+5, r1	; 0x05
    306c:	0a c0       	rjmp	.+20     	; 0x3082 <window+0xc4>
		  STEPPER_voidmotion(ANTI_CLOCK_WISE , 15);
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	6f e0       	ldi	r22, 0x0F	; 15
    3072:	70 e0       	ldi	r23, 0x00	; 0
    3074:	0e 94 88 10 	call	0x2110	; 0x2110 <STEPPER_voidmotion>

		break ;
	case 2:
		num_1 =0 ;
	if( window_flag ==0){
		for(int i=0 ; i<24 ; i++){       // window fully open
    3078:	8d 81       	ldd	r24, Y+5	; 0x05
    307a:	9e 81       	ldd	r25, Y+6	; 0x06
    307c:	01 96       	adiw	r24, 0x01	; 1
    307e:	9e 83       	std	Y+6, r25	; 0x06
    3080:	8d 83       	std	Y+5, r24	; 0x05
    3082:	8d 81       	ldd	r24, Y+5	; 0x05
    3084:	9e 81       	ldd	r25, Y+6	; 0x06
    3086:	88 31       	cpi	r24, 0x18	; 24
    3088:	91 05       	cpc	r25, r1
    308a:	8c f3       	brlt	.-30     	; 0x306e <window+0xb0>
		  STEPPER_voidmotion(ANTI_CLOCK_WISE , 15);
			 }
		fla=1 ;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	80 93 05 02 	sts	0x0205, r24
       window_flag=1 ;}
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	80 93 04 02 	sts	0x0204, r24
	window_flag=1 ;
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	80 93 04 02 	sts	0x0204, r24
    309e:	8e c0       	rjmp	.+284    	; 0x31bc <window+0x1fe>
	break ;

	case 3:
		num_1 =0 ;
    30a0:	10 92 02 02 	sts	0x0202, r1
    30a4:	10 92 01 02 	sts	0x0201, r1
		if( window_flag==0){
    30a8:	80 91 04 02 	lds	r24, 0x0204
    30ac:	88 23       	and	r24, r24
    30ae:	c1 f4       	brne	.+48     	; 0x30e0 <window+0x122>
		for(int i=0 ; i<8 ; i++){       // window partially
    30b0:	1c 82       	std	Y+4, r1	; 0x04
    30b2:	1b 82       	std	Y+3, r1	; 0x03
    30b4:	0a c0       	rjmp	.+20     	; 0x30ca <window+0x10c>
		 STEPPER_voidmotion(ANTI_CLOCK_WISE , 15);
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	6f e0       	ldi	r22, 0x0F	; 15
    30ba:	70 e0       	ldi	r23, 0x00	; 0
    30bc:	0e 94 88 10 	call	0x2110	; 0x2110 <STEPPER_voidmotion>
	break ;

	case 3:
		num_1 =0 ;
		if( window_flag==0){
		for(int i=0 ; i<8 ; i++){       // window partially
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	9c 81       	ldd	r25, Y+4	; 0x04
    30c4:	01 96       	adiw	r24, 0x01	; 1
    30c6:	9c 83       	std	Y+4, r25	; 0x04
    30c8:	8b 83       	std	Y+3, r24	; 0x03
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	9c 81       	ldd	r25, Y+4	; 0x04
    30ce:	88 30       	cpi	r24, 0x08	; 8
    30d0:	91 05       	cpc	r25, r1
    30d2:	8c f3       	brlt	.-30     	; 0x30b6 <window+0xf8>
		 STEPPER_voidmotion(ANTI_CLOCK_WISE , 15);

					 }
		fla=1 ;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	80 93 05 02 	sts	0x0205, r24
		 window_flag=1 ;}
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	80 93 04 02 	sts	0x0204, r24
		window_flag=1 ;
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	80 93 04 02 	sts	0x0204, r24
    30e6:	6a c0       	rjmp	.+212    	; 0x31bc <window+0x1fe>
		break ;
	case 4:
		num_1 =0 ;
    30e8:	10 92 02 02 	sts	0x0202, r1
    30ec:	10 92 01 02 	sts	0x0201, r1
		 LCD_WRITE_COMMAND(lcd_Clear);
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
    	  LCD_WRITE_STRING(" 1_options");
    30f6:	80 e6       	ldi	r24, 0x60	; 96
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
    	  LCD_GO_TO(line2 , 0);
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	60 e0       	ldi	r22, 0x00	; 0
    3102:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
    	  LCD_WRITE_STRING("2_Turn Off All");
    3106:	8b e6       	ldi	r24, 0x6B	; 107
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
    	  do{
    	  	 KPD_u8KpdGetKeyState(&pinvalue);
    310e:	89 e0       	ldi	r24, 0x09	; 9
    3110:	92 e0       	ldi	r25, 0x02	; 2
    3112:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
    	  }while(pinvalue == Kpd_keynotpressed);
    3116:	80 91 09 02 	lds	r24, 0x0209
    311a:	8f 3f       	cpi	r24, 0xFF	; 255
    311c:	c1 f3       	breq	.-16     	; 0x310e <window+0x150>
    	  sign_1 = pinvalue -'0';
    311e:	80 91 09 02 	lds	r24, 0x0209
    3122:	80 53       	subi	r24, 0x30	; 48
    3124:	80 93 0a 02 	sts	0x020A, r24
    	  if(sign_1 >=0 && sign_1<=9 ){
    3128:	80 91 0a 02 	lds	r24, 0x020A
    312c:	8a 30       	cpi	r24, 0x0A	; 10
    312e:	c8 f4       	brcc	.+50     	; 0x3162 <window+0x1a4>
    		  num_1 = (num_1*10) + (pinvalue -'0');
    3130:	80 91 01 02 	lds	r24, 0x0201
    3134:	90 91 02 02 	lds	r25, 0x0202
    3138:	9c 01       	movw	r18, r24
    313a:	22 0f       	add	r18, r18
    313c:	33 1f       	adc	r19, r19
    313e:	c9 01       	movw	r24, r18
    3140:	88 0f       	add	r24, r24
    3142:	99 1f       	adc	r25, r25
    3144:	88 0f       	add	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	28 0f       	add	r18, r24
    314a:	39 1f       	adc	r19, r25
    314c:	80 91 09 02 	lds	r24, 0x0209
    3150:	88 2f       	mov	r24, r24
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	82 0f       	add	r24, r18
    3156:	93 1f       	adc	r25, r19
    3158:	c0 97       	sbiw	r24, 0x30	; 48
    315a:	90 93 02 02 	sts	0x0202, r25
    315e:	80 93 01 02 	sts	0x0201, r24
			  }
    	 if ( num_1 == 2){  // turn off all devices
    3162:	80 91 01 02 	lds	r24, 0x0201
    3166:	90 91 02 02 	lds	r25, 0x0202
    316a:	82 30       	cpi	r24, 0x02	; 2
    316c:	91 05       	cpc	r25, r1
    316e:	21 f5       	brne	.+72     	; 0x31b8 <window+0x1fa>

    	  	DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_LOW );   // room led off
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	64 e0       	ldi	r22, 0x04	; 4
    3174:	40 e0       	ldi	r20, 0x00	; 0
    3176:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
    	  	TIMERS_TIM0SetCompareMatchVAlue(0 ); // air conditioner off
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
    	  	if(window_flag == 1 ){
    3180:	80 91 04 02 	lds	r24, 0x0204
    3184:	81 30       	cpi	r24, 0x01	; 1
    3186:	91 f4       	brne	.+36     	; 0x31ac <window+0x1ee>
    	  			  for(int i=0 ; i<24 ; i++){       // window off
    3188:	1a 82       	std	Y+2, r1	; 0x02
    318a:	19 82       	std	Y+1, r1	; 0x01
    318c:	0a c0       	rjmp	.+20     	; 0x31a2 <window+0x1e4>
    	  			  		      STEPPER_voidmotion(CLOCK_WISE , 15);
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	6f e0       	ldi	r22, 0x0F	; 15
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	0e 94 88 10 	call	0x2110	; 0x2110 <STEPPER_voidmotion>
    	 if ( num_1 == 2){  // turn off all devices

    	  	DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_LOW );   // room led off
    	  	TIMERS_TIM0SetCompareMatchVAlue(0 ); // air conditioner off
    	  	if(window_flag == 1 ){
    	  			  for(int i=0 ; i<24 ; i++){       // window off
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	9a 81       	ldd	r25, Y+2	; 0x02
    319c:	01 96       	adiw	r24, 0x01	; 1
    319e:	9a 83       	std	Y+2, r25	; 0x02
    31a0:	89 83       	std	Y+1, r24	; 0x01
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	9a 81       	ldd	r25, Y+2	; 0x02
    31a6:	88 31       	cpi	r24, 0x18	; 24
    31a8:	91 05       	cpc	r25, r1
    31aa:	8c f3       	brlt	.-30     	; 0x318e <window+0x1d0>
    	  			  		      STEPPER_voidmotion(CLOCK_WISE , 15);
    	  			  		 	 }
    	  			     	 }
    	  	cond_flag=0 ;
    31ac:	10 92 e4 01 	sts	0x01E4, r1
    	  	num_1=0 ;
    31b0:	10 92 02 02 	sts	0x0202, r1
    31b4:	10 92 01 02 	sts	0x0201, r1
    	  	 }
    	 window_flag=0 ;
    31b8:	10 92 04 02 	sts	0x0204, r1
		break ;

	}


	return window_flag;
    31bc:	80 91 04 02 	lds	r24, 0x0204

}
    31c0:	2b 96       	adiw	r28, 0x0b	; 11
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	08 95       	ret

000031d2 <led>:


void led(u8 f){
    31d2:	df 93       	push	r29
    31d4:	cf 93       	push	r28
    31d6:	00 d0       	rcall	.+0      	; 0x31d8 <led+0x6>
    31d8:	00 d0       	rcall	.+0      	; 0x31da <led+0x8>
    31da:	0f 92       	push	r0
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	8b 83       	std	Y+3, r24	; 0x03
switch (num_1){
    31e2:	80 91 01 02 	lds	r24, 0x0201
    31e6:	90 91 02 02 	lds	r25, 0x0202
    31ea:	9d 83       	std	Y+5, r25	; 0x05
    31ec:	8c 83       	std	Y+4, r24	; 0x04
    31ee:	8c 81       	ldd	r24, Y+4	; 0x04
    31f0:	9d 81       	ldd	r25, Y+5	; 0x05
    31f2:	82 30       	cpi	r24, 0x02	; 2
    31f4:	91 05       	cpc	r25, r1
    31f6:	b9 f0       	breq	.+46     	; 0x3226 <led+0x54>
    31f8:	8c 81       	ldd	r24, Y+4	; 0x04
    31fa:	9d 81       	ldd	r25, Y+5	; 0x05
    31fc:	83 30       	cpi	r24, 0x03	; 3
    31fe:	91 05       	cpc	r25, r1
    3200:	71 f1       	breq	.+92     	; 0x325e <led+0x8c>
    3202:	8c 81       	ldd	r24, Y+4	; 0x04
    3204:	9d 81       	ldd	r25, Y+5	; 0x05
    3206:	81 30       	cpi	r24, 0x01	; 1
    3208:	91 05       	cpc	r25, r1
    320a:	09 f0       	breq	.+2      	; 0x320e <led+0x3c>
    320c:	90 c0       	rjmp	.+288    	; 0x332e <led+0x15c>

 case 1 :
	 DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_LOW );   // room led off
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	64 e0       	ldi	r22, 0x04	; 4
    3212:	40 e0       	ldi	r20, 0x00	; 0
    3214:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	 num_1=0 ;
    3218:	10 92 02 02 	sts	0x0202, r1
    321c:	10 92 01 02 	sts	0x0201, r1
	 led_flag=0 ;
    3220:	10 92 03 02 	sts	0x0203, r1
    3224:	84 c0       	rjmp	.+264    	; 0x332e <led+0x15c>
	 break ;
 case 2 :

    if( f == 0){
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	88 23       	and	r24, r24
    322a:	49 f4       	brne	.+18     	; 0x323e <led+0x6c>
       DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_HIGH );
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	64 e0       	ldi	r22, 0x04	; 4
    3230:	41 e0       	ldi	r20, 0x01	; 1
    3232:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	  led_flag=1 ;
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	80 93 03 02 	sts	0x0203, r24
    323c:	78 c0       	rjmp	.+240    	; 0x332e <led+0x15c>
    } // room led  on}
	  else if( f==1 ) {
    323e:	8b 81       	ldd	r24, Y+3	; 0x03
    3240:	81 30       	cpi	r24, 0x01	; 1
    3242:	09 f0       	breq	.+2      	; 0x3246 <led+0x74>
    3244:	74 c0       	rjmp	.+232    	; 0x332e <led+0x15c>
		  DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_LOW );   // room led off
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	64 e0       	ldi	r22, 0x04	; 4
    324a:	40 e0       	ldi	r20, 0x00	; 0
    324c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	  led_flag=0 ;
    3250:	10 92 03 02 	sts	0x0203, r1
	 	 num_1=0 ;}
    3254:	10 92 02 02 	sts	0x0202, r1
    3258:	10 92 01 02 	sts	0x0201, r1
    325c:	68 c0       	rjmp	.+208    	; 0x332e <led+0x15c>
	 break ;
 case 3 :

	 num_1 =0 ;
    325e:	10 92 02 02 	sts	0x0202, r1
    3262:	10 92 01 02 	sts	0x0201, r1
	 LCD_WRITE_COMMAND(lcd_Clear);
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
	 LCD_WRITE_STRING(" 1_options");
    326c:	80 e6       	ldi	r24, 0x60	; 96
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
	 LCD_GO_TO(line2 , 0);
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	60 e0       	ldi	r22, 0x00	; 0
    3278:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
	 LCD_WRITE_STRING("2_Turn Off All");
    327c:	8b e6       	ldi	r24, 0x6B	; 107
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
	 do{
	 	 KPD_u8KpdGetKeyState(&pinvalue);
    3284:	89 e0       	ldi	r24, 0x09	; 9
    3286:	92 e0       	ldi	r25, 0x02	; 2
    3288:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
	 }while(pinvalue == Kpd_keynotpressed);
    328c:	80 91 09 02 	lds	r24, 0x0209
    3290:	8f 3f       	cpi	r24, 0xFF	; 255
    3292:	c1 f3       	breq	.-16     	; 0x3284 <led+0xb2>
	 sign_1 = pinvalue -'0';
    3294:	80 91 09 02 	lds	r24, 0x0209
    3298:	80 53       	subi	r24, 0x30	; 48
    329a:	80 93 0a 02 	sts	0x020A, r24
	 if(sign_1 >=0 && sign_1<=9 ){
    329e:	80 91 0a 02 	lds	r24, 0x020A
    32a2:	8a 30       	cpi	r24, 0x0A	; 10
    32a4:	c8 f4       	brcc	.+50     	; 0x32d8 <led+0x106>
		  num_1 = (num_1*10) + (pinvalue -'0');
    32a6:	80 91 01 02 	lds	r24, 0x0201
    32aa:	90 91 02 02 	lds	r25, 0x0202
    32ae:	9c 01       	movw	r18, r24
    32b0:	22 0f       	add	r18, r18
    32b2:	33 1f       	adc	r19, r19
    32b4:	c9 01       	movw	r24, r18
    32b6:	88 0f       	add	r24, r24
    32b8:	99 1f       	adc	r25, r25
    32ba:	88 0f       	add	r24, r24
    32bc:	99 1f       	adc	r25, r25
    32be:	28 0f       	add	r18, r24
    32c0:	39 1f       	adc	r19, r25
    32c2:	80 91 09 02 	lds	r24, 0x0209
    32c6:	88 2f       	mov	r24, r24
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	82 0f       	add	r24, r18
    32cc:	93 1f       	adc	r25, r19
    32ce:	c0 97       	sbiw	r24, 0x30	; 48
    32d0:	90 93 02 02 	sts	0x0202, r25
    32d4:	80 93 01 02 	sts	0x0201, r24
		  }
	 if ( num_1 == 2){  // turn off all devices
    32d8:	80 91 01 02 	lds	r24, 0x0201
    32dc:	90 91 02 02 	lds	r25, 0x0202
    32e0:	82 30       	cpi	r24, 0x02	; 2
    32e2:	91 05       	cpc	r25, r1
    32e4:	f1 f4       	brne	.+60     	; 0x3322 <led+0x150>

	  DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_LOW );   // room led off
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	64 e0       	ldi	r22, 0x04	; 4
    32ea:	40 e0       	ldi	r20, 0x00	; 0
    32ec:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	  TIMERS_TIM0SetCompareMatchVAlue(0 ); // air conditioner off
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
	  if(window_flag == 1 ){
    32f6:	80 91 04 02 	lds	r24, 0x0204
    32fa:	81 30       	cpi	r24, 0x01	; 1
    32fc:	91 f4       	brne	.+36     	; 0x3322 <led+0x150>
	  		  for(int i=0 ; i<24 ; i++){       // window off
    32fe:	1a 82       	std	Y+2, r1	; 0x02
    3300:	19 82       	std	Y+1, r1	; 0x01
    3302:	0a c0       	rjmp	.+20     	; 0x3318 <led+0x146>
	  		  		      STEPPER_voidmotion(CLOCK_WISE , 15);
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	6f e0       	ldi	r22, 0x0F	; 15
    3308:	70 e0       	ldi	r23, 0x00	; 0
    330a:	0e 94 88 10 	call	0x2110	; 0x2110 <STEPPER_voidmotion>
	 if ( num_1 == 2){  // turn off all devices

	  DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_LOW );   // room led off
	  TIMERS_TIM0SetCompareMatchVAlue(0 ); // air conditioner off
	  if(window_flag == 1 ){
	  		  for(int i=0 ; i<24 ; i++){       // window off
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	9a 81       	ldd	r25, Y+2	; 0x02
    3312:	01 96       	adiw	r24, 0x01	; 1
    3314:	9a 83       	std	Y+2, r25	; 0x02
    3316:	89 83       	std	Y+1, r24	; 0x01
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	9a 81       	ldd	r25, Y+2	; 0x02
    331c:	88 31       	cpi	r24, 0x18	; 24
    331e:	91 05       	cpc	r25, r1
    3320:	8c f3       	brlt	.-30     	; 0x3304 <led+0x132>
	  		  		      STEPPER_voidmotion(CLOCK_WISE , 15);
	  		  		 	 }
	  		     	 }
	     	 }
	 cond_flag=0 ;
    3322:	10 92 e4 01 	sts	0x01E4, r1
     num_1=0 ;
    3326:	10 92 02 02 	sts	0x0202, r1
    332a:	10 92 01 02 	sts	0x0201, r1

}



}
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	cf 91       	pop	r28
    333a:	df 91       	pop	r29
    333c:	08 95       	ret

0000333e <air_conutioner>:




u8 air_conutioner(u8 n , u8 f){
    333e:	df 93       	push	r29
    3340:	cf 93       	push	r28
    3342:	cd b7       	in	r28, 0x3d	; 61
    3344:	de b7       	in	r29, 0x3e	; 62
    3346:	ae 97       	sbiw	r28, 0x2e	; 46
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	cd bf       	out	0x3d, r28	; 61
    3352:	8b a3       	std	Y+35, r24	; 0x23
    3354:	6c a3       	std	Y+36, r22	; 0x24
 u16 count =0 ;
    3356:	1a a2       	std	Y+34, r1	; 0x22
    3358:	19 a2       	std	Y+33, r1	; 0x21
  switch(f){
    335a:	8c a1       	ldd	r24, Y+36	; 0x24
    335c:	28 2f       	mov	r18, r24
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	3e a7       	std	Y+46, r19	; 0x2e
    3362:	2d a7       	std	Y+45, r18	; 0x2d
    3364:	8d a5       	ldd	r24, Y+45	; 0x2d
    3366:	9e a5       	ldd	r25, Y+46	; 0x2e
    3368:	00 97       	sbiw	r24, 0x00	; 0
    336a:	39 f0       	breq	.+14     	; 0x337a <air_conutioner+0x3c>
    336c:	2d a5       	ldd	r18, Y+45	; 0x2d
    336e:	3e a5       	ldd	r19, Y+46	; 0x2e
    3370:	21 30       	cpi	r18, 0x01	; 1
    3372:	31 05       	cpc	r19, r1
    3374:	09 f4       	brne	.+2      	; 0x3378 <air_conutioner+0x3a>
    3376:	00 c4       	rjmp	.+2048   	; 0x3b78 <air_conutioner+0x83a>
    3378:	04 c4       	rjmp	.+2056   	; 0x3b82 <air_conutioner+0x844>
	 case 0:

        num_1=0;
    337a:	10 92 02 02 	sts	0x0202, r1
    337e:	10 92 01 02 	sts	0x0201, r1
	     LCD_WRITE_COMMAND(lcd_Clear);
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
	 	LCD_WRITE_STRING(" 1-T=25 2-T=30");
    3388:	8b e9       	ldi	r24, 0x9B	; 155
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
	 	LCD_GO_TO(line2 , 0);
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	60 e0       	ldi	r22, 0x00	; 0
    3394:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
	 	LCD_WRITE_STRING(" 3-T=22 4-cont");
    3398:	8a ea       	ldi	r24, 0xAA	; 170
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
	 	 do{
	 	 	 KPD_u8KpdGetKeyState(&pinvalue);
    33a0:	89 e0       	ldi	r24, 0x09	; 9
    33a2:	92 e0       	ldi	r25, 0x02	; 2
    33a4:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
	 	 }while(pinvalue == Kpd_keynotpressed);
    33a8:	80 91 09 02 	lds	r24, 0x0209
    33ac:	8f 3f       	cpi	r24, 0xFF	; 255
    33ae:	c1 f3       	breq	.-16     	; 0x33a0 <air_conutioner+0x62>
	 	 sign_1 = pinvalue -'0';
    33b0:	80 91 09 02 	lds	r24, 0x0209
    33b4:	80 53       	subi	r24, 0x30	; 48
    33b6:	80 93 0a 02 	sts	0x020A, r24
	 	 if(sign_1 >=0 && sign_1<=9 ){
    33ba:	80 91 0a 02 	lds	r24, 0x020A
    33be:	8a 30       	cpi	r24, 0x0A	; 10
    33c0:	c8 f4       	brcc	.+50     	; 0x33f4 <air_conutioner+0xb6>
	 		  num_1 = (num_1*10) + (pinvalue -'0');
    33c2:	80 91 01 02 	lds	r24, 0x0201
    33c6:	90 91 02 02 	lds	r25, 0x0202
    33ca:	9c 01       	movw	r18, r24
    33cc:	22 0f       	add	r18, r18
    33ce:	33 1f       	adc	r19, r19
    33d0:	c9 01       	movw	r24, r18
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	88 0f       	add	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	28 0f       	add	r18, r24
    33dc:	39 1f       	adc	r19, r25
    33de:	80 91 09 02 	lds	r24, 0x0209
    33e2:	88 2f       	mov	r24, r24
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	82 0f       	add	r24, r18
    33e8:	93 1f       	adc	r25, r19
    33ea:	c0 97       	sbiw	r24, 0x30	; 48
    33ec:	90 93 02 02 	sts	0x0202, r25
    33f0:	80 93 01 02 	sts	0x0201, r24
	 	 }
	 	 switch(num_1){
    33f4:	80 91 01 02 	lds	r24, 0x0201
    33f8:	90 91 02 02 	lds	r25, 0x0202
    33fc:	9c a7       	std	Y+44, r25	; 0x2c
    33fe:	8b a7       	std	Y+43, r24	; 0x2b
    3400:	2b a5       	ldd	r18, Y+43	; 0x2b
    3402:	3c a5       	ldd	r19, Y+44	; 0x2c
    3404:	22 30       	cpi	r18, 0x02	; 2
    3406:	31 05       	cpc	r19, r1
    3408:	21 f1       	breq	.+72     	; 0x3452 <air_conutioner+0x114>
    340a:	8b a5       	ldd	r24, Y+43	; 0x2b
    340c:	9c a5       	ldd	r25, Y+44	; 0x2c
    340e:	83 30       	cpi	r24, 0x03	; 3
    3410:	91 05       	cpc	r25, r1
    3412:	30 f4       	brcc	.+12     	; 0x3420 <air_conutioner+0xe2>
    3414:	2b a5       	ldd	r18, Y+43	; 0x2b
    3416:	3c a5       	ldd	r19, Y+44	; 0x2c
    3418:	21 30       	cpi	r18, 0x01	; 1
    341a:	31 05       	cpc	r19, r1
    341c:	61 f0       	breq	.+24     	; 0x3436 <air_conutioner+0xf8>
    341e:	b1 c3       	rjmp	.+1890   	; 0x3b82 <air_conutioner+0x844>
    3420:	8b a5       	ldd	r24, Y+43	; 0x2b
    3422:	9c a5       	ldd	r25, Y+44	; 0x2c
    3424:	83 30       	cpi	r24, 0x03	; 3
    3426:	91 05       	cpc	r25, r1
    3428:	11 f1       	breq	.+68     	; 0x346e <air_conutioner+0x130>
    342a:	2b a5       	ldd	r18, Y+43	; 0x2b
    342c:	3c a5       	ldd	r19, Y+44	; 0x2c
    342e:	24 30       	cpi	r18, 0x04	; 4
    3430:	31 05       	cpc	r19, r1
    3432:	59 f1       	breq	.+86     	; 0x348a <air_conutioner+0x14c>
    3434:	a6 c3       	rjmp	.+1868   	; 0x3b82 <air_conutioner+0x844>
	 	 case 1:
		/* dc motor use tim0  compare match >> 170  t = 25 */
		    TIMERS_TIM0SetCompareMatchVAlue(170);
    3436:	8a ea       	ldi	r24, 0xAA	; 170
    3438:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
		    temp = 25 ;
    343c:	89 e1       	ldi	r24, 0x19	; 25
    343e:	80 93 08 02 	sts	0x0208, r24
		    cond_flag=1 ;
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	80 93 e4 01 	sts	0x01E4, r24
		    num_1=0 ;
    3448:	10 92 02 02 	sts	0x0202, r1
    344c:	10 92 01 02 	sts	0x0201, r1
    3450:	98 c3       	rjmp	.+1840   	; 0x3b82 <air_conutioner+0x844>
	break ;
	case 2:
		/* dc motor use tim0  compare match >> 120  t = 30 */
		    TIMERS_TIM0SetCompareMatchVAlue(120);
    3452:	88 e7       	ldi	r24, 0x78	; 120
    3454:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
		    temp = 30 ;
    3458:	8e e1       	ldi	r24, 0x1E	; 30
    345a:	80 93 08 02 	sts	0x0208, r24
		    cond_flag=1 ;
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	80 93 e4 01 	sts	0x01E4, r24
		    num_1=0;
    3464:	10 92 02 02 	sts	0x0202, r1
    3468:	10 92 01 02 	sts	0x0201, r1
    346c:	8a c3       	rjmp	.+1812   	; 0x3b82 <air_conutioner+0x844>
	break ;
	case 3:
		/* dc motor use tim0  compare match >> 250  t = 22 */
		    TIMERS_TIM0SetCompareMatchVAlue(250);
    346e:	8a ef       	ldi	r24, 0xFA	; 250
    3470:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
		    temp = 22 ;
    3474:	86 e1       	ldi	r24, 0x16	; 22
    3476:	80 93 08 02 	sts	0x0208, r24
		    cond_flag=1 ;
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	80 93 e4 01 	sts	0x01E4, r24
		    num_1=0 ;
    3480:	10 92 02 02 	sts	0x0202, r1
    3484:	10 92 01 02 	sts	0x0201, r1
    3488:	7c c3       	rjmp	.+1784   	; 0x3b82 <air_conutioner+0x844>
	break ;
	case 4:

		num_1 =0 ;
    348a:	10 92 02 02 	sts	0x0202, r1
    348e:	10 92 01 02 	sts	0x0201, r1
		LCD_WRITE_COMMAND(lcd_Clear);
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
		LCD_WRITE_STRING(" 1-Turn OFF");
    3498:	89 eb       	ldi	r24, 0xB9	; 185
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
		LCD_GO_TO(line2 , 0);
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	60 e0       	ldi	r22, 0x00	; 0
    34a4:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
		LCD_WRITE_STRING("3-back");
    34a8:	85 ec       	ldi	r24, 0xC5	; 197
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
		 do{
		 	 KPD_u8KpdGetKeyState(&pinvalue);
    34b0:	89 e0       	ldi	r24, 0x09	; 9
    34b2:	92 e0       	ldi	r25, 0x02	; 2
    34b4:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
		 }while(pinvalue == Kpd_keynotpressed);
    34b8:	80 91 09 02 	lds	r24, 0x0209
    34bc:	8f 3f       	cpi	r24, 0xFF	; 255
    34be:	c1 f3       	breq	.-16     	; 0x34b0 <air_conutioner+0x172>
		 sign_1 = pinvalue -'0';
    34c0:	80 91 09 02 	lds	r24, 0x0209
    34c4:	80 53       	subi	r24, 0x30	; 48
    34c6:	80 93 0a 02 	sts	0x020A, r24
		 if(sign_1 >=0 && sign_1<=9 ){
    34ca:	80 91 0a 02 	lds	r24, 0x020A
    34ce:	8a 30       	cpi	r24, 0x0A	; 10
    34d0:	c8 f4       	brcc	.+50     	; 0x3504 <air_conutioner+0x1c6>
			  num_1 = (num_1*10) + (pinvalue -'0');
    34d2:	80 91 01 02 	lds	r24, 0x0201
    34d6:	90 91 02 02 	lds	r25, 0x0202
    34da:	9c 01       	movw	r18, r24
    34dc:	22 0f       	add	r18, r18
    34de:	33 1f       	adc	r19, r19
    34e0:	c9 01       	movw	r24, r18
    34e2:	88 0f       	add	r24, r24
    34e4:	99 1f       	adc	r25, r25
    34e6:	88 0f       	add	r24, r24
    34e8:	99 1f       	adc	r25, r25
    34ea:	28 0f       	add	r18, r24
    34ec:	39 1f       	adc	r19, r25
    34ee:	80 91 09 02 	lds	r24, 0x0209
    34f2:	88 2f       	mov	r24, r24
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	82 0f       	add	r24, r18
    34f8:	93 1f       	adc	r25, r19
    34fa:	c0 97       	sbiw	r24, 0x30	; 48
    34fc:	90 93 02 02 	sts	0x0202, r25
    3500:	80 93 01 02 	sts	0x0201, r24
			 }

		switch(num_1){
    3504:	80 91 01 02 	lds	r24, 0x0201
    3508:	90 91 02 02 	lds	r25, 0x0202
    350c:	9a a7       	std	Y+42, r25	; 0x2a
    350e:	89 a7       	std	Y+41, r24	; 0x29
    3510:	29 a5       	ldd	r18, Y+41	; 0x29
    3512:	3a a5       	ldd	r19, Y+42	; 0x2a
    3514:	21 30       	cpi	r18, 0x01	; 1
    3516:	31 05       	cpc	r19, r1
    3518:	31 f0       	breq	.+12     	; 0x3526 <air_conutioner+0x1e8>
    351a:	89 a5       	ldd	r24, Y+41	; 0x29
    351c:	9a a5       	ldd	r25, Y+42	; 0x2a
    351e:	82 30       	cpi	r24, 0x02	; 2
    3520:	91 05       	cpc	r25, r1
    3522:	59 f0       	breq	.+22     	; 0x353a <air_conutioner+0x1fc>
    3524:	2e c3       	rjmp	.+1628   	; 0x3b82 <air_conutioner+0x844>
		case 1:
			num_1=0 ;
    3526:	10 92 02 02 	sts	0x0202, r1
    352a:	10 92 01 02 	sts	0x0201, r1
			TIMERS_TIM0SetCompareMatchVAlue(0);
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
			cond_flag=0 ;
    3534:	10 92 e4 01 	sts	0x01E4, r1
    3538:	24 c3       	rjmp	.+1608   	; 0x3b82 <air_conutioner+0x844>
			break ;
		case 2 :

			 num_1 =0 ;
    353a:	10 92 02 02 	sts	0x0202, r1
    353e:	10 92 01 02 	sts	0x0201, r1
				 LCD_WRITE_COMMAND(lcd_Clear);
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
				 LCD_WRITE_STRING(" 1_options");
    3548:	80 e6       	ldi	r24, 0x60	; 96
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
				 LCD_GO_TO(line2 , 0);
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	60 e0       	ldi	r22, 0x00	; 0
    3554:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
				 LCD_WRITE_STRING("2_Turn Off All");
    3558:	8b e6       	ldi	r24, 0x6B	; 107
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
				 do{
				 	 KPD_u8KpdGetKeyState(&pinvalue);
    3560:	89 e0       	ldi	r24, 0x09	; 9
    3562:	92 e0       	ldi	r25, 0x02	; 2
    3564:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
				 }while(pinvalue == Kpd_keynotpressed);
    3568:	80 91 09 02 	lds	r24, 0x0209
    356c:	8f 3f       	cpi	r24, 0xFF	; 255
    356e:	c1 f3       	breq	.-16     	; 0x3560 <air_conutioner+0x222>
				 sign_1 = pinvalue -'0';
    3570:	80 91 09 02 	lds	r24, 0x0209
    3574:	80 53       	subi	r24, 0x30	; 48
    3576:	80 93 0a 02 	sts	0x020A, r24
				 if(sign_1 >=0 && sign_1<=9 ){
    357a:	80 91 0a 02 	lds	r24, 0x020A
    357e:	8a 30       	cpi	r24, 0x0A	; 10
    3580:	c8 f4       	brcc	.+50     	; 0x35b4 <air_conutioner+0x276>
					  num_1 = (num_1*10) + (pinvalue -'0');
    3582:	80 91 01 02 	lds	r24, 0x0201
    3586:	90 91 02 02 	lds	r25, 0x0202
    358a:	9c 01       	movw	r18, r24
    358c:	22 0f       	add	r18, r18
    358e:	33 1f       	adc	r19, r19
    3590:	c9 01       	movw	r24, r18
    3592:	88 0f       	add	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	88 0f       	add	r24, r24
    3598:	99 1f       	adc	r25, r25
    359a:	28 0f       	add	r18, r24
    359c:	39 1f       	adc	r19, r25
    359e:	80 91 09 02 	lds	r24, 0x0209
    35a2:	88 2f       	mov	r24, r24
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	82 0f       	add	r24, r18
    35a8:	93 1f       	adc	r25, r19
    35aa:	c0 97       	sbiw	r24, 0x30	; 48
    35ac:	90 93 02 02 	sts	0x0202, r25
    35b0:	80 93 01 02 	sts	0x0201, r24
					  }
				 if ( num_1 == 2){  // turn off all devices
    35b4:	80 91 01 02 	lds	r24, 0x0201
    35b8:	90 91 02 02 	lds	r25, 0x0202
    35bc:	82 30       	cpi	r24, 0x02	; 2
    35be:	91 05       	cpc	r25, r1
    35c0:	09 f0       	breq	.+2      	; 0x35c4 <air_conutioner+0x286>
    35c2:	df c2       	rjmp	.+1470   	; 0x3b82 <air_conutioner+0x844>

				  DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_LOW );   // room led off
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	64 e0       	ldi	r22, 0x04	; 4
    35c8:	40 e0       	ldi	r20, 0x00	; 0
    35ca:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
				  TIMERS_TIM0SetCompareMatchVAlue(0 ); // air conditioner off
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
				  if(window_flag == 1 ){
    35d4:	80 91 04 02 	lds	r24, 0x0204
    35d8:	81 30       	cpi	r24, 0x01	; 1
    35da:	91 f4       	brne	.+36     	; 0x3600 <air_conutioner+0x2c2>
				 	  		  for(int i=0 ; i<24 ; i++){       // window off
    35dc:	18 a2       	std	Y+32, r1	; 0x20
    35de:	1f 8e       	std	Y+31, r1	; 0x1f
    35e0:	0a c0       	rjmp	.+20     	; 0x35f6 <air_conutioner+0x2b8>
				 	  		  		      STEPPER_voidmotion(CLOCK_WISE , 15);
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	6f e0       	ldi	r22, 0x0F	; 15
    35e6:	70 e0       	ldi	r23, 0x00	; 0
    35e8:	0e 94 88 10 	call	0x2110	; 0x2110 <STEPPER_voidmotion>
				 if ( num_1 == 2){  // turn off all devices

				  DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_LOW );   // room led off
				  TIMERS_TIM0SetCompareMatchVAlue(0 ); // air conditioner off
				  if(window_flag == 1 ){
				 	  		  for(int i=0 ; i<24 ; i++){       // window off
    35ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35ee:	98 a1       	ldd	r25, Y+32	; 0x20
    35f0:	01 96       	adiw	r24, 0x01	; 1
    35f2:	98 a3       	std	Y+32, r25	; 0x20
    35f4:	8f 8f       	std	Y+31, r24	; 0x1f
    35f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35f8:	98 a1       	ldd	r25, Y+32	; 0x20
    35fa:	88 31       	cpi	r24, 0x18	; 24
    35fc:	91 05       	cpc	r25, r1
    35fe:	8c f3       	brlt	.-30     	; 0x35e2 <air_conutioner+0x2a4>
				 	  		  		      STEPPER_voidmotion(CLOCK_WISE , 15);
				 	  		  		 	 }
				 	  		     	 }
				  cond_flag=0 ;
    3600:	10 92 e4 01 	sts	0x01E4, r1
			     num_1=0 ;
    3604:	10 92 02 02 	sts	0x0202, r1
    3608:	10 92 01 02 	sts	0x0201, r1
			     window_flag=0 ;
    360c:	10 92 04 02 	sts	0x0204, r1
    3610:	b8 c2       	rjmp	.+1392   	; 0x3b82 <air_conutioner+0x844>
	break ;
	}}
	 break ;
	 case 1:
		 while(fla ==1){
		 	     num_1 =0 ;
    3612:	10 92 02 02 	sts	0x0202, r1
    3616:	10 92 01 02 	sts	0x0201, r1
		 	LCD_WRITE_COMMAND(lcd_Clear);
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
		   LCD_WRITE_STRING(" Window is open");
    3620:	8c ec       	ldi	r24, 0xCC	; 204
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
		   LCD_GO_TO(line2 , 0);
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	60 e0       	ldi	r22, 0x00	; 0
    362c:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
		   LCD_WRITE_STRING("close it");
    3630:	8c ed       	ldi	r24, 0xDC	; 220
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	aa e7       	ldi	r26, 0x7A	; 122
    363e:	b4 e4       	ldi	r27, 0x44	; 68
    3640:	89 8f       	std	Y+25, r24	; 0x19
    3642:	9a 8f       	std	Y+26, r25	; 0x1a
    3644:	ab 8f       	std	Y+27, r26	; 0x1b
    3646:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3648:	69 8d       	ldd	r22, Y+25	; 0x19
    364a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    364c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    364e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	4a ef       	ldi	r20, 0xFA	; 250
    3656:	54 e4       	ldi	r21, 0x44	; 68
    3658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	8d 8b       	std	Y+21, r24	; 0x15
    3662:	9e 8b       	std	Y+22, r25	; 0x16
    3664:	af 8b       	std	Y+23, r26	; 0x17
    3666:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3668:	6d 89       	ldd	r22, Y+21	; 0x15
    366a:	7e 89       	ldd	r23, Y+22	; 0x16
    366c:	8f 89       	ldd	r24, Y+23	; 0x17
    366e:	98 8d       	ldd	r25, Y+24	; 0x18
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e8       	ldi	r20, 0x80	; 128
    3676:	5f e3       	ldi	r21, 0x3F	; 63
    3678:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    367c:	88 23       	and	r24, r24
    367e:	2c f4       	brge	.+10     	; 0x368a <air_conutioner+0x34c>
		__ticks = 1;
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	9c 8b       	std	Y+20, r25	; 0x14
    3686:	8b 8b       	std	Y+19, r24	; 0x13
    3688:	3f c0       	rjmp	.+126    	; 0x3708 <air_conutioner+0x3ca>
	else if (__tmp > 65535)
    368a:	6d 89       	ldd	r22, Y+21	; 0x15
    368c:	7e 89       	ldd	r23, Y+22	; 0x16
    368e:	8f 89       	ldd	r24, Y+23	; 0x17
    3690:	98 8d       	ldd	r25, Y+24	; 0x18
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	3f ef       	ldi	r19, 0xFF	; 255
    3696:	4f e7       	ldi	r20, 0x7F	; 127
    3698:	57 e4       	ldi	r21, 0x47	; 71
    369a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    369e:	18 16       	cp	r1, r24
    36a0:	4c f5       	brge	.+82     	; 0x36f4 <air_conutioner+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a2:	69 8d       	ldd	r22, Y+25	; 0x19
    36a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e2       	ldi	r20, 0x20	; 32
    36b0:	51 e4       	ldi	r21, 0x41	; 65
    36b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	bc 01       	movw	r22, r24
    36bc:	cd 01       	movw	r24, r26
    36be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c2:	dc 01       	movw	r26, r24
    36c4:	cb 01       	movw	r24, r22
    36c6:	9c 8b       	std	Y+20, r25	; 0x14
    36c8:	8b 8b       	std	Y+19, r24	; 0x13
    36ca:	0f c0       	rjmp	.+30     	; 0x36ea <air_conutioner+0x3ac>
    36cc:	88 ec       	ldi	r24, 0xC8	; 200
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	9a 8b       	std	Y+18, r25	; 0x12
    36d2:	89 8b       	std	Y+17, r24	; 0x11
    36d4:	89 89       	ldd	r24, Y+17	; 0x11
    36d6:	9a 89       	ldd	r25, Y+18	; 0x12
    36d8:	01 97       	sbiw	r24, 0x01	; 1
    36da:	f1 f7       	brne	.-4      	; 0x36d8 <air_conutioner+0x39a>
    36dc:	9a 8b       	std	Y+18, r25	; 0x12
    36de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e0:	8b 89       	ldd	r24, Y+19	; 0x13
    36e2:	9c 89       	ldd	r25, Y+20	; 0x14
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	9c 8b       	std	Y+20, r25	; 0x14
    36e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ea:	8b 89       	ldd	r24, Y+19	; 0x13
    36ec:	9c 89       	ldd	r25, Y+20	; 0x14
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	69 f7       	brne	.-38     	; 0x36cc <air_conutioner+0x38e>
    36f2:	14 c0       	rjmp	.+40     	; 0x371c <air_conutioner+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f4:	6d 89       	ldd	r22, Y+21	; 0x15
    36f6:	7e 89       	ldd	r23, Y+22	; 0x16
    36f8:	8f 89       	ldd	r24, Y+23	; 0x17
    36fa:	98 8d       	ldd	r25, Y+24	; 0x18
    36fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3700:	dc 01       	movw	r26, r24
    3702:	cb 01       	movw	r24, r22
    3704:	9c 8b       	std	Y+20, r25	; 0x14
    3706:	8b 8b       	std	Y+19, r24	; 0x13
    3708:	8b 89       	ldd	r24, Y+19	; 0x13
    370a:	9c 89       	ldd	r25, Y+20	; 0x14
    370c:	98 8b       	std	Y+16, r25	; 0x10
    370e:	8f 87       	std	Y+15, r24	; 0x0f
    3710:	8f 85       	ldd	r24, Y+15	; 0x0f
    3712:	98 89       	ldd	r25, Y+16	; 0x10
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	f1 f7       	brne	.-4      	; 0x3714 <air_conutioner+0x3d6>
    3718:	98 8b       	std	Y+16, r25	; 0x10
    371a:	8f 87       	std	Y+15, r24	; 0x0f
           _delay_ms(1000);
		   LCD_WRITE_STRING("!!");
    371c:	85 ee       	ldi	r24, 0xE5	; 229
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
		   LCD_WRITE_COMMAND(lcd_Clear);
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
		   LCD_WRITE_STRING(" 1-Close ");
    372a:	88 ee       	ldi	r24, 0xE8	; 232
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
		     do{
		   	 KPD_u8KpdGetKeyState(&pinvalue);
    3732:	89 e0       	ldi	r24, 0x09	; 9
    3734:	92 e0       	ldi	r25, 0x02	; 2
    3736:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
		   	 count++ ;
    373a:	89 a1       	ldd	r24, Y+33	; 0x21
    373c:	9a a1       	ldd	r25, Y+34	; 0x22
    373e:	01 96       	adiw	r24, 0x01	; 1
    3740:	9a a3       	std	Y+34, r25	; 0x22
    3742:	89 a3       	std	Y+33, r24	; 0x21
		   	 }while(pinvalue == Kpd_keynotpressed && count <5000);
    3744:	80 91 09 02 	lds	r24, 0x0209
    3748:	8f 3f       	cpi	r24, 0xFF	; 255
    374a:	31 f4       	brne	.+12     	; 0x3758 <air_conutioner+0x41a>
    374c:	89 a1       	ldd	r24, Y+33	; 0x21
    374e:	9a a1       	ldd	r25, Y+34	; 0x22
    3750:	23 e1       	ldi	r18, 0x13	; 19
    3752:	88 38       	cpi	r24, 0x88	; 136
    3754:	92 07       	cpc	r25, r18
    3756:	68 f3       	brcs	.-38     	; 0x3732 <air_conutioner+0x3f4>
		    sign_1 = pinvalue -'0';
    3758:	80 91 09 02 	lds	r24, 0x0209
    375c:	80 53       	subi	r24, 0x30	; 48
    375e:	80 93 0a 02 	sts	0x020A, r24
		     if(sign_1 >=0 && sign_1<=9 ){
    3762:	80 91 0a 02 	lds	r24, 0x020A
    3766:	8a 30       	cpi	r24, 0x0A	; 10
    3768:	c8 f4       	brcc	.+50     	; 0x379c <air_conutioner+0x45e>
		       num_1 = (num_1*10) + (pinvalue -'0');
    376a:	80 91 01 02 	lds	r24, 0x0201
    376e:	90 91 02 02 	lds	r25, 0x0202
    3772:	9c 01       	movw	r18, r24
    3774:	22 0f       	add	r18, r18
    3776:	33 1f       	adc	r19, r19
    3778:	c9 01       	movw	r24, r18
    377a:	88 0f       	add	r24, r24
    377c:	99 1f       	adc	r25, r25
    377e:	88 0f       	add	r24, r24
    3780:	99 1f       	adc	r25, r25
    3782:	28 0f       	add	r18, r24
    3784:	39 1f       	adc	r19, r25
    3786:	80 91 09 02 	lds	r24, 0x0209
    378a:	88 2f       	mov	r24, r24
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	82 0f       	add	r24, r18
    3790:	93 1f       	adc	r25, r19
    3792:	c0 97       	sbiw	r24, 0x30	; 48
    3794:	90 93 02 02 	sts	0x0202, r25
    3798:	80 93 01 02 	sts	0x0201, r24
		   	 }
		    if( num_1 ==1){
    379c:	80 91 01 02 	lds	r24, 0x0201
    37a0:	90 91 02 02 	lds	r25, 0x0202
    37a4:	81 30       	cpi	r24, 0x01	; 1
    37a6:	91 05       	cpc	r25, r1
    37a8:	09 f0       	breq	.+2      	; 0x37ac <air_conutioner+0x46e>
    37aa:	5a c1       	rjmp	.+692    	; 0x3a60 <air_conutioner+0x722>
		     	 f=window(num_1);
    37ac:	80 91 01 02 	lds	r24, 0x0201
    37b0:	90 91 02 02 	lds	r25, 0x0202
    37b4:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <window>
    37b8:	8c a3       	std	Y+36, r24	; 0x24
		     	fla =0 ;
    37ba:	10 92 05 02 	sts	0x0205, r1
               num_1 =0 ;
    37be:	10 92 02 02 	sts	0x0202, r1
    37c2:	10 92 01 02 	sts	0x0201, r1
               num_1=0;
    37c6:	10 92 02 02 	sts	0x0202, r1
    37ca:	10 92 01 02 	sts	0x0201, r1
              	     LCD_WRITE_COMMAND(lcd_Clear);
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
              	 	LCD_WRITE_STRING(" 1-T=25 2-T=30");
    37d4:	8b e9       	ldi	r24, 0x9B	; 155
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
              	 	LCD_GO_TO(line2 , 0);
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	60 e0       	ldi	r22, 0x00	; 0
    37e0:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
              	 	LCD_WRITE_STRING(" 3-T=22 4-cont");
    37e4:	8a ea       	ldi	r24, 0xAA	; 170
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
              	 	 do{
              	 	 	 KPD_u8KpdGetKeyState(&pinvalue);
    37ec:	89 e0       	ldi	r24, 0x09	; 9
    37ee:	92 e0       	ldi	r25, 0x02	; 2
    37f0:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
                   	 	 }while(pinvalue == Kpd_keynotpressed);
    37f4:	80 91 09 02 	lds	r24, 0x0209
    37f8:	8f 3f       	cpi	r24, 0xFF	; 255
    37fa:	c1 f3       	breq	.-16     	; 0x37ec <air_conutioner+0x4ae>
                   	 	 sign_1 = pinvalue -'0';
    37fc:	80 91 09 02 	lds	r24, 0x0209
    3800:	80 53       	subi	r24, 0x30	; 48
    3802:	80 93 0a 02 	sts	0x020A, r24
       	 	 if(sign_1 >=0 && sign_1<=9 ){
    3806:	80 91 0a 02 	lds	r24, 0x020A
    380a:	8a 30       	cpi	r24, 0x0A	; 10
    380c:	c8 f4       	brcc	.+50     	; 0x3840 <air_conutioner+0x502>
       	 		  num_1 = (num_1*10) + (pinvalue -'0');
    380e:	80 91 01 02 	lds	r24, 0x0201
    3812:	90 91 02 02 	lds	r25, 0x0202
    3816:	9c 01       	movw	r18, r24
    3818:	22 0f       	add	r18, r18
    381a:	33 1f       	adc	r19, r19
    381c:	c9 01       	movw	r24, r18
    381e:	88 0f       	add	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	88 0f       	add	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	28 0f       	add	r18, r24
    3828:	39 1f       	adc	r19, r25
    382a:	80 91 09 02 	lds	r24, 0x0209
    382e:	88 2f       	mov	r24, r24
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	82 0f       	add	r24, r18
    3834:	93 1f       	adc	r25, r19
    3836:	c0 97       	sbiw	r24, 0x30	; 48
    3838:	90 93 02 02 	sts	0x0202, r25
    383c:	80 93 01 02 	sts	0x0201, r24
       	 	 }
       	 	 switch(num_1){
    3840:	80 91 01 02 	lds	r24, 0x0201
    3844:	90 91 02 02 	lds	r25, 0x0202
    3848:	98 a7       	std	Y+40, r25	; 0x28
    384a:	8f a3       	std	Y+39, r24	; 0x27
    384c:	2f a1       	ldd	r18, Y+39	; 0x27
    384e:	38 a5       	ldd	r19, Y+40	; 0x28
    3850:	22 30       	cpi	r18, 0x02	; 2
    3852:	31 05       	cpc	r19, r1
    3854:	21 f1       	breq	.+72     	; 0x389e <air_conutioner+0x560>
    3856:	8f a1       	ldd	r24, Y+39	; 0x27
    3858:	98 a5       	ldd	r25, Y+40	; 0x28
    385a:	83 30       	cpi	r24, 0x03	; 3
    385c:	91 05       	cpc	r25, r1
    385e:	30 f4       	brcc	.+12     	; 0x386c <air_conutioner+0x52e>
    3860:	2f a1       	ldd	r18, Y+39	; 0x27
    3862:	38 a5       	ldd	r19, Y+40	; 0x28
    3864:	21 30       	cpi	r18, 0x01	; 1
    3866:	31 05       	cpc	r19, r1
    3868:	61 f0       	breq	.+24     	; 0x3882 <air_conutioner+0x544>
    386a:	f7 c0       	rjmp	.+494    	; 0x3a5a <air_conutioner+0x71c>
    386c:	8f a1       	ldd	r24, Y+39	; 0x27
    386e:	98 a5       	ldd	r25, Y+40	; 0x28
    3870:	83 30       	cpi	r24, 0x03	; 3
    3872:	91 05       	cpc	r25, r1
    3874:	11 f1       	breq	.+68     	; 0x38ba <air_conutioner+0x57c>
    3876:	2f a1       	ldd	r18, Y+39	; 0x27
    3878:	38 a5       	ldd	r19, Y+40	; 0x28
    387a:	24 30       	cpi	r18, 0x04	; 4
    387c:	31 05       	cpc	r19, r1
    387e:	59 f1       	breq	.+86     	; 0x38d6 <air_conutioner+0x598>
    3880:	ec c0       	rjmp	.+472    	; 0x3a5a <air_conutioner+0x71c>
       	 	 case 1:
       		/* dc motor use tim0  compare match >> 170  t = 25 */
       		    TIMERS_TIM0SetCompareMatchVAlue(170);
    3882:	8a ea       	ldi	r24, 0xAA	; 170
    3884:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
       		    temp = 25 ;
    3888:	89 e1       	ldi	r24, 0x19	; 25
    388a:	80 93 08 02 	sts	0x0208, r24
       		    cond_flag=1 ;
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	80 93 e4 01 	sts	0x01E4, r24
       		    num_1=0 ;
    3894:	10 92 02 02 	sts	0x0202, r1
    3898:	10 92 01 02 	sts	0x0201, r1
    389c:	de c0       	rjmp	.+444    	; 0x3a5a <air_conutioner+0x71c>
       	break ;
       	case 2:
       		/* dc motor use tim0  compare match >> 120  t = 30 */
       		    TIMERS_TIM0SetCompareMatchVAlue(120);
    389e:	88 e7       	ldi	r24, 0x78	; 120
    38a0:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
       		    temp = 30 ;
    38a4:	8e e1       	ldi	r24, 0x1E	; 30
    38a6:	80 93 08 02 	sts	0x0208, r24
       		    cond_flag=1 ;
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	80 93 e4 01 	sts	0x01E4, r24
       		    num_1=0;
    38b0:	10 92 02 02 	sts	0x0202, r1
    38b4:	10 92 01 02 	sts	0x0201, r1
    38b8:	d0 c0       	rjmp	.+416    	; 0x3a5a <air_conutioner+0x71c>
       	break ;
       	case 3:
       		/* dc motor use tim0  compare match >> 250  t = 22 */
       		    TIMERS_TIM0SetCompareMatchVAlue(250);
    38ba:	8a ef       	ldi	r24, 0xFA	; 250
    38bc:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
       		    temp = 22 ;
    38c0:	86 e1       	ldi	r24, 0x16	; 22
    38c2:	80 93 08 02 	sts	0x0208, r24
       		    cond_flag=1 ;
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	80 93 e4 01 	sts	0x01E4, r24
       		    num_1=0 ;
    38cc:	10 92 02 02 	sts	0x0202, r1
    38d0:	10 92 01 02 	sts	0x0201, r1
    38d4:	c2 c0       	rjmp	.+388    	; 0x3a5a <air_conutioner+0x71c>
       	break ;
       	case 4:

       			num_1 =0 ;
    38d6:	10 92 02 02 	sts	0x0202, r1
    38da:	10 92 01 02 	sts	0x0201, r1
       			LCD_WRITE_COMMAND(lcd_Clear);
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
       			LCD_WRITE_STRING(" 1-Turn OFF");
    38e4:	89 eb       	ldi	r24, 0xB9	; 185
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
       			LCD_GO_TO(line2 , 0);
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	60 e0       	ldi	r22, 0x00	; 0
    38f0:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
       			LCD_WRITE_STRING("3-back");
    38f4:	85 ec       	ldi	r24, 0xC5	; 197
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
       			 do{
       			 	 KPD_u8KpdGetKeyState(&pinvalue);
    38fc:	89 e0       	ldi	r24, 0x09	; 9
    38fe:	92 e0       	ldi	r25, 0x02	; 2
    3900:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
       			 }while(pinvalue == Kpd_keynotpressed);
    3904:	80 91 09 02 	lds	r24, 0x0209
    3908:	8f 3f       	cpi	r24, 0xFF	; 255
    390a:	c1 f3       	breq	.-16     	; 0x38fc <air_conutioner+0x5be>
       			 sign_1 = pinvalue -'0';
    390c:	80 91 09 02 	lds	r24, 0x0209
    3910:	80 53       	subi	r24, 0x30	; 48
    3912:	80 93 0a 02 	sts	0x020A, r24
       			 if(sign_1 >=0 && sign_1<=9 ){
    3916:	80 91 0a 02 	lds	r24, 0x020A
    391a:	8a 30       	cpi	r24, 0x0A	; 10
    391c:	c8 f4       	brcc	.+50     	; 0x3950 <air_conutioner+0x612>
       				  num_1 = (num_1*10) + (pinvalue -'0');
    391e:	80 91 01 02 	lds	r24, 0x0201
    3922:	90 91 02 02 	lds	r25, 0x0202
    3926:	9c 01       	movw	r18, r24
    3928:	22 0f       	add	r18, r18
    392a:	33 1f       	adc	r19, r19
    392c:	c9 01       	movw	r24, r18
    392e:	88 0f       	add	r24, r24
    3930:	99 1f       	adc	r25, r25
    3932:	88 0f       	add	r24, r24
    3934:	99 1f       	adc	r25, r25
    3936:	28 0f       	add	r18, r24
    3938:	39 1f       	adc	r19, r25
    393a:	80 91 09 02 	lds	r24, 0x0209
    393e:	88 2f       	mov	r24, r24
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	82 0f       	add	r24, r18
    3944:	93 1f       	adc	r25, r19
    3946:	c0 97       	sbiw	r24, 0x30	; 48
    3948:	90 93 02 02 	sts	0x0202, r25
    394c:	80 93 01 02 	sts	0x0201, r24
                   				 }

      	switch(num_1){
    3950:	80 91 01 02 	lds	r24, 0x0201
    3954:	90 91 02 02 	lds	r25, 0x0202
    3958:	9e a3       	std	Y+38, r25	; 0x26
    395a:	8d a3       	std	Y+37, r24	; 0x25
    395c:	2d a1       	ldd	r18, Y+37	; 0x25
    395e:	3e a1       	ldd	r19, Y+38	; 0x26
    3960:	21 30       	cpi	r18, 0x01	; 1
    3962:	31 05       	cpc	r19, r1
    3964:	31 f0       	breq	.+12     	; 0x3972 <air_conutioner+0x634>
    3966:	8d a1       	ldd	r24, Y+37	; 0x25
    3968:	9e a1       	ldd	r25, Y+38	; 0x26
    396a:	82 30       	cpi	r24, 0x02	; 2
    396c:	91 05       	cpc	r25, r1
    396e:	59 f0       	breq	.+22     	; 0x3986 <air_conutioner+0x648>
    3970:	74 c0       	rjmp	.+232    	; 0x3a5a <air_conutioner+0x71c>
      	case 1:
      		num_1=0 ;
    3972:	10 92 02 02 	sts	0x0202, r1
    3976:	10 92 01 02 	sts	0x0201, r1
      		TIMERS_TIM0SetCompareMatchVAlue(0);
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
      		cond_flag=0 ;
    3980:	10 92 e4 01 	sts	0x01E4, r1
    3984:	6a c0       	rjmp	.+212    	; 0x3a5a <air_conutioner+0x71c>
      		break ;
      	case 2 :

      		 num_1 =0 ;
    3986:	10 92 02 02 	sts	0x0202, r1
    398a:	10 92 01 02 	sts	0x0201, r1
      			 LCD_WRITE_COMMAND(lcd_Clear);
    398e:	81 e0       	ldi	r24, 0x01	; 1
    3990:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
      			 LCD_WRITE_STRING(" 1_options");
    3994:	80 e6       	ldi	r24, 0x60	; 96
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
      			 LCD_GO_TO(line2 , 0);
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	60 e0       	ldi	r22, 0x00	; 0
    39a0:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
      			 LCD_WRITE_STRING("2_Turn Off All");
    39a4:	8b e6       	ldi	r24, 0x6B	; 107
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
      			 do{
      			 	 KPD_u8KpdGetKeyState(&pinvalue);
    39ac:	89 e0       	ldi	r24, 0x09	; 9
    39ae:	92 e0       	ldi	r25, 0x02	; 2
    39b0:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
      			 }while(pinvalue == Kpd_keynotpressed);
    39b4:	80 91 09 02 	lds	r24, 0x0209
    39b8:	8f 3f       	cpi	r24, 0xFF	; 255
    39ba:	c1 f3       	breq	.-16     	; 0x39ac <air_conutioner+0x66e>
      			 sign_1 = pinvalue -'0';
    39bc:	80 91 09 02 	lds	r24, 0x0209
    39c0:	80 53       	subi	r24, 0x30	; 48
    39c2:	80 93 0a 02 	sts	0x020A, r24
      			 if(sign_1 >=0 && sign_1<=9 ){
    39c6:	80 91 0a 02 	lds	r24, 0x020A
    39ca:	8a 30       	cpi	r24, 0x0A	; 10
    39cc:	c8 f4       	brcc	.+50     	; 0x3a00 <air_conutioner+0x6c2>
      				  num_1 = (num_1*10) + (pinvalue -'0');
    39ce:	80 91 01 02 	lds	r24, 0x0201
    39d2:	90 91 02 02 	lds	r25, 0x0202
    39d6:	9c 01       	movw	r18, r24
    39d8:	22 0f       	add	r18, r18
    39da:	33 1f       	adc	r19, r19
    39dc:	c9 01       	movw	r24, r18
    39de:	88 0f       	add	r24, r24
    39e0:	99 1f       	adc	r25, r25
    39e2:	88 0f       	add	r24, r24
    39e4:	99 1f       	adc	r25, r25
    39e6:	28 0f       	add	r18, r24
    39e8:	39 1f       	adc	r19, r25
    39ea:	80 91 09 02 	lds	r24, 0x0209
    39ee:	88 2f       	mov	r24, r24
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	82 0f       	add	r24, r18
    39f4:	93 1f       	adc	r25, r19
    39f6:	c0 97       	sbiw	r24, 0x30	; 48
    39f8:	90 93 02 02 	sts	0x0202, r25
    39fc:	80 93 01 02 	sts	0x0201, r24
      				  }
      			 if ( num_1 == 2){  // turn off all devices
    3a00:	80 91 01 02 	lds	r24, 0x0201
    3a04:	90 91 02 02 	lds	r25, 0x0202
    3a08:	82 30       	cpi	r24, 0x02	; 2
    3a0a:	91 05       	cpc	r25, r1
    3a0c:	31 f5       	brne	.+76     	; 0x3a5a <air_conutioner+0x71c>

      			  DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_LOW );   // room led off
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	64 e0       	ldi	r22, 0x04	; 4
    3a12:	40 e0       	ldi	r20, 0x00	; 0
    3a14:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
      			  TIMERS_TIM0SetCompareMatchVAlue(0 ); // air conditioner off
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
      			  if(window_flag == 1 ){
    3a1e:	80 91 04 02 	lds	r24, 0x0204
    3a22:	81 30       	cpi	r24, 0x01	; 1
    3a24:	91 f4       	brne	.+36     	; 0x3a4a <air_conutioner+0x70c>
      			 	  		  for(int i=0 ; i<24 ; i++){       // window off
    3a26:	1e 8e       	std	Y+30, r1	; 0x1e
    3a28:	1d 8e       	std	Y+29, r1	; 0x1d
    3a2a:	0a c0       	rjmp	.+20     	; 0x3a40 <air_conutioner+0x702>
      			 	  		  		      STEPPER_voidmotion(CLOCK_WISE , 15);
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	6f e0       	ldi	r22, 0x0F	; 15
    3a30:	70 e0       	ldi	r23, 0x00	; 0
    3a32:	0e 94 88 10 	call	0x2110	; 0x2110 <STEPPER_voidmotion>
      			 if ( num_1 == 2){  // turn off all devices

      			  DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_LOW );   // room led off
      			  TIMERS_TIM0SetCompareMatchVAlue(0 ); // air conditioner off
      			  if(window_flag == 1 ){
      			 	  		  for(int i=0 ; i<24 ; i++){       // window off
    3a36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a3a:	01 96       	adiw	r24, 0x01	; 1
    3a3c:	9e 8f       	std	Y+30, r25	; 0x1e
    3a3e:	8d 8f       	std	Y+29, r24	; 0x1d
    3a40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a44:	88 31       	cpi	r24, 0x18	; 24
    3a46:	91 05       	cpc	r25, r1
    3a48:	8c f3       	brlt	.-30     	; 0x3a2c <air_conutioner+0x6ee>
      			 	  		  		      STEPPER_voidmotion(CLOCK_WISE , 15);
      			 	  		  		 	 }
      			 	  		     	 }
      			  cond_flag=0 ;
    3a4a:	10 92 e4 01 	sts	0x01E4, r1
      		     num_1=0 ;
    3a4e:	10 92 02 02 	sts	0x0202, r1
    3a52:	10 92 01 02 	sts	0x0201, r1
                   				     window_flag=0 ;
    3a56:	10 92 04 02 	sts	0x0204, r1

                   	  }

      	}}

       	 	 fla=0;
    3a5a:	10 92 05 02 	sts	0x0205, r1
    3a5e:	91 c0       	rjmp	.+290    	; 0x3b82 <air_conutioner+0x844>
		    break ;

		    }
		 	     else if( f == 1){
    3a60:	8c a1       	ldd	r24, Y+36	; 0x24
    3a62:	81 30       	cpi	r24, 0x01	; 1
    3a64:	09 f0       	breq	.+2      	; 0x3a68 <air_conutioner+0x72a>
    3a66:	88 c0       	rjmp	.+272    	; 0x3b78 <air_conutioner+0x83a>
		 	      	    	num_1 =0 ;
    3a68:	10 92 02 02 	sts	0x0202, r1
    3a6c:	10 92 01 02 	sts	0x0201, r1
                        TIMERS_TIM0SetCompareMatchVAlue(0);
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
		 	    	    	 	    LCD_WRITE_COMMAND(lcd_Clear);
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
		 	    	    	 	    LCD_WRITE_STRING(" conditioner closed");
    3a7c:	82 ef       	ldi	r24, 0xF2	; 242
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	aa ef       	ldi	r26, 0xFA	; 250
    3a8a:	b4 e4       	ldi	r27, 0x44	; 68
    3a8c:	8b 87       	std	Y+11, r24	; 0x0b
    3a8e:	9c 87       	std	Y+12, r25	; 0x0c
    3a90:	ad 87       	std	Y+13, r26	; 0x0d
    3a92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a94:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a96:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	4a ef       	ldi	r20, 0xFA	; 250
    3aa2:	54 e4       	ldi	r21, 0x44	; 68
    3aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	8f 83       	std	Y+7, r24	; 0x07
    3aae:	98 87       	std	Y+8, r25	; 0x08
    3ab0:	a9 87       	std	Y+9, r26	; 0x09
    3ab2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab6:	78 85       	ldd	r23, Y+8	; 0x08
    3ab8:	89 85       	ldd	r24, Y+9	; 0x09
    3aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3abc:	20 e0       	ldi	r18, 0x00	; 0
    3abe:	30 e0       	ldi	r19, 0x00	; 0
    3ac0:	40 e8       	ldi	r20, 0x80	; 128
    3ac2:	5f e3       	ldi	r21, 0x3F	; 63
    3ac4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ac8:	88 23       	and	r24, r24
    3aca:	2c f4       	brge	.+10     	; 0x3ad6 <air_conutioner+0x798>
		__ticks = 1;
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	9e 83       	std	Y+6, r25	; 0x06
    3ad2:	8d 83       	std	Y+5, r24	; 0x05
    3ad4:	3f c0       	rjmp	.+126    	; 0x3b54 <air_conutioner+0x816>
	else if (__tmp > 65535)
    3ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad8:	78 85       	ldd	r23, Y+8	; 0x08
    3ada:	89 85       	ldd	r24, Y+9	; 0x09
    3adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ade:	20 e0       	ldi	r18, 0x00	; 0
    3ae0:	3f ef       	ldi	r19, 0xFF	; 255
    3ae2:	4f e7       	ldi	r20, 0x7F	; 127
    3ae4:	57 e4       	ldi	r21, 0x47	; 71
    3ae6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aea:	18 16       	cp	r1, r24
    3aec:	4c f5       	brge	.+82     	; 0x3b40 <air_conutioner+0x802>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aee:	6b 85       	ldd	r22, Y+11	; 0x0b
    3af0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3af2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3af4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	40 e2       	ldi	r20, 0x20	; 32
    3afc:	51 e4       	ldi	r21, 0x41	; 65
    3afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	bc 01       	movw	r22, r24
    3b08:	cd 01       	movw	r24, r26
    3b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	9e 83       	std	Y+6, r25	; 0x06
    3b14:	8d 83       	std	Y+5, r24	; 0x05
    3b16:	0f c0       	rjmp	.+30     	; 0x3b36 <air_conutioner+0x7f8>
    3b18:	88 ec       	ldi	r24, 0xC8	; 200
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	9c 83       	std	Y+4, r25	; 0x04
    3b1e:	8b 83       	std	Y+3, r24	; 0x03
    3b20:	8b 81       	ldd	r24, Y+3	; 0x03
    3b22:	9c 81       	ldd	r25, Y+4	; 0x04
    3b24:	01 97       	sbiw	r24, 0x01	; 1
    3b26:	f1 f7       	brne	.-4      	; 0x3b24 <air_conutioner+0x7e6>
    3b28:	9c 83       	std	Y+4, r25	; 0x04
    3b2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b30:	01 97       	sbiw	r24, 0x01	; 1
    3b32:	9e 83       	std	Y+6, r25	; 0x06
    3b34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b36:	8d 81       	ldd	r24, Y+5	; 0x05
    3b38:	9e 81       	ldd	r25, Y+6	; 0x06
    3b3a:	00 97       	sbiw	r24, 0x00	; 0
    3b3c:	69 f7       	brne	.-38     	; 0x3b18 <air_conutioner+0x7da>
    3b3e:	14 c0       	rjmp	.+40     	; 0x3b68 <air_conutioner+0x82a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b40:	6f 81       	ldd	r22, Y+7	; 0x07
    3b42:	78 85       	ldd	r23, Y+8	; 0x08
    3b44:	89 85       	ldd	r24, Y+9	; 0x09
    3b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	9e 83       	std	Y+6, r25	; 0x06
    3b52:	8d 83       	std	Y+5, r24	; 0x05
    3b54:	8d 81       	ldd	r24, Y+5	; 0x05
    3b56:	9e 81       	ldd	r25, Y+6	; 0x06
    3b58:	9a 83       	std	Y+2, r25	; 0x02
    3b5a:	89 83       	std	Y+1, r24	; 0x01
    3b5c:	89 81       	ldd	r24, Y+1	; 0x01
    3b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	f1 f7       	brne	.-4      	; 0x3b60 <air_conutioner+0x822>
    3b64:	9a 83       	std	Y+2, r25	; 0x02
    3b66:	89 83       	std	Y+1, r24	; 0x01
		 	    	    	 	    _delay_ms(2000);
		 	    	    	 	    cond_flag = 0 ;
    3b68:	10 92 e4 01 	sts	0x01E4, r1
		 	    	    	        cond_flag =0 ;
    3b6c:	10 92 e4 01 	sts	0x01E4, r1
		 	    	    	        fla = 1 ;
    3b70:	81 e0       	ldi	r24, 0x01	; 1
    3b72:	80 93 05 02 	sts	0x0205, r24
    3b76:	05 c0       	rjmp	.+10     	; 0x3b82 <air_conutioner+0x844>
  }
	break ;
	}}
	 break ;
	 case 1:
		 while(fla ==1){
    3b78:	80 91 05 02 	lds	r24, 0x0205
    3b7c:	81 30       	cpi	r24, 0x01	; 1
    3b7e:	09 f4       	brne	.+2      	; 0x3b82 <air_conutioner+0x844>
    3b80:	48 cd       	rjmp	.-1392   	; 0x3612 <air_conutioner+0x2d4>





  return cond_flag;
    3b82:	80 91 e4 01 	lds	r24, 0x01E4
}
    3b86:	ae 96       	adiw	r28, 0x2e	; 46
    3b88:	0f b6       	in	r0, 0x3f	; 63
    3b8a:	f8 94       	cli
    3b8c:	de bf       	out	0x3e, r29	; 62
    3b8e:	0f be       	out	0x3f, r0	; 63
    3b90:	cd bf       	out	0x3d, r28	; 61
    3b92:	cf 91       	pop	r28
    3b94:	df 91       	pop	r29
    3b96:	08 95       	ret

00003b98 <setting>:


void setting(u16 num){
    3b98:	0f 93       	push	r16
    3b9a:	1f 93       	push	r17
    3b9c:	df 93       	push	r29
    3b9e:	cf 93       	push	r28
    3ba0:	cd b7       	in	r28, 0x3d	; 61
    3ba2:	de b7       	in	r29, 0x3e	; 62
    3ba4:	c2 55       	subi	r28, 0x52	; 82
    3ba6:	d0 40       	sbci	r29, 0x00	; 0
    3ba8:	0f b6       	in	r0, 0x3f	; 63
    3baa:	f8 94       	cli
    3bac:	de bf       	out	0x3e, r29	; 62
    3bae:	0f be       	out	0x3f, r0	; 63
    3bb0:	cd bf       	out	0x3d, r28	; 61
    3bb2:	fe 01       	movw	r30, r28
    3bb4:	e1 5b       	subi	r30, 0xB1	; 177
    3bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb8:	91 83       	std	Z+1, r25	; 0x01
    3bba:	80 83       	st	Z, r24
	static u8  c=0 ,  w=0;
	u16 coun =0 ;
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	e3 5b       	subi	r30, 0xB3	; 179
    3bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc2:	11 82       	std	Z+1, r1	; 0x01
    3bc4:	10 82       	st	Z, r1
	 u16 analog ;
	 u16 tamp ;
	ADC_GetDigitalValueAsynch(ADC_CHANNEL1,&notification);
    3bc6:	2d ec       	ldi	r18, 0xCD	; 205
    3bc8:	37 e1       	ldi	r19, 0x17	; 23
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	b9 01       	movw	r22, r18
    3bce:	0e 94 69 06 	call	0xcd2	; 0xcd2 <ADC_GetDigitalValueAsynch>

 switch (num){
    3bd2:	fe 01       	movw	r30, r28
    3bd4:	e1 5b       	subi	r30, 0xB1	; 177
    3bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd8:	80 81       	ld	r24, Z
    3bda:	91 81       	ldd	r25, Z+1	; 0x01
    3bdc:	63 96       	adiw	r28, 0x13	; 19
    3bde:	9f af       	std	Y+63, r25	; 0x3f
    3be0:	8e af       	std	Y+62, r24	; 0x3e
    3be2:	63 97       	sbiw	r28, 0x13	; 19
    3be4:	63 96       	adiw	r28, 0x13	; 19
    3be6:	ee ad       	ldd	r30, Y+62	; 0x3e
    3be8:	ff ad       	ldd	r31, Y+63	; 0x3f
    3bea:	63 97       	sbiw	r28, 0x13	; 19
    3bec:	e2 30       	cpi	r30, 0x02	; 2
    3bee:	f1 05       	cpc	r31, r1
    3bf0:	09 f4       	brne	.+2      	; 0x3bf4 <setting+0x5c>
    3bf2:	f6 c0       	rjmp	.+492    	; 0x3de0 <setting+0x248>
    3bf4:	63 96       	adiw	r28, 0x13	; 19
    3bf6:	8e ad       	ldd	r24, Y+62	; 0x3e
    3bf8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3bfa:	63 97       	sbiw	r28, 0x13	; 19
    3bfc:	83 30       	cpi	r24, 0x03	; 3
    3bfe:	91 05       	cpc	r25, r1
    3c00:	40 f4       	brcc	.+16     	; 0x3c12 <setting+0x7a>
    3c02:	63 96       	adiw	r28, 0x13	; 19
    3c04:	ee ad       	ldd	r30, Y+62	; 0x3e
    3c06:	ff ad       	ldd	r31, Y+63	; 0x3f
    3c08:	63 97       	sbiw	r28, 0x13	; 19
    3c0a:	e1 30       	cpi	r30, 0x01	; 1
    3c0c:	f1 05       	cpc	r31, r1
    3c0e:	91 f0       	breq	.+36     	; 0x3c34 <setting+0x9c>
    3c10:	9e c4       	rjmp	.+2364   	; 0x454e <setting+0x9b6>
    3c12:	63 96       	adiw	r28, 0x13	; 19
    3c14:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c16:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c18:	63 97       	sbiw	r28, 0x13	; 19
    3c1a:	83 30       	cpi	r24, 0x03	; 3
    3c1c:	91 05       	cpc	r25, r1
    3c1e:	09 f4       	brne	.+2      	; 0x3c22 <setting+0x8a>
    3c20:	9e c1       	rjmp	.+828    	; 0x3f5e <setting+0x3c6>
    3c22:	63 96       	adiw	r28, 0x13	; 19
    3c24:	ee ad       	ldd	r30, Y+62	; 0x3e
    3c26:	ff ad       	ldd	r31, Y+63	; 0x3f
    3c28:	63 97       	sbiw	r28, 0x13	; 19
    3c2a:	e4 30       	cpi	r30, 0x04	; 4
    3c2c:	f1 05       	cpc	r31, r1
    3c2e:	09 f4       	brne	.+2      	; 0x3c32 <setting+0x9a>
    3c30:	aa c2       	rjmp	.+1364   	; 0x4186 <setting+0x5ee>
    3c32:	8d c4       	rjmp	.+2330   	; 0x454e <setting+0x9b6>

 case 1 :
	 // window
	 Lcd_voidDisplayNumber(num_1);
    3c34:	80 91 01 02 	lds	r24, 0x0201
    3c38:	90 91 02 02 	lds	r25, 0x0202
    3c3c:	cc 01       	movw	r24, r24
    3c3e:	a0 e0       	ldi	r26, 0x00	; 0
    3c40:	b0 e0       	ldi	r27, 0x00	; 0
    3c42:	bc 01       	movw	r22, r24
    3c44:	cd 01       	movw	r24, r26
    3c46:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Lcd_voidDisplayNumber>
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	ed 5b       	subi	r30, 0xBD	; 189
    3c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c50:	80 e0       	ldi	r24, 0x00	; 0
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	aa ef       	ldi	r26, 0xFA	; 250
    3c56:	b3 e4       	ldi	r27, 0x43	; 67
    3c58:	80 83       	st	Z, r24
    3c5a:	91 83       	std	Z+1, r25	; 0x01
    3c5c:	a2 83       	std	Z+2, r26	; 0x02
    3c5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c60:	8e 01       	movw	r16, r28
    3c62:	01 5c       	subi	r16, 0xC1	; 193
    3c64:	1f 4f       	sbci	r17, 0xFF	; 255
    3c66:	fe 01       	movw	r30, r28
    3c68:	ed 5b       	subi	r30, 0xBD	; 189
    3c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6c:	60 81       	ld	r22, Z
    3c6e:	71 81       	ldd	r23, Z+1	; 0x01
    3c70:	82 81       	ldd	r24, Z+2	; 0x02
    3c72:	93 81       	ldd	r25, Z+3	; 0x03
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	4a ef       	ldi	r20, 0xFA	; 250
    3c7a:	54 e4       	ldi	r21, 0x44	; 68
    3c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c80:	dc 01       	movw	r26, r24
    3c82:	cb 01       	movw	r24, r22
    3c84:	f8 01       	movw	r30, r16
    3c86:	80 83       	st	Z, r24
    3c88:	91 83       	std	Z+1, r25	; 0x01
    3c8a:	a2 83       	std	Z+2, r26	; 0x02
    3c8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c8e:	fe 01       	movw	r30, r28
    3c90:	ff 96       	adiw	r30, 0x3f	; 63
    3c92:	60 81       	ld	r22, Z
    3c94:	71 81       	ldd	r23, Z+1	; 0x01
    3c96:	82 81       	ldd	r24, Z+2	; 0x02
    3c98:	93 81       	ldd	r25, Z+3	; 0x03
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	40 e8       	ldi	r20, 0x80	; 128
    3ca0:	5f e3       	ldi	r21, 0x3F	; 63
    3ca2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ca6:	88 23       	and	r24, r24
    3ca8:	2c f4       	brge	.+10     	; 0x3cb4 <setting+0x11c>
		__ticks = 1;
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	9e af       	std	Y+62, r25	; 0x3e
    3cb0:	8d af       	std	Y+61, r24	; 0x3d
    3cb2:	46 c0       	rjmp	.+140    	; 0x3d40 <setting+0x1a8>
	else if (__tmp > 65535)
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	ff 96       	adiw	r30, 0x3f	; 63
    3cb8:	60 81       	ld	r22, Z
    3cba:	71 81       	ldd	r23, Z+1	; 0x01
    3cbc:	82 81       	ldd	r24, Z+2	; 0x02
    3cbe:	93 81       	ldd	r25, Z+3	; 0x03
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	3f ef       	ldi	r19, 0xFF	; 255
    3cc4:	4f e7       	ldi	r20, 0x7F	; 127
    3cc6:	57 e4       	ldi	r21, 0x47	; 71
    3cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ccc:	18 16       	cp	r1, r24
    3cce:	64 f5       	brge	.+88     	; 0x3d28 <setting+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd0:	fe 01       	movw	r30, r28
    3cd2:	ed 5b       	subi	r30, 0xBD	; 189
    3cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd6:	60 81       	ld	r22, Z
    3cd8:	71 81       	ldd	r23, Z+1	; 0x01
    3cda:	82 81       	ldd	r24, Z+2	; 0x02
    3cdc:	93 81       	ldd	r25, Z+3	; 0x03
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	40 e2       	ldi	r20, 0x20	; 32
    3ce4:	51 e4       	ldi	r21, 0x41	; 65
    3ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	bc 01       	movw	r22, r24
    3cf0:	cd 01       	movw	r24, r26
    3cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	9e af       	std	Y+62, r25	; 0x3e
    3cfc:	8d af       	std	Y+61, r24	; 0x3d
    3cfe:	0f c0       	rjmp	.+30     	; 0x3d1e <setting+0x186>
    3d00:	88 ec       	ldi	r24, 0xC8	; 200
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	9c af       	std	Y+60, r25	; 0x3c
    3d06:	8b af       	std	Y+59, r24	; 0x3b
    3d08:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d0a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3d0c:	01 97       	sbiw	r24, 0x01	; 1
    3d0e:	f1 f7       	brne	.-4      	; 0x3d0c <setting+0x174>
    3d10:	9c af       	std	Y+60, r25	; 0x3c
    3d12:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d14:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d16:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d18:	01 97       	sbiw	r24, 0x01	; 1
    3d1a:	9e af       	std	Y+62, r25	; 0x3e
    3d1c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d20:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d22:	00 97       	sbiw	r24, 0x00	; 0
    3d24:	69 f7       	brne	.-38     	; 0x3d00 <setting+0x168>
    3d26:	16 c0       	rjmp	.+44     	; 0x3d54 <setting+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d28:	fe 01       	movw	r30, r28
    3d2a:	ff 96       	adiw	r30, 0x3f	; 63
    3d2c:	60 81       	ld	r22, Z
    3d2e:	71 81       	ldd	r23, Z+1	; 0x01
    3d30:	82 81       	ldd	r24, Z+2	; 0x02
    3d32:	93 81       	ldd	r25, Z+3	; 0x03
    3d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d38:	dc 01       	movw	r26, r24
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	9e af       	std	Y+62, r25	; 0x3e
    3d3e:	8d af       	std	Y+61, r24	; 0x3d
    3d40:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d42:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d44:	9a af       	std	Y+58, r25	; 0x3a
    3d46:	89 af       	std	Y+57, r24	; 0x39
    3d48:	89 ad       	ldd	r24, Y+57	; 0x39
    3d4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	f1 f7       	brne	.-4      	; 0x3d4c <setting+0x1b4>
    3d50:	9a af       	std	Y+58, r25	; 0x3a
    3d52:	89 af       	std	Y+57, r24	; 0x39
	 _delay_ms(500);
	 num_1=0;
    3d54:	10 92 02 02 	sts	0x0202, r1
    3d58:	10 92 01 02 	sts	0x0201, r1
	 LCD_WRITE_COMMAND(lcd_Clear);
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
	 LCD_WRITE_STRING(" 1-Close 2-fully");
    3d62:	86 e0       	ldi	r24, 0x06	; 6
    3d64:	91 e0       	ldi	r25, 0x01	; 1
    3d66:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
	 LCD_GO_TO(line2 , 0);
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	60 e0       	ldi	r22, 0x00	; 0
    3d6e:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
	 LCD_WRITE_STRING("3-Partial 4-back");
    3d72:	87 e1       	ldi	r24, 0x17	; 23
    3d74:	91 e0       	ldi	r25, 0x01	; 1
    3d76:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
	 do{
	 	 KPD_u8KpdGetKeyState(&pinvalue);
    3d7a:	89 e0       	ldi	r24, 0x09	; 9
    3d7c:	92 e0       	ldi	r25, 0x02	; 2
    3d7e:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
		}while(pinvalue == Kpd_keynotpressed);
    3d82:	80 91 09 02 	lds	r24, 0x0209
    3d86:	8f 3f       	cpi	r24, 0xFF	; 255
    3d88:	c1 f3       	breq	.-16     	; 0x3d7a <setting+0x1e2>
	 sign_1 = pinvalue -'0';
    3d8a:	80 91 09 02 	lds	r24, 0x0209
    3d8e:	80 53       	subi	r24, 0x30	; 48
    3d90:	80 93 0a 02 	sts	0x020A, r24
	 if(sign_1 >=0 && sign_1<=9 ){
    3d94:	80 91 0a 02 	lds	r24, 0x020A
    3d98:	8a 30       	cpi	r24, 0x0A	; 10
    3d9a:	c8 f4       	brcc	.+50     	; 0x3dce <setting+0x236>
	  num_1 = (num_1*10) + (pinvalue -'0');
    3d9c:	80 91 01 02 	lds	r24, 0x0201
    3da0:	90 91 02 02 	lds	r25, 0x0202
    3da4:	9c 01       	movw	r18, r24
    3da6:	22 0f       	add	r18, r18
    3da8:	33 1f       	adc	r19, r19
    3daa:	c9 01       	movw	r24, r18
    3dac:	88 0f       	add	r24, r24
    3dae:	99 1f       	adc	r25, r25
    3db0:	88 0f       	add	r24, r24
    3db2:	99 1f       	adc	r25, r25
    3db4:	28 0f       	add	r18, r24
    3db6:	39 1f       	adc	r19, r25
    3db8:	80 91 09 02 	lds	r24, 0x0209
    3dbc:	88 2f       	mov	r24, r24
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	82 0f       	add	r24, r18
    3dc2:	93 1f       	adc	r25, r19
    3dc4:	c0 97       	sbiw	r24, 0x30	; 48
    3dc6:	90 93 02 02 	sts	0x0202, r25
    3dca:	80 93 01 02 	sts	0x0201, r24
	 	}
  w=window(num_1);
    3dce:	80 91 01 02 	lds	r24, 0x0201
    3dd2:	90 91 02 02 	lds	r25, 0x0202
    3dd6:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <window>
    3dda:	80 93 06 02 	sts	0x0206, r24
    3dde:	b7 c3       	rjmp	.+1902   	; 0x454e <setting+0x9b6>
	 break ;
 case 2:
	 Lcd_voidDisplayNumber(num_1);
    3de0:	80 91 01 02 	lds	r24, 0x0201
    3de4:	90 91 02 02 	lds	r25, 0x0202
    3de8:	cc 01       	movw	r24, r24
    3dea:	a0 e0       	ldi	r26, 0x00	; 0
    3dec:	b0 e0       	ldi	r27, 0x00	; 0
    3dee:	bc 01       	movw	r22, r24
    3df0:	cd 01       	movw	r24, r26
    3df2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Lcd_voidDisplayNumber>
    3df6:	80 e0       	ldi	r24, 0x00	; 0
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	aa ef       	ldi	r26, 0xFA	; 250
    3dfc:	b3 e4       	ldi	r27, 0x43	; 67
    3dfe:	8d ab       	std	Y+53, r24	; 0x35
    3e00:	9e ab       	std	Y+54, r25	; 0x36
    3e02:	af ab       	std	Y+55, r26	; 0x37
    3e04:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e06:	6d a9       	ldd	r22, Y+53	; 0x35
    3e08:	7e a9       	ldd	r23, Y+54	; 0x36
    3e0a:	8f a9       	ldd	r24, Y+55	; 0x37
    3e0c:	98 ad       	ldd	r25, Y+56	; 0x38
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	4a ef       	ldi	r20, 0xFA	; 250
    3e14:	54 e4       	ldi	r21, 0x44	; 68
    3e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	cb 01       	movw	r24, r22
    3e1e:	89 ab       	std	Y+49, r24	; 0x31
    3e20:	9a ab       	std	Y+50, r25	; 0x32
    3e22:	ab ab       	std	Y+51, r26	; 0x33
    3e24:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3e26:	69 a9       	ldd	r22, Y+49	; 0x31
    3e28:	7a a9       	ldd	r23, Y+50	; 0x32
    3e2a:	8b a9       	ldd	r24, Y+51	; 0x33
    3e2c:	9c a9       	ldd	r25, Y+52	; 0x34
    3e2e:	20 e0       	ldi	r18, 0x00	; 0
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	40 e8       	ldi	r20, 0x80	; 128
    3e34:	5f e3       	ldi	r21, 0x3F	; 63
    3e36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e3a:	88 23       	and	r24, r24
    3e3c:	2c f4       	brge	.+10     	; 0x3e48 <setting+0x2b0>
		__ticks = 1;
    3e3e:	81 e0       	ldi	r24, 0x01	; 1
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	98 ab       	std	Y+48, r25	; 0x30
    3e44:	8f a7       	std	Y+47, r24	; 0x2f
    3e46:	3f c0       	rjmp	.+126    	; 0x3ec6 <setting+0x32e>
	else if (__tmp > 65535)
    3e48:	69 a9       	ldd	r22, Y+49	; 0x31
    3e4a:	7a a9       	ldd	r23, Y+50	; 0x32
    3e4c:	8b a9       	ldd	r24, Y+51	; 0x33
    3e4e:	9c a9       	ldd	r25, Y+52	; 0x34
    3e50:	20 e0       	ldi	r18, 0x00	; 0
    3e52:	3f ef       	ldi	r19, 0xFF	; 255
    3e54:	4f e7       	ldi	r20, 0x7F	; 127
    3e56:	57 e4       	ldi	r21, 0x47	; 71
    3e58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e5c:	18 16       	cp	r1, r24
    3e5e:	4c f5       	brge	.+82     	; 0x3eb2 <setting+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e60:	6d a9       	ldd	r22, Y+53	; 0x35
    3e62:	7e a9       	ldd	r23, Y+54	; 0x36
    3e64:	8f a9       	ldd	r24, Y+55	; 0x37
    3e66:	98 ad       	ldd	r25, Y+56	; 0x38
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	40 e2       	ldi	r20, 0x20	; 32
    3e6e:	51 e4       	ldi	r21, 0x41	; 65
    3e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e74:	dc 01       	movw	r26, r24
    3e76:	cb 01       	movw	r24, r22
    3e78:	bc 01       	movw	r22, r24
    3e7a:	cd 01       	movw	r24, r26
    3e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e80:	dc 01       	movw	r26, r24
    3e82:	cb 01       	movw	r24, r22
    3e84:	98 ab       	std	Y+48, r25	; 0x30
    3e86:	8f a7       	std	Y+47, r24	; 0x2f
    3e88:	0f c0       	rjmp	.+30     	; 0x3ea8 <setting+0x310>
    3e8a:	88 ec       	ldi	r24, 0xC8	; 200
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	9e a7       	std	Y+46, r25	; 0x2e
    3e90:	8d a7       	std	Y+45, r24	; 0x2d
    3e92:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e94:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e96:	01 97       	sbiw	r24, 0x01	; 1
    3e98:	f1 f7       	brne	.-4      	; 0x3e96 <setting+0x2fe>
    3e9a:	9e a7       	std	Y+46, r25	; 0x2e
    3e9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ea0:	98 a9       	ldd	r25, Y+48	; 0x30
    3ea2:	01 97       	sbiw	r24, 0x01	; 1
    3ea4:	98 ab       	std	Y+48, r25	; 0x30
    3ea6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3eaa:	98 a9       	ldd	r25, Y+48	; 0x30
    3eac:	00 97       	sbiw	r24, 0x00	; 0
    3eae:	69 f7       	brne	.-38     	; 0x3e8a <setting+0x2f2>
    3eb0:	14 c0       	rjmp	.+40     	; 0x3eda <setting+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eb2:	69 a9       	ldd	r22, Y+49	; 0x31
    3eb4:	7a a9       	ldd	r23, Y+50	; 0x32
    3eb6:	8b a9       	ldd	r24, Y+51	; 0x33
    3eb8:	9c a9       	ldd	r25, Y+52	; 0x34
    3eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ebe:	dc 01       	movw	r26, r24
    3ec0:	cb 01       	movw	r24, r22
    3ec2:	98 ab       	std	Y+48, r25	; 0x30
    3ec4:	8f a7       	std	Y+47, r24	; 0x2f
    3ec6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ec8:	98 a9       	ldd	r25, Y+48	; 0x30
    3eca:	9c a7       	std	Y+44, r25	; 0x2c
    3ecc:	8b a7       	std	Y+43, r24	; 0x2b
    3ece:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ed0:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ed2:	01 97       	sbiw	r24, 0x01	; 1
    3ed4:	f1 f7       	brne	.-4      	; 0x3ed2 <setting+0x33a>
    3ed6:	9c a7       	std	Y+44, r25	; 0x2c
    3ed8:	8b a7       	std	Y+43, r24	; 0x2b
	 _delay_ms(500);
	 num_1=0;
    3eda:	10 92 02 02 	sts	0x0202, r1
    3ede:	10 92 01 02 	sts	0x0201, r1
	 LCD_WRITE_COMMAND(lcd_Clear);
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
	 LCD_WRITE_STRING(" 1-OFF  2-ON");
    3ee8:	88 e2       	ldi	r24, 0x28	; 40
    3eea:	91 e0       	ldi	r25, 0x01	; 1
    3eec:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
	 LCD_GO_TO(line2 , 0);
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	60 e0       	ldi	r22, 0x00	; 0
    3ef4:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
	 LCD_WRITE_STRING(" 3-back  ");
    3ef8:	85 e3       	ldi	r24, 0x35	; 53
    3efa:	91 e0       	ldi	r25, 0x01	; 1
    3efc:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
	 do{
	 	KPD_u8KpdGetKeyState(&pinvalue);
    3f00:	89 e0       	ldi	r24, 0x09	; 9
    3f02:	92 e0       	ldi	r25, 0x02	; 2
    3f04:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
	 	}while(pinvalue == Kpd_keynotpressed);
    3f08:	80 91 09 02 	lds	r24, 0x0209
    3f0c:	8f 3f       	cpi	r24, 0xFF	; 255
    3f0e:	c1 f3       	breq	.-16     	; 0x3f00 <setting+0x368>
	  sign_1 = pinvalue -'0';
    3f10:	80 91 09 02 	lds	r24, 0x0209
    3f14:	80 53       	subi	r24, 0x30	; 48
    3f16:	80 93 0a 02 	sts	0x020A, r24
	  if(sign_1 >=0 && sign_1<=9 ){
    3f1a:	80 91 0a 02 	lds	r24, 0x020A
    3f1e:	8a 30       	cpi	r24, 0x0A	; 10
    3f20:	c8 f4       	brcc	.+50     	; 0x3f54 <setting+0x3bc>
	  num_1 = (num_1*10) + (pinvalue -'0');
    3f22:	80 91 01 02 	lds	r24, 0x0201
    3f26:	90 91 02 02 	lds	r25, 0x0202
    3f2a:	9c 01       	movw	r18, r24
    3f2c:	22 0f       	add	r18, r18
    3f2e:	33 1f       	adc	r19, r19
    3f30:	c9 01       	movw	r24, r18
    3f32:	88 0f       	add	r24, r24
    3f34:	99 1f       	adc	r25, r25
    3f36:	88 0f       	add	r24, r24
    3f38:	99 1f       	adc	r25, r25
    3f3a:	28 0f       	add	r18, r24
    3f3c:	39 1f       	adc	r19, r25
    3f3e:	80 91 09 02 	lds	r24, 0x0209
    3f42:	88 2f       	mov	r24, r24
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	82 0f       	add	r24, r18
    3f48:	93 1f       	adc	r25, r19
    3f4a:	c0 97       	sbiw	r24, 0x30	; 48
    3f4c:	90 93 02 02 	sts	0x0202, r25
    3f50:	80 93 01 02 	sts	0x0201, r24
	 	 	}
   led(w);
    3f54:	80 91 06 02 	lds	r24, 0x0206
    3f58:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <led>
    3f5c:	f8 c2       	rjmp	.+1520   	; 0x454e <setting+0x9b6>
	 break ;

 case 3:
	 Lcd_voidDisplayNumber(num_1);
    3f5e:	80 91 01 02 	lds	r24, 0x0201
    3f62:	90 91 02 02 	lds	r25, 0x0202
    3f66:	cc 01       	movw	r24, r24
    3f68:	a0 e0       	ldi	r26, 0x00	; 0
    3f6a:	b0 e0       	ldi	r27, 0x00	; 0
    3f6c:	bc 01       	movw	r22, r24
    3f6e:	cd 01       	movw	r24, r26
    3f70:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Lcd_voidDisplayNumber>
    3f74:	80 e0       	ldi	r24, 0x00	; 0
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	aa ef       	ldi	r26, 0xFA	; 250
    3f7a:	b3 e4       	ldi	r27, 0x43	; 67
    3f7c:	8f a3       	std	Y+39, r24	; 0x27
    3f7e:	98 a7       	std	Y+40, r25	; 0x28
    3f80:	a9 a7       	std	Y+41, r26	; 0x29
    3f82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f84:	6f a1       	ldd	r22, Y+39	; 0x27
    3f86:	78 a5       	ldd	r23, Y+40	; 0x28
    3f88:	89 a5       	ldd	r24, Y+41	; 0x29
    3f8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	30 e0       	ldi	r19, 0x00	; 0
    3f90:	4a ef       	ldi	r20, 0xFA	; 250
    3f92:	54 e4       	ldi	r21, 0x44	; 68
    3f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f98:	dc 01       	movw	r26, r24
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	8b a3       	std	Y+35, r24	; 0x23
    3f9e:	9c a3       	std	Y+36, r25	; 0x24
    3fa0:	ad a3       	std	Y+37, r26	; 0x25
    3fa2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3fa4:	6b a1       	ldd	r22, Y+35	; 0x23
    3fa6:	7c a1       	ldd	r23, Y+36	; 0x24
    3fa8:	8d a1       	ldd	r24, Y+37	; 0x25
    3faa:	9e a1       	ldd	r25, Y+38	; 0x26
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	40 e8       	ldi	r20, 0x80	; 128
    3fb2:	5f e3       	ldi	r21, 0x3F	; 63
    3fb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fb8:	88 23       	and	r24, r24
    3fba:	2c f4       	brge	.+10     	; 0x3fc6 <setting+0x42e>
		__ticks = 1;
    3fbc:	81 e0       	ldi	r24, 0x01	; 1
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	9a a3       	std	Y+34, r25	; 0x22
    3fc2:	89 a3       	std	Y+33, r24	; 0x21
    3fc4:	3f c0       	rjmp	.+126    	; 0x4044 <setting+0x4ac>
	else if (__tmp > 65535)
    3fc6:	6b a1       	ldd	r22, Y+35	; 0x23
    3fc8:	7c a1       	ldd	r23, Y+36	; 0x24
    3fca:	8d a1       	ldd	r24, Y+37	; 0x25
    3fcc:	9e a1       	ldd	r25, Y+38	; 0x26
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	3f ef       	ldi	r19, 0xFF	; 255
    3fd2:	4f e7       	ldi	r20, 0x7F	; 127
    3fd4:	57 e4       	ldi	r21, 0x47	; 71
    3fd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fda:	18 16       	cp	r1, r24
    3fdc:	4c f5       	brge	.+82     	; 0x4030 <setting+0x498>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fde:	6f a1       	ldd	r22, Y+39	; 0x27
    3fe0:	78 a5       	ldd	r23, Y+40	; 0x28
    3fe2:	89 a5       	ldd	r24, Y+41	; 0x29
    3fe4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fe6:	20 e0       	ldi	r18, 0x00	; 0
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	40 e2       	ldi	r20, 0x20	; 32
    3fec:	51 e4       	ldi	r21, 0x41	; 65
    3fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	bc 01       	movw	r22, r24
    3ff8:	cd 01       	movw	r24, r26
    3ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	9a a3       	std	Y+34, r25	; 0x22
    4004:	89 a3       	std	Y+33, r24	; 0x21
    4006:	0f c0       	rjmp	.+30     	; 0x4026 <setting+0x48e>
    4008:	88 ec       	ldi	r24, 0xC8	; 200
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	98 a3       	std	Y+32, r25	; 0x20
    400e:	8f 8f       	std	Y+31, r24	; 0x1f
    4010:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4012:	98 a1       	ldd	r25, Y+32	; 0x20
    4014:	01 97       	sbiw	r24, 0x01	; 1
    4016:	f1 f7       	brne	.-4      	; 0x4014 <setting+0x47c>
    4018:	98 a3       	std	Y+32, r25	; 0x20
    401a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    401c:	89 a1       	ldd	r24, Y+33	; 0x21
    401e:	9a a1       	ldd	r25, Y+34	; 0x22
    4020:	01 97       	sbiw	r24, 0x01	; 1
    4022:	9a a3       	std	Y+34, r25	; 0x22
    4024:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4026:	89 a1       	ldd	r24, Y+33	; 0x21
    4028:	9a a1       	ldd	r25, Y+34	; 0x22
    402a:	00 97       	sbiw	r24, 0x00	; 0
    402c:	69 f7       	brne	.-38     	; 0x4008 <setting+0x470>
    402e:	14 c0       	rjmp	.+40     	; 0x4058 <setting+0x4c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4030:	6b a1       	ldd	r22, Y+35	; 0x23
    4032:	7c a1       	ldd	r23, Y+36	; 0x24
    4034:	8d a1       	ldd	r24, Y+37	; 0x25
    4036:	9e a1       	ldd	r25, Y+38	; 0x26
    4038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    403c:	dc 01       	movw	r26, r24
    403e:	cb 01       	movw	r24, r22
    4040:	9a a3       	std	Y+34, r25	; 0x22
    4042:	89 a3       	std	Y+33, r24	; 0x21
    4044:	89 a1       	ldd	r24, Y+33	; 0x21
    4046:	9a a1       	ldd	r25, Y+34	; 0x22
    4048:	9e 8f       	std	Y+30, r25	; 0x1e
    404a:	8d 8f       	std	Y+29, r24	; 0x1d
    404c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    404e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4050:	01 97       	sbiw	r24, 0x01	; 1
    4052:	f1 f7       	brne	.-4      	; 0x4050 <setting+0x4b8>
    4054:	9e 8f       	std	Y+30, r25	; 0x1e
    4056:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(500);
	 num_1=0;
    4058:	10 92 02 02 	sts	0x0202, r1
    405c:	10 92 01 02 	sts	0x0201, r1
	 if(digital != 0xffff){
    4060:	80 91 e2 01 	lds	r24, 0x01E2
    4064:	90 91 e3 01 	lds	r25, 0x01E3
    4068:	ff ef       	ldi	r31, 0xFF	; 255
    406a:	8f 3f       	cpi	r24, 0xFF	; 255
    406c:	9f 07       	cpc	r25, r31
    406e:	61 f1       	breq	.+88     	; 0x40c8 <setting+0x530>
	  analog =(digital*5000UL)/1024 ;
    4070:	80 91 e2 01 	lds	r24, 0x01E2
    4074:	90 91 e3 01 	lds	r25, 0x01E3
    4078:	cc 01       	movw	r24, r24
    407a:	a0 e0       	ldi	r26, 0x00	; 0
    407c:	b0 e0       	ldi	r27, 0x00	; 0
    407e:	28 e8       	ldi	r18, 0x88	; 136
    4080:	33 e1       	ldi	r19, 0x13	; 19
    4082:	40 e0       	ldi	r20, 0x00	; 0
    4084:	50 e0       	ldi	r21, 0x00	; 0
    4086:	bc 01       	movw	r22, r24
    4088:	cd 01       	movw	r24, r26
    408a:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <__mulsi3>
    408e:	dc 01       	movw	r26, r24
    4090:	cb 01       	movw	r24, r22
    4092:	07 2e       	mov	r0, r23
    4094:	7a e0       	ldi	r23, 0x0A	; 10
    4096:	b6 95       	lsr	r27
    4098:	a7 95       	ror	r26
    409a:	97 95       	ror	r25
    409c:	87 95       	ror	r24
    409e:	7a 95       	dec	r23
    40a0:	d1 f7       	brne	.-12     	; 0x4096 <setting+0x4fe>
    40a2:	70 2d       	mov	r23, r0
    40a4:	fe 01       	movw	r30, r28
    40a6:	e5 5b       	subi	r30, 0xB5	; 181
    40a8:	ff 4f       	sbci	r31, 0xFF	; 255
    40aa:	91 83       	std	Z+1, r25	; 0x01
    40ac:	80 83       	st	Z, r24
	   temp = analog/10;}
    40ae:	fe 01       	movw	r30, r28
    40b0:	e5 5b       	subi	r30, 0xB5	; 181
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	80 81       	ld	r24, Z
    40b6:	91 81       	ldd	r25, Z+1	; 0x01
    40b8:	2a e0       	ldi	r18, 0x0A	; 10
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	b9 01       	movw	r22, r18
    40be:	0e 94 11 28 	call	0x5022	; 0x5022 <__udivmodhi4>
    40c2:	cb 01       	movw	r24, r22
    40c4:	80 93 08 02 	sts	0x0208, r24
	 LCD_WRITE_COMMAND(lcd_Clear);
    40c8:	81 e0       	ldi	r24, 0x01	; 1
    40ca:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
	 LCD_WRITE_STRING(" T out=");
    40ce:	8f e3       	ldi	r24, 0x3F	; 63
    40d0:	91 e0       	ldi	r25, 0x01	; 1
    40d2:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>

	 Lcd_voidDisplayNumber(tamp);
    40d6:	fe 01       	movw	r30, r28
    40d8:	e7 5b       	subi	r30, 0xB7	; 183
    40da:	ff 4f       	sbci	r31, 0xFF	; 255
    40dc:	80 81       	ld	r24, Z
    40de:	91 81       	ldd	r25, Z+1	; 0x01
    40e0:	cc 01       	movw	r24, r24
    40e2:	a0 e0       	ldi	r26, 0x00	; 0
    40e4:	b0 e0       	ldi	r27, 0x00	; 0
    40e6:	bc 01       	movw	r22, r24
    40e8:	cd 01       	movw	r24, r26
    40ea:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Lcd_voidDisplayNumber>
	 LCD_GO_TO(line2 , 0);
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	60 e0       	ldi	r22, 0x00	; 0
    40f2:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
	 LCD_WRITE_STRING("RoomT=   1-set");
    40f6:	87 e4       	ldi	r24, 0x47	; 71
    40f8:	91 e0       	ldi	r25, 0x01	; 1
    40fa:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
	 LCD_GO_TO(line2 ,6);
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	66 e0       	ldi	r22, 0x06	; 6
    4102:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
	 Lcd_voidDisplayNumber(temp);
    4106:	80 91 08 02 	lds	r24, 0x0208
    410a:	88 2f       	mov	r24, r24
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	a0 e0       	ldi	r26, 0x00	; 0
    4110:	b0 e0       	ldi	r27, 0x00	; 0
    4112:	bc 01       	movw	r22, r24
    4114:	cd 01       	movw	r24, r26
    4116:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Lcd_voidDisplayNumber>

	do{
	  KPD_u8KpdGetKeyState(&pinvalue);
    411a:	89 e0       	ldi	r24, 0x09	; 9
    411c:	92 e0       	ldi	r25, 0x02	; 2
    411e:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
	  }while(pinvalue == Kpd_keynotpressed);
    4122:	80 91 09 02 	lds	r24, 0x0209
    4126:	8f 3f       	cpi	r24, 0xFF	; 255
    4128:	c1 f3       	breq	.-16     	; 0x411a <setting+0x582>
    sign_1 = pinvalue -'0';
    412a:	80 91 09 02 	lds	r24, 0x0209
    412e:	80 53       	subi	r24, 0x30	; 48
    4130:	80 93 0a 02 	sts	0x020A, r24
    if(sign_1 >=0 && sign_1<=9 ){
    4134:	80 91 0a 02 	lds	r24, 0x020A
    4138:	8a 30       	cpi	r24, 0x0A	; 10
    413a:	c8 f4       	brcc	.+50     	; 0x416e <setting+0x5d6>
		  num_1 = (num_1*10) + (pinvalue -'0');
    413c:	80 91 01 02 	lds	r24, 0x0201
    4140:	90 91 02 02 	lds	r25, 0x0202
    4144:	9c 01       	movw	r18, r24
    4146:	22 0f       	add	r18, r18
    4148:	33 1f       	adc	r19, r19
    414a:	c9 01       	movw	r24, r18
    414c:	88 0f       	add	r24, r24
    414e:	99 1f       	adc	r25, r25
    4150:	88 0f       	add	r24, r24
    4152:	99 1f       	adc	r25, r25
    4154:	28 0f       	add	r18, r24
    4156:	39 1f       	adc	r19, r25
    4158:	80 91 09 02 	lds	r24, 0x0209
    415c:	88 2f       	mov	r24, r24
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	82 0f       	add	r24, r18
    4162:	93 1f       	adc	r25, r19
    4164:	c0 97       	sbiw	r24, 0x30	; 48
    4166:	90 93 02 02 	sts	0x0202, r25
    416a:	80 93 01 02 	sts	0x0201, r24
		 	 	}
 c= air_conutioner(num_1 , w);
    416e:	80 91 01 02 	lds	r24, 0x0201
    4172:	90 91 02 02 	lds	r25, 0x0202
    4176:	90 91 06 02 	lds	r25, 0x0206
    417a:	69 2f       	mov	r22, r25
    417c:	0e 94 9f 19 	call	0x333e	; 0x333e <air_conutioner>
    4180:	80 93 07 02 	sts	0x0207, r24
    4184:	e4 c1       	rjmp	.+968    	; 0x454e <setting+0x9b6>
	 break ;

 case 4 :
	 num_1 =0 ;
    4186:	10 92 02 02 	sts	0x0202, r1
    418a:	10 92 01 02 	sts	0x0201, r1
		 LCD_WRITE_COMMAND(lcd_Clear);
    418e:	81 e0       	ldi	r24, 0x01	; 1
    4190:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
		 LCD_WRITE_STRING(" 1_options");
    4194:	80 e6       	ldi	r24, 0x60	; 96
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
		 LCD_GO_TO(line2 , 0);
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	60 e0       	ldi	r22, 0x00	; 0
    41a0:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
		 LCD_WRITE_STRING("2_Turn Off All");
    41a4:	8b e6       	ldi	r24, 0x6B	; 107
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
		 do{
		 	 KPD_u8KpdGetKeyState(&pinvalue);
    41ac:	89 e0       	ldi	r24, 0x09	; 9
    41ae:	92 e0       	ldi	r25, 0x02	; 2
    41b0:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
		 }while(pinvalue == Kpd_keynotpressed);
    41b4:	80 91 09 02 	lds	r24, 0x0209
    41b8:	8f 3f       	cpi	r24, 0xFF	; 255
    41ba:	c1 f3       	breq	.-16     	; 0x41ac <setting+0x614>
		 sign_1 = pinvalue -'0';
    41bc:	80 91 09 02 	lds	r24, 0x0209
    41c0:	80 53       	subi	r24, 0x30	; 48
    41c2:	80 93 0a 02 	sts	0x020A, r24
		 if(sign_1 >=0 && sign_1<=9 ){
    41c6:	80 91 0a 02 	lds	r24, 0x020A
    41ca:	8a 30       	cpi	r24, 0x0A	; 10
    41cc:	c8 f4       	brcc	.+50     	; 0x4200 <setting+0x668>
			  num_1 = (num_1*10) + (pinvalue -'0');
    41ce:	80 91 01 02 	lds	r24, 0x0201
    41d2:	90 91 02 02 	lds	r25, 0x0202
    41d6:	9c 01       	movw	r18, r24
    41d8:	22 0f       	add	r18, r18
    41da:	33 1f       	adc	r19, r19
    41dc:	c9 01       	movw	r24, r18
    41de:	88 0f       	add	r24, r24
    41e0:	99 1f       	adc	r25, r25
    41e2:	88 0f       	add	r24, r24
    41e4:	99 1f       	adc	r25, r25
    41e6:	28 0f       	add	r18, r24
    41e8:	39 1f       	adc	r19, r25
    41ea:	80 91 09 02 	lds	r24, 0x0209
    41ee:	88 2f       	mov	r24, r24
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	82 0f       	add	r24, r18
    41f4:	93 1f       	adc	r25, r19
    41f6:	c0 97       	sbiw	r24, 0x30	; 48
    41f8:	90 93 02 02 	sts	0x0202, r25
    41fc:	80 93 01 02 	sts	0x0201, r24
			  }
		 if ( num_1 == 2){  // turn off all devices
    4200:	80 91 01 02 	lds	r24, 0x0201
    4204:	90 91 02 02 	lds	r25, 0x0202
    4208:	82 30       	cpi	r24, 0x02	; 2
    420a:	91 05       	cpc	r25, r1
    420c:	59 f5       	brne	.+86     	; 0x4264 <setting+0x6cc>

		  DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_LOW );   // room led off
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	64 e0       	ldi	r22, 0x04	; 4
    4212:	40 e0       	ldi	r20, 0x00	; 0
    4214:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
		  TIMERS_TIM0SetCompareMatchVAlue(0 ); // air conditioner off
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
		 if(w == 1 ){
    421e:	80 91 06 02 	lds	r24, 0x0206
    4222:	81 30       	cpi	r24, 0x01	; 1
    4224:	f9 f4       	brne	.+62     	; 0x4264 <setting+0x6cc>
		  for(int i=0 ; i<24 ; i++){       // window off
    4226:	fe 01       	movw	r30, r28
    4228:	e9 5b       	subi	r30, 0xB9	; 185
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	11 82       	std	Z+1, r1	; 0x01
    422e:	10 82       	st	Z, r1
    4230:	11 c0       	rjmp	.+34     	; 0x4254 <setting+0x6bc>
		  		      STEPPER_voidmotion(CLOCK_WISE , 15);
    4232:	80 e0       	ldi	r24, 0x00	; 0
    4234:	6f e0       	ldi	r22, 0x0F	; 15
    4236:	70 e0       	ldi	r23, 0x00	; 0
    4238:	0e 94 88 10 	call	0x2110	; 0x2110 <STEPPER_voidmotion>
		 if ( num_1 == 2){  // turn off all devices

		  DIO_u8SetPinValue(PORTA ,ROOM_led , LOGIC_LOW );   // room led off
		  TIMERS_TIM0SetCompareMatchVAlue(0 ); // air conditioner off
		 if(w == 1 ){
		  for(int i=0 ; i<24 ; i++){       // window off
    423c:	de 01       	movw	r26, r28
    423e:	a9 5b       	subi	r26, 0xB9	; 185
    4240:	bf 4f       	sbci	r27, 0xFF	; 255
    4242:	fe 01       	movw	r30, r28
    4244:	e9 5b       	subi	r30, 0xB9	; 185
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	80 81       	ld	r24, Z
    424a:	91 81       	ldd	r25, Z+1	; 0x01
    424c:	01 96       	adiw	r24, 0x01	; 1
    424e:	11 96       	adiw	r26, 0x01	; 1
    4250:	9c 93       	st	X, r25
    4252:	8e 93       	st	-X, r24
    4254:	fe 01       	movw	r30, r28
    4256:	e9 5b       	subi	r30, 0xB9	; 185
    4258:	ff 4f       	sbci	r31, 0xFF	; 255
    425a:	80 81       	ld	r24, Z
    425c:	91 81       	ldd	r25, Z+1	; 0x01
    425e:	88 31       	cpi	r24, 0x18	; 24
    4260:	91 05       	cpc	r25, r1
    4262:	3c f3       	brlt	.-50     	; 0x4232 <setting+0x69a>
		  		      STEPPER_voidmotion(CLOCK_WISE , 15);
		  		 	 }
		     	 }}
		 cond_flag=0 ;
    4264:	10 92 e4 01 	sts	0x01E4, r1
	     num_1=0 ;
    4268:	10 92 02 02 	sts	0x0202, r1
    426c:	10 92 01 02 	sts	0x0201, r1
    4270:	6e c1       	rjmp	.+732    	; 0x454e <setting+0x9b6>
     break ;

}

 while(fla==1  && cond_flag ==1 ){
 	     num_1 =0 ;
    4272:	10 92 02 02 	sts	0x0202, r1
    4276:	10 92 01 02 	sts	0x0201, r1
 		LCD_WRITE_COMMAND(lcd_Clear);
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
 	    LCD_WRITE_STRING(" Window is open");
    4280:	8c ec       	ldi	r24, 0xCC	; 204
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
 	    LCD_GO_TO(line2 , 0);
    4288:	81 e0       	ldi	r24, 0x01	; 1
    428a:	60 e0       	ldi	r22, 0x00	; 0
    428c:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
 	    LCD_WRITE_STRING("close it");
    4290:	8c ed       	ldi	r24, 0xDC	; 220
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
    4298:	80 e0       	ldi	r24, 0x00	; 0
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	aa e7       	ldi	r26, 0x7A	; 122
    429e:	b4 e4       	ldi	r27, 0x44	; 68
    42a0:	89 8f       	std	Y+25, r24	; 0x19
    42a2:	9a 8f       	std	Y+26, r25	; 0x1a
    42a4:	ab 8f       	std	Y+27, r26	; 0x1b
    42a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42a8:	69 8d       	ldd	r22, Y+25	; 0x19
    42aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42b0:	20 e0       	ldi	r18, 0x00	; 0
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	4a ef       	ldi	r20, 0xFA	; 250
    42b6:	54 e4       	ldi	r21, 0x44	; 68
    42b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42bc:	dc 01       	movw	r26, r24
    42be:	cb 01       	movw	r24, r22
    42c0:	8d 8b       	std	Y+21, r24	; 0x15
    42c2:	9e 8b       	std	Y+22, r25	; 0x16
    42c4:	af 8b       	std	Y+23, r26	; 0x17
    42c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    42c8:	6d 89       	ldd	r22, Y+21	; 0x15
    42ca:	7e 89       	ldd	r23, Y+22	; 0x16
    42cc:	8f 89       	ldd	r24, Y+23	; 0x17
    42ce:	98 8d       	ldd	r25, Y+24	; 0x18
    42d0:	20 e0       	ldi	r18, 0x00	; 0
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	40 e8       	ldi	r20, 0x80	; 128
    42d6:	5f e3       	ldi	r21, 0x3F	; 63
    42d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42dc:	88 23       	and	r24, r24
    42de:	2c f4       	brge	.+10     	; 0x42ea <setting+0x752>
		__ticks = 1;
    42e0:	81 e0       	ldi	r24, 0x01	; 1
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	9c 8b       	std	Y+20, r25	; 0x14
    42e6:	8b 8b       	std	Y+19, r24	; 0x13
    42e8:	3f c0       	rjmp	.+126    	; 0x4368 <setting+0x7d0>
	else if (__tmp > 65535)
    42ea:	6d 89       	ldd	r22, Y+21	; 0x15
    42ec:	7e 89       	ldd	r23, Y+22	; 0x16
    42ee:	8f 89       	ldd	r24, Y+23	; 0x17
    42f0:	98 8d       	ldd	r25, Y+24	; 0x18
    42f2:	20 e0       	ldi	r18, 0x00	; 0
    42f4:	3f ef       	ldi	r19, 0xFF	; 255
    42f6:	4f e7       	ldi	r20, 0x7F	; 127
    42f8:	57 e4       	ldi	r21, 0x47	; 71
    42fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42fe:	18 16       	cp	r1, r24
    4300:	4c f5       	brge	.+82     	; 0x4354 <setting+0x7bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4302:	69 8d       	ldd	r22, Y+25	; 0x19
    4304:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4306:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4308:	9c 8d       	ldd	r25, Y+28	; 0x1c
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	40 e2       	ldi	r20, 0x20	; 32
    4310:	51 e4       	ldi	r21, 0x41	; 65
    4312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4316:	dc 01       	movw	r26, r24
    4318:	cb 01       	movw	r24, r22
    431a:	bc 01       	movw	r22, r24
    431c:	cd 01       	movw	r24, r26
    431e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4322:	dc 01       	movw	r26, r24
    4324:	cb 01       	movw	r24, r22
    4326:	9c 8b       	std	Y+20, r25	; 0x14
    4328:	8b 8b       	std	Y+19, r24	; 0x13
    432a:	0f c0       	rjmp	.+30     	; 0x434a <setting+0x7b2>
    432c:	88 ec       	ldi	r24, 0xC8	; 200
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	9a 8b       	std	Y+18, r25	; 0x12
    4332:	89 8b       	std	Y+17, r24	; 0x11
    4334:	89 89       	ldd	r24, Y+17	; 0x11
    4336:	9a 89       	ldd	r25, Y+18	; 0x12
    4338:	01 97       	sbiw	r24, 0x01	; 1
    433a:	f1 f7       	brne	.-4      	; 0x4338 <setting+0x7a0>
    433c:	9a 8b       	std	Y+18, r25	; 0x12
    433e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4340:	8b 89       	ldd	r24, Y+19	; 0x13
    4342:	9c 89       	ldd	r25, Y+20	; 0x14
    4344:	01 97       	sbiw	r24, 0x01	; 1
    4346:	9c 8b       	std	Y+20, r25	; 0x14
    4348:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    434a:	8b 89       	ldd	r24, Y+19	; 0x13
    434c:	9c 89       	ldd	r25, Y+20	; 0x14
    434e:	00 97       	sbiw	r24, 0x00	; 0
    4350:	69 f7       	brne	.-38     	; 0x432c <setting+0x794>
    4352:	14 c0       	rjmp	.+40     	; 0x437c <setting+0x7e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4354:	6d 89       	ldd	r22, Y+21	; 0x15
    4356:	7e 89       	ldd	r23, Y+22	; 0x16
    4358:	8f 89       	ldd	r24, Y+23	; 0x17
    435a:	98 8d       	ldd	r25, Y+24	; 0x18
    435c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	9c 8b       	std	Y+20, r25	; 0x14
    4366:	8b 8b       	std	Y+19, r24	; 0x13
    4368:	8b 89       	ldd	r24, Y+19	; 0x13
    436a:	9c 89       	ldd	r25, Y+20	; 0x14
    436c:	98 8b       	std	Y+16, r25	; 0x10
    436e:	8f 87       	std	Y+15, r24	; 0x0f
    4370:	8f 85       	ldd	r24, Y+15	; 0x0f
    4372:	98 89       	ldd	r25, Y+16	; 0x10
    4374:	01 97       	sbiw	r24, 0x01	; 1
    4376:	f1 f7       	brne	.-4      	; 0x4374 <setting+0x7dc>
    4378:	98 8b       	std	Y+16, r25	; 0x10
    437a:	8f 87       	std	Y+15, r24	; 0x0f
          _delay_ms(1000);
 	    	LCD_WRITE_STRING("!!");
    437c:	85 ee       	ldi	r24, 0xE5	; 229
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>

 	    LCD_WRITE_COMMAND(lcd_Clear);
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
        LCD_WRITE_STRING(" 1-Close ");
    438a:	88 ee       	ldi	r24, 0xE8	; 232
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
          do{
 	    	  KPD_u8KpdGetKeyState(&pinvalue);
    4392:	89 e0       	ldi	r24, 0x09	; 9
    4394:	92 e0       	ldi	r25, 0x02	; 2
    4396:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
 	    	   coun++ ;
    439a:	de 01       	movw	r26, r28
    439c:	a3 5b       	subi	r26, 0xB3	; 179
    439e:	bf 4f       	sbci	r27, 0xFF	; 255
    43a0:	fe 01       	movw	r30, r28
    43a2:	e3 5b       	subi	r30, 0xB3	; 179
    43a4:	ff 4f       	sbci	r31, 0xFF	; 255
    43a6:	80 81       	ld	r24, Z
    43a8:	91 81       	ldd	r25, Z+1	; 0x01
    43aa:	01 96       	adiw	r24, 0x01	; 1
    43ac:	11 96       	adiw	r26, 0x01	; 1
    43ae:	9c 93       	st	X, r25
    43b0:	8e 93       	st	-X, r24
 	    	 }while(pinvalue == Kpd_keynotpressed && coun <5000);
    43b2:	80 91 09 02 	lds	r24, 0x0209
    43b6:	8f 3f       	cpi	r24, 0xFF	; 255
    43b8:	49 f4       	brne	.+18     	; 0x43cc <setting+0x834>
    43ba:	fe 01       	movw	r30, r28
    43bc:	e3 5b       	subi	r30, 0xB3	; 179
    43be:	ff 4f       	sbci	r31, 0xFF	; 255
    43c0:	80 81       	ld	r24, Z
    43c2:	91 81       	ldd	r25, Z+1	; 0x01
    43c4:	23 e1       	ldi	r18, 0x13	; 19
    43c6:	88 38       	cpi	r24, 0x88	; 136
    43c8:	92 07       	cpc	r25, r18
    43ca:	18 f3       	brcs	.-58     	; 0x4392 <setting+0x7fa>
 	     sign_1 = pinvalue -'0';
    43cc:	80 91 09 02 	lds	r24, 0x0209
    43d0:	80 53       	subi	r24, 0x30	; 48
    43d2:	80 93 0a 02 	sts	0x020A, r24
 	      if(sign_1 >=0 && sign_1<=9 ){
    43d6:	80 91 0a 02 	lds	r24, 0x020A
    43da:	8a 30       	cpi	r24, 0x0A	; 10
    43dc:	c8 f4       	brcc	.+50     	; 0x4410 <setting+0x878>
 	        num_1 = (num_1*10) + (pinvalue -'0');
    43de:	80 91 01 02 	lds	r24, 0x0201
    43e2:	90 91 02 02 	lds	r25, 0x0202
    43e6:	9c 01       	movw	r18, r24
    43e8:	22 0f       	add	r18, r18
    43ea:	33 1f       	adc	r19, r19
    43ec:	c9 01       	movw	r24, r18
    43ee:	88 0f       	add	r24, r24
    43f0:	99 1f       	adc	r25, r25
    43f2:	88 0f       	add	r24, r24
    43f4:	99 1f       	adc	r25, r25
    43f6:	28 0f       	add	r18, r24
    43f8:	39 1f       	adc	r19, r25
    43fa:	80 91 09 02 	lds	r24, 0x0209
    43fe:	88 2f       	mov	r24, r24
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	82 0f       	add	r24, r18
    4404:	93 1f       	adc	r25, r19
    4406:	c0 97       	sbiw	r24, 0x30	; 48
    4408:	90 93 02 02 	sts	0x0202, r25
    440c:	80 93 01 02 	sts	0x0201, r24
 	    	 }
 	   if( num_1 ==1){
    4410:	80 91 01 02 	lds	r24, 0x0201
    4414:	90 91 02 02 	lds	r25, 0x0202
    4418:	81 30       	cpi	r24, 0x01	; 1
    441a:	91 05       	cpc	r25, r1
    441c:	59 f4       	brne	.+22     	; 0x4434 <setting+0x89c>
 		   LCD_WRITE_Char('j');
    441e:	8a e6       	ldi	r24, 0x6A	; 106
    4420:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LCD_WRITE_Char>
 	      w=window(1);
    4424:	81 e0       	ldi	r24, 0x01	; 1
    4426:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <window>
    442a:	80 93 06 02 	sts	0x0206, r24
 	      fla =0 ;
    442e:	10 92 05 02 	sts	0x0205, r1
    4432:	96 c0       	rjmp	.+300    	; 0x4560 <setting+0x9c8>
 	      break ;
              }
 	  LCD_WRITE_Char('j');
    4434:	8a e6       	ldi	r24, 0x6A	; 106
    4436:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LCD_WRITE_Char>
 	        num_1 =0 ;
    443a:	10 92 02 02 	sts	0x0202, r1
    443e:	10 92 01 02 	sts	0x0201, r1
            TIMERS_TIM0SetCompareMatchVAlue(0);
    4442:	80 e0       	ldi	r24, 0x00	; 0
    4444:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TIMERS_TIM0SetCompareMatchVAlue>
 	    	 LCD_WRITE_COMMAND(lcd_Clear);
    4448:	81 e0       	ldi	r24, 0x01	; 1
    444a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
 	    	LCD_WRITE_STRING(" conditioner closed");
    444e:	82 ef       	ldi	r24, 0xF2	; 242
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	aa ef       	ldi	r26, 0xFA	; 250
    445c:	b4 e4       	ldi	r27, 0x44	; 68
    445e:	8b 87       	std	Y+11, r24	; 0x0b
    4460:	9c 87       	std	Y+12, r25	; 0x0c
    4462:	ad 87       	std	Y+13, r26	; 0x0d
    4464:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4466:	6b 85       	ldd	r22, Y+11	; 0x0b
    4468:	7c 85       	ldd	r23, Y+12	; 0x0c
    446a:	8d 85       	ldd	r24, Y+13	; 0x0d
    446c:	9e 85       	ldd	r25, Y+14	; 0x0e
    446e:	20 e0       	ldi	r18, 0x00	; 0
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	4a ef       	ldi	r20, 0xFA	; 250
    4474:	54 e4       	ldi	r21, 0x44	; 68
    4476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    447a:	dc 01       	movw	r26, r24
    447c:	cb 01       	movw	r24, r22
    447e:	8f 83       	std	Y+7, r24	; 0x07
    4480:	98 87       	std	Y+8, r25	; 0x08
    4482:	a9 87       	std	Y+9, r26	; 0x09
    4484:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4486:	6f 81       	ldd	r22, Y+7	; 0x07
    4488:	78 85       	ldd	r23, Y+8	; 0x08
    448a:	89 85       	ldd	r24, Y+9	; 0x09
    448c:	9a 85       	ldd	r25, Y+10	; 0x0a
    448e:	20 e0       	ldi	r18, 0x00	; 0
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	40 e8       	ldi	r20, 0x80	; 128
    4494:	5f e3       	ldi	r21, 0x3F	; 63
    4496:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    449a:	88 23       	and	r24, r24
    449c:	2c f4       	brge	.+10     	; 0x44a8 <setting+0x910>
		__ticks = 1;
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	9e 83       	std	Y+6, r25	; 0x06
    44a4:	8d 83       	std	Y+5, r24	; 0x05
    44a6:	3f c0       	rjmp	.+126    	; 0x4526 <setting+0x98e>
	else if (__tmp > 65535)
    44a8:	6f 81       	ldd	r22, Y+7	; 0x07
    44aa:	78 85       	ldd	r23, Y+8	; 0x08
    44ac:	89 85       	ldd	r24, Y+9	; 0x09
    44ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    44b0:	20 e0       	ldi	r18, 0x00	; 0
    44b2:	3f ef       	ldi	r19, 0xFF	; 255
    44b4:	4f e7       	ldi	r20, 0x7F	; 127
    44b6:	57 e4       	ldi	r21, 0x47	; 71
    44b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44bc:	18 16       	cp	r1, r24
    44be:	4c f5       	brge	.+82     	; 0x4512 <setting+0x97a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    44c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    44c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    44c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    44c8:	20 e0       	ldi	r18, 0x00	; 0
    44ca:	30 e0       	ldi	r19, 0x00	; 0
    44cc:	40 e2       	ldi	r20, 0x20	; 32
    44ce:	51 e4       	ldi	r21, 0x41	; 65
    44d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d4:	dc 01       	movw	r26, r24
    44d6:	cb 01       	movw	r24, r22
    44d8:	bc 01       	movw	r22, r24
    44da:	cd 01       	movw	r24, r26
    44dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e0:	dc 01       	movw	r26, r24
    44e2:	cb 01       	movw	r24, r22
    44e4:	9e 83       	std	Y+6, r25	; 0x06
    44e6:	8d 83       	std	Y+5, r24	; 0x05
    44e8:	0f c0       	rjmp	.+30     	; 0x4508 <setting+0x970>
    44ea:	88 ec       	ldi	r24, 0xC8	; 200
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	9c 83       	std	Y+4, r25	; 0x04
    44f0:	8b 83       	std	Y+3, r24	; 0x03
    44f2:	8b 81       	ldd	r24, Y+3	; 0x03
    44f4:	9c 81       	ldd	r25, Y+4	; 0x04
    44f6:	01 97       	sbiw	r24, 0x01	; 1
    44f8:	f1 f7       	brne	.-4      	; 0x44f6 <setting+0x95e>
    44fa:	9c 83       	std	Y+4, r25	; 0x04
    44fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4500:	9e 81       	ldd	r25, Y+6	; 0x06
    4502:	01 97       	sbiw	r24, 0x01	; 1
    4504:	9e 83       	std	Y+6, r25	; 0x06
    4506:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4508:	8d 81       	ldd	r24, Y+5	; 0x05
    450a:	9e 81       	ldd	r25, Y+6	; 0x06
    450c:	00 97       	sbiw	r24, 0x00	; 0
    450e:	69 f7       	brne	.-38     	; 0x44ea <setting+0x952>
    4510:	14 c0       	rjmp	.+40     	; 0x453a <setting+0x9a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4512:	6f 81       	ldd	r22, Y+7	; 0x07
    4514:	78 85       	ldd	r23, Y+8	; 0x08
    4516:	89 85       	ldd	r24, Y+9	; 0x09
    4518:	9a 85       	ldd	r25, Y+10	; 0x0a
    451a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    451e:	dc 01       	movw	r26, r24
    4520:	cb 01       	movw	r24, r22
    4522:	9e 83       	std	Y+6, r25	; 0x06
    4524:	8d 83       	std	Y+5, r24	; 0x05
    4526:	8d 81       	ldd	r24, Y+5	; 0x05
    4528:	9e 81       	ldd	r25, Y+6	; 0x06
    452a:	9a 83       	std	Y+2, r25	; 0x02
    452c:	89 83       	std	Y+1, r24	; 0x01
    452e:	89 81       	ldd	r24, Y+1	; 0x01
    4530:	9a 81       	ldd	r25, Y+2	; 0x02
    4532:	01 97       	sbiw	r24, 0x01	; 1
    4534:	f1 f7       	brne	.-4      	; 0x4532 <setting+0x99a>
    4536:	9a 83       	std	Y+2, r25	; 0x02
    4538:	89 83       	std	Y+1, r24	; 0x01
 	    	 _delay_ms(2000);
 	    	cond_flag = 0 ;
    453a:	10 92 e4 01 	sts	0x01E4, r1
 	    	 c =0 ;
    453e:	10 92 07 02 	sts	0x0207, r1
 	    	 window_flag=1 ;
    4542:	81 e0       	ldi	r24, 0x01	; 1
    4544:	80 93 04 02 	sts	0x0204, r24
 	    	 fla =1 ;
    4548:	81 e0       	ldi	r24, 0x01	; 1
    454a:	80 93 05 02 	sts	0x0205, r24
	     num_1=0 ;
     break ;

}

 while(fla==1  && cond_flag ==1 ){
    454e:	80 91 05 02 	lds	r24, 0x0205
    4552:	81 30       	cpi	r24, 0x01	; 1
    4554:	29 f4       	brne	.+10     	; 0x4560 <setting+0x9c8>
    4556:	80 91 e4 01 	lds	r24, 0x01E4
    455a:	81 30       	cpi	r24, 0x01	; 1
    455c:	09 f4       	brne	.+2      	; 0x4560 <setting+0x9c8>
    455e:	89 ce       	rjmp	.-750    	; 0x4272 <setting+0x6da>
  }




}
    4560:	ce 5a       	subi	r28, 0xAE	; 174
    4562:	df 4f       	sbci	r29, 0xFF	; 255
    4564:	0f b6       	in	r0, 0x3f	; 63
    4566:	f8 94       	cli
    4568:	de bf       	out	0x3e, r29	; 62
    456a:	0f be       	out	0x3f, r0	; 63
    456c:	cd bf       	out	0x3d, r28	; 61
    456e:	cf 91       	pop	r28
    4570:	df 91       	pop	r29
    4572:	1f 91       	pop	r17
    4574:	0f 91       	pop	r16
    4576:	08 95       	ret

00004578 <main>:

int main(){
    4578:	0f 93       	push	r16
    457a:	1f 93       	push	r17
    457c:	df 93       	push	r29
    457e:	cf 93       	push	r28
    4580:	cd b7       	in	r28, 0x3d	; 61
    4582:	de b7       	in	r29, 0x3e	; 62
    4584:	cb 55       	subi	r28, 0x5B	; 91
    4586:	d0 40       	sbci	r29, 0x00	; 0
    4588:	0f b6       	in	r0, 0x3f	; 63
    458a:	f8 94       	cli
    458c:	de bf       	out	0x3e, r29	; 62
    458e:	0f be       	out	0x3f, r0	; 63
    4590:	cd bf       	out	0x3d, r28	; 61

	DIO_voidInit();
    4592:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_voidInit>
	LCD_INIT();
    4596:	0e 94 32 0c 	call	0x1864	; 0x1864 <LCD_INIT>
	TIM0_INIT();
    459a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <TIM0_INIT>
	TIM1_INTI();
    459e:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <TIM1_INTI>
	ADC_VoINIT();
    45a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_VoINIT>
	u16 pass = 292004;
    45a6:	fe 01       	movw	r30, r28
    45a8:	e7 5a       	subi	r30, 0xA7	; 167
    45aa:	ff 4f       	sbci	r31, 0xFF	; 255
    45ac:	84 ea       	ldi	r24, 0xA4	; 164
    45ae:	94 e7       	ldi	r25, 0x74	; 116
    45b0:	91 83       	std	Z+1, r25	; 0x01
    45b2:	80 83       	st	Z, r24
	u8 count =6 ;
    45b4:	fe 01       	movw	r30, r28
    45b6:	e8 5a       	subi	r30, 0xA8	; 168
    45b8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ba:	86 e0       	ldi	r24, 0x06	; 6
    45bc:	80 83       	st	Z, r24
	u8 try_num = 3 ;
    45be:	fe 01       	movw	r30, r28
    45c0:	e9 5a       	subi	r30, 0xA9	; 169
    45c2:	ff 4f       	sbci	r31, 0xFF	; 255
    45c4:	83 e0       	ldi	r24, 0x03	; 3
    45c6:	80 83       	st	Z, r24
	u8 flage =0 ;
    45c8:	fe 01       	movw	r30, r28
    45ca:	ea 5a       	subi	r30, 0xAA	; 170
    45cc:	ff 4f       	sbci	r31, 0xFF	; 255
    45ce:	10 82       	st	Z, r1
	u8 i=0;
    45d0:	fe 01       	movw	r30, r28
    45d2:	eb 5a       	subi	r30, 0xAB	; 171
    45d4:	ff 4f       	sbci	r31, 0xFF	; 255
    45d6:	10 82       	st	Z, r1
    u8 key_1 ;

	while(1){


        if( try_num == 3  && flage ==0 ){   // flage == 1 when password is correct
    45d8:	fe 01       	movw	r30, r28
    45da:	e9 5a       	subi	r30, 0xA9	; 169
    45dc:	ff 4f       	sbci	r31, 0xFF	; 255
    45de:	80 81       	ld	r24, Z
    45e0:	83 30       	cpi	r24, 0x03	; 3
    45e2:	09 f0       	breq	.+2      	; 0x45e6 <main+0x6e>
    45e4:	75 c2       	rjmp	.+1258   	; 0x4ad0 <main+0x558>
    45e6:	fe 01       	movw	r30, r28
    45e8:	ea 5a       	subi	r30, 0xAA	; 170
    45ea:	ff 4f       	sbci	r31, 0xFF	; 255
    45ec:	80 81       	ld	r24, Z
    45ee:	88 23       	and	r24, r24
    45f0:	09 f0       	breq	.+2      	; 0x45f4 <main+0x7c>
    45f2:	6e c2       	rjmp	.+1244   	; 0x4ad0 <main+0x558>
		LCD_WRITE_STRING(" Enter password : ");
    45f4:	86 e5       	ldi	r24, 0x56	; 86
    45f6:	91 e0       	ldi	r25, 0x01	; 1
    45f8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
		 LCD_GO_TO(line2,0);
    45fc:	81 e0       	ldi	r24, 0x01	; 1
    45fe:	60 e0       	ldi	r22, 0x00	; 0
    4600:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
		/*take password  */
	 while(1){
      // servo angle 0 >> ocra1 == 1500
		 TIM1_OCR1AVAL(1500); // angle 180
    4604:	8c ed       	ldi	r24, 0xDC	; 220
    4606:	95 e0       	ldi	r25, 0x05	; 5
    4608:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <TIM1_OCR1AVAL>
		 do{
			 KPD_u8KpdGetKeyState(&pinvalue);
    460c:	89 e0       	ldi	r24, 0x09	; 9
    460e:	92 e0       	ldi	r25, 0x02	; 2
    4610:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
		 }while(pinvalue == Kpd_keynotpressed);
    4614:	80 91 09 02 	lds	r24, 0x0209
    4618:	8f 3f       	cpi	r24, 0xFF	; 255
    461a:	c1 f3       	breq	.-16     	; 0x460c <main+0x94>
		 sign_1 = pinvalue -'0';
    461c:	80 91 09 02 	lds	r24, 0x0209
    4620:	80 53       	subi	r24, 0x30	; 48
    4622:	80 93 0a 02 	sts	0x020A, r24
		 if(sign_1 >=0 && sign_1<=9 ){
    4626:	80 91 0a 02 	lds	r24, 0x020A
    462a:	8a 30       	cpi	r24, 0x0A	; 10
    462c:	08 f0       	brcs	.+2      	; 0x4630 <main+0xb8>
    462e:	e3 c0       	rjmp	.+454    	; 0x47f6 <main+0x27e>

        num_1 = (num_1*10) + (pinvalue -'0');
    4630:	80 91 01 02 	lds	r24, 0x0201
    4634:	90 91 02 02 	lds	r25, 0x0202
    4638:	9c 01       	movw	r18, r24
    463a:	22 0f       	add	r18, r18
    463c:	33 1f       	adc	r19, r19
    463e:	c9 01       	movw	r24, r18
    4640:	88 0f       	add	r24, r24
    4642:	99 1f       	adc	r25, r25
    4644:	88 0f       	add	r24, r24
    4646:	99 1f       	adc	r25, r25
    4648:	28 0f       	add	r18, r24
    464a:	39 1f       	adc	r19, r25
    464c:	80 91 09 02 	lds	r24, 0x0209
    4650:	88 2f       	mov	r24, r24
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	82 0f       	add	r24, r18
    4656:	93 1f       	adc	r25, r19
    4658:	c0 97       	sbiw	r24, 0x30	; 48
    465a:	90 93 02 02 	sts	0x0202, r25
    465e:	80 93 01 02 	sts	0x0201, r24
         LCD_WRITE_Char(pinvalue);
    4662:	80 91 09 02 	lds	r24, 0x0209
    4666:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LCD_WRITE_Char>
    466a:	fe 01       	movw	r30, r28
    466c:	ef 5a       	subi	r30, 0xAF	; 175
    466e:	ff 4f       	sbci	r31, 0xFF	; 255
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	a8 ec       	ldi	r26, 0xC8	; 200
    4676:	b2 e4       	ldi	r27, 0x42	; 66
    4678:	80 83       	st	Z, r24
    467a:	91 83       	std	Z+1, r25	; 0x01
    467c:	a2 83       	std	Z+2, r26	; 0x02
    467e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4680:	8e 01       	movw	r16, r28
    4682:	03 5b       	subi	r16, 0xB3	; 179
    4684:	1f 4f       	sbci	r17, 0xFF	; 255
    4686:	fe 01       	movw	r30, r28
    4688:	ef 5a       	subi	r30, 0xAF	; 175
    468a:	ff 4f       	sbci	r31, 0xFF	; 255
    468c:	60 81       	ld	r22, Z
    468e:	71 81       	ldd	r23, Z+1	; 0x01
    4690:	82 81       	ldd	r24, Z+2	; 0x02
    4692:	93 81       	ldd	r25, Z+3	; 0x03
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	4a ef       	ldi	r20, 0xFA	; 250
    469a:	54 e4       	ldi	r21, 0x44	; 68
    469c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a0:	dc 01       	movw	r26, r24
    46a2:	cb 01       	movw	r24, r22
    46a4:	f8 01       	movw	r30, r16
    46a6:	80 83       	st	Z, r24
    46a8:	91 83       	std	Z+1, r25	; 0x01
    46aa:	a2 83       	std	Z+2, r26	; 0x02
    46ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46ae:	fe 01       	movw	r30, r28
    46b0:	e3 5b       	subi	r30, 0xB3	; 179
    46b2:	ff 4f       	sbci	r31, 0xFF	; 255
    46b4:	60 81       	ld	r22, Z
    46b6:	71 81       	ldd	r23, Z+1	; 0x01
    46b8:	82 81       	ldd	r24, Z+2	; 0x02
    46ba:	93 81       	ldd	r25, Z+3	; 0x03
    46bc:	20 e0       	ldi	r18, 0x00	; 0
    46be:	30 e0       	ldi	r19, 0x00	; 0
    46c0:	40 e8       	ldi	r20, 0x80	; 128
    46c2:	5f e3       	ldi	r21, 0x3F	; 63
    46c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46c8:	88 23       	and	r24, r24
    46ca:	44 f4       	brge	.+16     	; 0x46dc <main+0x164>
		__ticks = 1;
    46cc:	fe 01       	movw	r30, r28
    46ce:	e5 5b       	subi	r30, 0xB5	; 181
    46d0:	ff 4f       	sbci	r31, 0xFF	; 255
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	91 83       	std	Z+1, r25	; 0x01
    46d8:	80 83       	st	Z, r24
    46da:	64 c0       	rjmp	.+200    	; 0x47a4 <main+0x22c>
	else if (__tmp > 65535)
    46dc:	fe 01       	movw	r30, r28
    46de:	e3 5b       	subi	r30, 0xB3	; 179
    46e0:	ff 4f       	sbci	r31, 0xFF	; 255
    46e2:	60 81       	ld	r22, Z
    46e4:	71 81       	ldd	r23, Z+1	; 0x01
    46e6:	82 81       	ldd	r24, Z+2	; 0x02
    46e8:	93 81       	ldd	r25, Z+3	; 0x03
    46ea:	20 e0       	ldi	r18, 0x00	; 0
    46ec:	3f ef       	ldi	r19, 0xFF	; 255
    46ee:	4f e7       	ldi	r20, 0x7F	; 127
    46f0:	57 e4       	ldi	r21, 0x47	; 71
    46f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46f6:	18 16       	cp	r1, r24
    46f8:	0c f0       	brlt	.+2      	; 0x46fc <main+0x184>
    46fa:	43 c0       	rjmp	.+134    	; 0x4782 <main+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46fc:	fe 01       	movw	r30, r28
    46fe:	ef 5a       	subi	r30, 0xAF	; 175
    4700:	ff 4f       	sbci	r31, 0xFF	; 255
    4702:	60 81       	ld	r22, Z
    4704:	71 81       	ldd	r23, Z+1	; 0x01
    4706:	82 81       	ldd	r24, Z+2	; 0x02
    4708:	93 81       	ldd	r25, Z+3	; 0x03
    470a:	20 e0       	ldi	r18, 0x00	; 0
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	40 e2       	ldi	r20, 0x20	; 32
    4710:	51 e4       	ldi	r21, 0x41	; 65
    4712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4716:	dc 01       	movw	r26, r24
    4718:	cb 01       	movw	r24, r22
    471a:	8e 01       	movw	r16, r28
    471c:	05 5b       	subi	r16, 0xB5	; 181
    471e:	1f 4f       	sbci	r17, 0xFF	; 255
    4720:	bc 01       	movw	r22, r24
    4722:	cd 01       	movw	r24, r26
    4724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4728:	dc 01       	movw	r26, r24
    472a:	cb 01       	movw	r24, r22
    472c:	f8 01       	movw	r30, r16
    472e:	91 83       	std	Z+1, r25	; 0x01
    4730:	80 83       	st	Z, r24
    4732:	1f c0       	rjmp	.+62     	; 0x4772 <main+0x1fa>
    4734:	fe 01       	movw	r30, r28
    4736:	e7 5b       	subi	r30, 0xB7	; 183
    4738:	ff 4f       	sbci	r31, 0xFF	; 255
    473a:	88 ec       	ldi	r24, 0xC8	; 200
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	91 83       	std	Z+1, r25	; 0x01
    4740:	80 83       	st	Z, r24
    4742:	fe 01       	movw	r30, r28
    4744:	e7 5b       	subi	r30, 0xB7	; 183
    4746:	ff 4f       	sbci	r31, 0xFF	; 255
    4748:	80 81       	ld	r24, Z
    474a:	91 81       	ldd	r25, Z+1	; 0x01
    474c:	01 97       	sbiw	r24, 0x01	; 1
    474e:	f1 f7       	brne	.-4      	; 0x474c <main+0x1d4>
    4750:	fe 01       	movw	r30, r28
    4752:	e7 5b       	subi	r30, 0xB7	; 183
    4754:	ff 4f       	sbci	r31, 0xFF	; 255
    4756:	91 83       	std	Z+1, r25	; 0x01
    4758:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    475a:	de 01       	movw	r26, r28
    475c:	a5 5b       	subi	r26, 0xB5	; 181
    475e:	bf 4f       	sbci	r27, 0xFF	; 255
    4760:	fe 01       	movw	r30, r28
    4762:	e5 5b       	subi	r30, 0xB5	; 181
    4764:	ff 4f       	sbci	r31, 0xFF	; 255
    4766:	80 81       	ld	r24, Z
    4768:	91 81       	ldd	r25, Z+1	; 0x01
    476a:	01 97       	sbiw	r24, 0x01	; 1
    476c:	11 96       	adiw	r26, 0x01	; 1
    476e:	9c 93       	st	X, r25
    4770:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4772:	fe 01       	movw	r30, r28
    4774:	e5 5b       	subi	r30, 0xB5	; 181
    4776:	ff 4f       	sbci	r31, 0xFF	; 255
    4778:	80 81       	ld	r24, Z
    477a:	91 81       	ldd	r25, Z+1	; 0x01
    477c:	00 97       	sbiw	r24, 0x00	; 0
    477e:	d1 f6       	brne	.-76     	; 0x4734 <main+0x1bc>
    4780:	27 c0       	rjmp	.+78     	; 0x47d0 <main+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4782:	8e 01       	movw	r16, r28
    4784:	05 5b       	subi	r16, 0xB5	; 181
    4786:	1f 4f       	sbci	r17, 0xFF	; 255
    4788:	fe 01       	movw	r30, r28
    478a:	e3 5b       	subi	r30, 0xB3	; 179
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	60 81       	ld	r22, Z
    4790:	71 81       	ldd	r23, Z+1	; 0x01
    4792:	82 81       	ldd	r24, Z+2	; 0x02
    4794:	93 81       	ldd	r25, Z+3	; 0x03
    4796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    479a:	dc 01       	movw	r26, r24
    479c:	cb 01       	movw	r24, r22
    479e:	f8 01       	movw	r30, r16
    47a0:	91 83       	std	Z+1, r25	; 0x01
    47a2:	80 83       	st	Z, r24
    47a4:	de 01       	movw	r26, r28
    47a6:	a9 5b       	subi	r26, 0xB9	; 185
    47a8:	bf 4f       	sbci	r27, 0xFF	; 255
    47aa:	fe 01       	movw	r30, r28
    47ac:	e5 5b       	subi	r30, 0xB5	; 181
    47ae:	ff 4f       	sbci	r31, 0xFF	; 255
    47b0:	80 81       	ld	r24, Z
    47b2:	91 81       	ldd	r25, Z+1	; 0x01
    47b4:	8d 93       	st	X+, r24
    47b6:	9c 93       	st	X, r25
    47b8:	fe 01       	movw	r30, r28
    47ba:	e9 5b       	subi	r30, 0xB9	; 185
    47bc:	ff 4f       	sbci	r31, 0xFF	; 255
    47be:	80 81       	ld	r24, Z
    47c0:	91 81       	ldd	r25, Z+1	; 0x01
    47c2:	01 97       	sbiw	r24, 0x01	; 1
    47c4:	f1 f7       	brne	.-4      	; 0x47c2 <main+0x24a>
    47c6:	fe 01       	movw	r30, r28
    47c8:	e9 5b       	subi	r30, 0xB9	; 185
    47ca:	ff 4f       	sbci	r31, 0xFF	; 255
    47cc:	91 83       	std	Z+1, r25	; 0x01
    47ce:	80 83       	st	Z, r24
        	 _delay_ms(100);
        	 LCD_GO_TO(line2 , i);
    47d0:	fe 01       	movw	r30, r28
    47d2:	eb 5a       	subi	r30, 0xAB	; 171
    47d4:	ff 4f       	sbci	r31, 0xFF	; 255
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	60 81       	ld	r22, Z
    47da:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
        	  LCD_WRITE_Char('*');
    47de:	8a e2       	ldi	r24, 0x2A	; 42
    47e0:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LCD_WRITE_Char>
        	        i++;
    47e4:	de 01       	movw	r26, r28
    47e6:	ab 5a       	subi	r26, 0xAB	; 171
    47e8:	bf 4f       	sbci	r27, 0xFF	; 255
    47ea:	fe 01       	movw	r30, r28
    47ec:	eb 5a       	subi	r30, 0xAB	; 171
    47ee:	ff 4f       	sbci	r31, 0xFF	; 255
    47f0:	80 81       	ld	r24, Z
    47f2:	8f 5f       	subi	r24, 0xFF	; 255
    47f4:	8c 93       	st	X, r24
		  }
		 if( count ==1){
    47f6:	fe 01       	movw	r30, r28
    47f8:	e8 5a       	subi	r30, 0xA8	; 168
    47fa:	ff 4f       	sbci	r31, 0xFF	; 255
    47fc:	80 81       	ld	r24, Z
    47fe:	81 30       	cpi	r24, 0x01	; 1
    4800:	51 f0       	breq	.+20     	; 0x4816 <main+0x29e>
			 break;
		 }
		 else{

			 count-- ;
    4802:	de 01       	movw	r26, r28
    4804:	a8 5a       	subi	r26, 0xA8	; 168
    4806:	bf 4f       	sbci	r27, 0xFF	; 255
    4808:	fe 01       	movw	r30, r28
    480a:	e8 5a       	subi	r30, 0xA8	; 168
    480c:	ff 4f       	sbci	r31, 0xFF	; 255
    480e:	80 81       	ld	r24, Z
    4810:	81 50       	subi	r24, 0x01	; 1
    4812:	8c 93       	st	X, r24
    4814:	f7 ce       	rjmp	.-530    	; 0x4604 <main+0x8c>
		 }
	 }



	   if(num_1 == pass ){
    4816:	80 91 01 02 	lds	r24, 0x0201
    481a:	90 91 02 02 	lds	r25, 0x0202
    481e:	fe 01       	movw	r30, r28
    4820:	e7 5a       	subi	r30, 0xA7	; 167
    4822:	ff 4f       	sbci	r31, 0xFF	; 255
    4824:	20 81       	ld	r18, Z
    4826:	31 81       	ldd	r19, Z+1	; 0x01
    4828:	82 17       	cp	r24, r18
    482a:	93 07       	cpc	r25, r19
    482c:	09 f0       	breq	.+2      	; 0x4830 <main+0x2b8>
    482e:	b9 c0       	rjmp	.+370    	; 0x49a2 <main+0x42a>
             i=0 ;
    4830:	fe 01       	movw	r30, r28
    4832:	eb 5a       	subi	r30, 0xAB	; 171
    4834:	ff 4f       	sbci	r31, 0xFF	; 255
    4836:	10 82       	st	Z, r1
             num_1=0 ;
    4838:	10 92 02 02 	sts	0x0202, r1
    483c:	10 92 01 02 	sts	0x0201, r1
			flage=1;
    4840:	fe 01       	movw	r30, r28
    4842:	ea 5a       	subi	r30, 0xAA	; 170
    4844:	ff 4f       	sbci	r31, 0xFF	; 255
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	80 83       	st	Z, r24
			count =6 ;
    484a:	fe 01       	movw	r30, r28
    484c:	e8 5a       	subi	r30, 0xA8	; 168
    484e:	ff 4f       	sbci	r31, 0xFF	; 255
    4850:	86 e0       	ldi	r24, 0x06	; 6
    4852:	80 83       	st	Z, r24
		    LCD_WRITE_COMMAND(lcd_Clear);
    4854:	81 e0       	ldi	r24, 0x01	; 1
    4856:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
		    LCD_GO_TO(line1 , 3);
    485a:	80 e0       	ldi	r24, 0x00	; 0
    485c:	63 e0       	ldi	r22, 0x03	; 3
    485e:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
		    LCD_WRITE_STRING("correct password");
    4862:	89 e6       	ldi	r24, 0x69	; 105
    4864:	91 e0       	ldi	r25, 0x01	; 1
    4866:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
			LCD_GO_TO(line2 ,0);
    486a:	81 e0       	ldi	r24, 0x01	; 1
    486c:	60 e0       	ldi	r22, 0x00	; 0
    486e:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
		    LCD_WRITE_STRING("Door open");
    4872:	8a e7       	ldi	r24, 0x7A	; 122
    4874:	91 e0       	ldi	r25, 0x01	; 1
    4876:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
    487a:	fe 01       	movw	r30, r28
    487c:	ed 5b       	subi	r30, 0xBD	; 189
    487e:	ff 4f       	sbci	r31, 0xFF	; 255
    4880:	80 e0       	ldi	r24, 0x00	; 0
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	aa ef       	ldi	r26, 0xFA	; 250
    4886:	b3 e4       	ldi	r27, 0x43	; 67
    4888:	80 83       	st	Z, r24
    488a:	91 83       	std	Z+1, r25	; 0x01
    488c:	a2 83       	std	Z+2, r26	; 0x02
    488e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4890:	8e 01       	movw	r16, r28
    4892:	01 5c       	subi	r16, 0xC1	; 193
    4894:	1f 4f       	sbci	r17, 0xFF	; 255
    4896:	fe 01       	movw	r30, r28
    4898:	ed 5b       	subi	r30, 0xBD	; 189
    489a:	ff 4f       	sbci	r31, 0xFF	; 255
    489c:	60 81       	ld	r22, Z
    489e:	71 81       	ldd	r23, Z+1	; 0x01
    48a0:	82 81       	ldd	r24, Z+2	; 0x02
    48a2:	93 81       	ldd	r25, Z+3	; 0x03
    48a4:	20 e0       	ldi	r18, 0x00	; 0
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	4a ef       	ldi	r20, 0xFA	; 250
    48aa:	54 e4       	ldi	r21, 0x44	; 68
    48ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b0:	dc 01       	movw	r26, r24
    48b2:	cb 01       	movw	r24, r22
    48b4:	f8 01       	movw	r30, r16
    48b6:	80 83       	st	Z, r24
    48b8:	91 83       	std	Z+1, r25	; 0x01
    48ba:	a2 83       	std	Z+2, r26	; 0x02
    48bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48be:	fe 01       	movw	r30, r28
    48c0:	ff 96       	adiw	r30, 0x3f	; 63
    48c2:	60 81       	ld	r22, Z
    48c4:	71 81       	ldd	r23, Z+1	; 0x01
    48c6:	82 81       	ldd	r24, Z+2	; 0x02
    48c8:	93 81       	ldd	r25, Z+3	; 0x03
    48ca:	20 e0       	ldi	r18, 0x00	; 0
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	40 e8       	ldi	r20, 0x80	; 128
    48d0:	5f e3       	ldi	r21, 0x3F	; 63
    48d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48d6:	88 23       	and	r24, r24
    48d8:	2c f4       	brge	.+10     	; 0x48e4 <main+0x36c>
		__ticks = 1;
    48da:	81 e0       	ldi	r24, 0x01	; 1
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	9e af       	std	Y+62, r25	; 0x3e
    48e0:	8d af       	std	Y+61, r24	; 0x3d
    48e2:	46 c0       	rjmp	.+140    	; 0x4970 <main+0x3f8>
	else if (__tmp > 65535)
    48e4:	fe 01       	movw	r30, r28
    48e6:	ff 96       	adiw	r30, 0x3f	; 63
    48e8:	60 81       	ld	r22, Z
    48ea:	71 81       	ldd	r23, Z+1	; 0x01
    48ec:	82 81       	ldd	r24, Z+2	; 0x02
    48ee:	93 81       	ldd	r25, Z+3	; 0x03
    48f0:	20 e0       	ldi	r18, 0x00	; 0
    48f2:	3f ef       	ldi	r19, 0xFF	; 255
    48f4:	4f e7       	ldi	r20, 0x7F	; 127
    48f6:	57 e4       	ldi	r21, 0x47	; 71
    48f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    48fc:	18 16       	cp	r1, r24
    48fe:	64 f5       	brge	.+88     	; 0x4958 <main+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4900:	fe 01       	movw	r30, r28
    4902:	ed 5b       	subi	r30, 0xBD	; 189
    4904:	ff 4f       	sbci	r31, 0xFF	; 255
    4906:	60 81       	ld	r22, Z
    4908:	71 81       	ldd	r23, Z+1	; 0x01
    490a:	82 81       	ldd	r24, Z+2	; 0x02
    490c:	93 81       	ldd	r25, Z+3	; 0x03
    490e:	20 e0       	ldi	r18, 0x00	; 0
    4910:	30 e0       	ldi	r19, 0x00	; 0
    4912:	40 e2       	ldi	r20, 0x20	; 32
    4914:	51 e4       	ldi	r21, 0x41	; 65
    4916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    491a:	dc 01       	movw	r26, r24
    491c:	cb 01       	movw	r24, r22
    491e:	bc 01       	movw	r22, r24
    4920:	cd 01       	movw	r24, r26
    4922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4926:	dc 01       	movw	r26, r24
    4928:	cb 01       	movw	r24, r22
    492a:	9e af       	std	Y+62, r25	; 0x3e
    492c:	8d af       	std	Y+61, r24	; 0x3d
    492e:	0f c0       	rjmp	.+30     	; 0x494e <main+0x3d6>
    4930:	88 ec       	ldi	r24, 0xC8	; 200
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	9c af       	std	Y+60, r25	; 0x3c
    4936:	8b af       	std	Y+59, r24	; 0x3b
    4938:	8b ad       	ldd	r24, Y+59	; 0x3b
    493a:	9c ad       	ldd	r25, Y+60	; 0x3c
    493c:	01 97       	sbiw	r24, 0x01	; 1
    493e:	f1 f7       	brne	.-4      	; 0x493c <main+0x3c4>
    4940:	9c af       	std	Y+60, r25	; 0x3c
    4942:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4944:	8d ad       	ldd	r24, Y+61	; 0x3d
    4946:	9e ad       	ldd	r25, Y+62	; 0x3e
    4948:	01 97       	sbiw	r24, 0x01	; 1
    494a:	9e af       	std	Y+62, r25	; 0x3e
    494c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    494e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4950:	9e ad       	ldd	r25, Y+62	; 0x3e
    4952:	00 97       	sbiw	r24, 0x00	; 0
    4954:	69 f7       	brne	.-38     	; 0x4930 <main+0x3b8>
    4956:	16 c0       	rjmp	.+44     	; 0x4984 <main+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4958:	fe 01       	movw	r30, r28
    495a:	ff 96       	adiw	r30, 0x3f	; 63
    495c:	60 81       	ld	r22, Z
    495e:	71 81       	ldd	r23, Z+1	; 0x01
    4960:	82 81       	ldd	r24, Z+2	; 0x02
    4962:	93 81       	ldd	r25, Z+3	; 0x03
    4964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4968:	dc 01       	movw	r26, r24
    496a:	cb 01       	movw	r24, r22
    496c:	9e af       	std	Y+62, r25	; 0x3e
    496e:	8d af       	std	Y+61, r24	; 0x3d
    4970:	8d ad       	ldd	r24, Y+61	; 0x3d
    4972:	9e ad       	ldd	r25, Y+62	; 0x3e
    4974:	9a af       	std	Y+58, r25	; 0x3a
    4976:	89 af       	std	Y+57, r24	; 0x39
    4978:	89 ad       	ldd	r24, Y+57	; 0x39
    497a:	9a ad       	ldd	r25, Y+58	; 0x3a
    497c:	01 97       	sbiw	r24, 0x01	; 1
    497e:	f1 f7       	brne	.-4      	; 0x497c <main+0x404>
    4980:	9a af       	std	Y+58, r25	; 0x3a
    4982:	89 af       	std	Y+57, r24	; 0x39
            _delay_ms(500);
            pass_correct_action();
    4984:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <pass_correct_action>
         while(1){
            lcd_mode();
    4988:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <lcd_mode>
            setting(num_1);
    498c:	80 91 01 02 	lds	r24, 0x0201
    4990:	90 91 02 02 	lds	r25, 0x0202
    4994:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <setting>

            num_1=0 ;
    4998:	10 92 02 02 	sts	0x0202, r1
    499c:	10 92 01 02 	sts	0x0201, r1
    49a0:	f3 cf       	rjmp	.-26     	; 0x4988 <main+0x410>

         }
       }
		else{
			// servo angle 0 >> ocra1 == 1500
			TIM1_OCR1AVAL(1500); // angle 180
    49a2:	8c ed       	ldi	r24, 0xDC	; 220
    49a4:	95 e0       	ldi	r25, 0x05	; 5
    49a6:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <TIM1_OCR1AVAL>
              try_num--;
    49aa:	de 01       	movw	r26, r28
    49ac:	a9 5a       	subi	r26, 0xA9	; 169
    49ae:	bf 4f       	sbci	r27, 0xFF	; 255
    49b0:	fe 01       	movw	r30, r28
    49b2:	e9 5a       	subi	r30, 0xA9	; 169
    49b4:	ff 4f       	sbci	r31, 0xFF	; 255
    49b6:	80 81       	ld	r24, Z
    49b8:	81 50       	subi	r24, 0x01	; 1
    49ba:	8c 93       	st	X, r24
             LCD_WRITE_COMMAND(lcd_Clear);
    49bc:	81 e0       	ldi	r24, 0x01	; 1
    49be:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
             LCD_GO_TO(line1 , 3);
    49c2:	80 e0       	ldi	r24, 0x00	; 0
    49c4:	63 e0       	ldi	r22, 0x03	; 3
    49c6:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
              LCD_WRITE_STRING("Wrong password");
    49ca:	84 e8       	ldi	r24, 0x84	; 132
    49cc:	91 e0       	ldi	r25, 0x01	; 1
    49ce:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
    49d2:	80 e0       	ldi	r24, 0x00	; 0
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	aa e7       	ldi	r26, 0x7A	; 122
    49d8:	b4 e4       	ldi	r27, 0x44	; 68
    49da:	8d ab       	std	Y+53, r24	; 0x35
    49dc:	9e ab       	std	Y+54, r25	; 0x36
    49de:	af ab       	std	Y+55, r26	; 0x37
    49e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49e2:	6d a9       	ldd	r22, Y+53	; 0x35
    49e4:	7e a9       	ldd	r23, Y+54	; 0x36
    49e6:	8f a9       	ldd	r24, Y+55	; 0x37
    49e8:	98 ad       	ldd	r25, Y+56	; 0x38
    49ea:	20 e0       	ldi	r18, 0x00	; 0
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	4a ef       	ldi	r20, 0xFA	; 250
    49f0:	54 e4       	ldi	r21, 0x44	; 68
    49f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f6:	dc 01       	movw	r26, r24
    49f8:	cb 01       	movw	r24, r22
    49fa:	89 ab       	std	Y+49, r24	; 0x31
    49fc:	9a ab       	std	Y+50, r25	; 0x32
    49fe:	ab ab       	std	Y+51, r26	; 0x33
    4a00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4a02:	69 a9       	ldd	r22, Y+49	; 0x31
    4a04:	7a a9       	ldd	r23, Y+50	; 0x32
    4a06:	8b a9       	ldd	r24, Y+51	; 0x33
    4a08:	9c a9       	ldd	r25, Y+52	; 0x34
    4a0a:	20 e0       	ldi	r18, 0x00	; 0
    4a0c:	30 e0       	ldi	r19, 0x00	; 0
    4a0e:	40 e8       	ldi	r20, 0x80	; 128
    4a10:	5f e3       	ldi	r21, 0x3F	; 63
    4a12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a16:	88 23       	and	r24, r24
    4a18:	2c f4       	brge	.+10     	; 0x4a24 <main+0x4ac>
		__ticks = 1;
    4a1a:	81 e0       	ldi	r24, 0x01	; 1
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	98 ab       	std	Y+48, r25	; 0x30
    4a20:	8f a7       	std	Y+47, r24	; 0x2f
    4a22:	3f c0       	rjmp	.+126    	; 0x4aa2 <main+0x52a>
	else if (__tmp > 65535)
    4a24:	69 a9       	ldd	r22, Y+49	; 0x31
    4a26:	7a a9       	ldd	r23, Y+50	; 0x32
    4a28:	8b a9       	ldd	r24, Y+51	; 0x33
    4a2a:	9c a9       	ldd	r25, Y+52	; 0x34
    4a2c:	20 e0       	ldi	r18, 0x00	; 0
    4a2e:	3f ef       	ldi	r19, 0xFF	; 255
    4a30:	4f e7       	ldi	r20, 0x7F	; 127
    4a32:	57 e4       	ldi	r21, 0x47	; 71
    4a34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a38:	18 16       	cp	r1, r24
    4a3a:	4c f5       	brge	.+82     	; 0x4a8e <main+0x516>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a3c:	6d a9       	ldd	r22, Y+53	; 0x35
    4a3e:	7e a9       	ldd	r23, Y+54	; 0x36
    4a40:	8f a9       	ldd	r24, Y+55	; 0x37
    4a42:	98 ad       	ldd	r25, Y+56	; 0x38
    4a44:	20 e0       	ldi	r18, 0x00	; 0
    4a46:	30 e0       	ldi	r19, 0x00	; 0
    4a48:	40 e2       	ldi	r20, 0x20	; 32
    4a4a:	51 e4       	ldi	r21, 0x41	; 65
    4a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a50:	dc 01       	movw	r26, r24
    4a52:	cb 01       	movw	r24, r22
    4a54:	bc 01       	movw	r22, r24
    4a56:	cd 01       	movw	r24, r26
    4a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a5c:	dc 01       	movw	r26, r24
    4a5e:	cb 01       	movw	r24, r22
    4a60:	98 ab       	std	Y+48, r25	; 0x30
    4a62:	8f a7       	std	Y+47, r24	; 0x2f
    4a64:	0f c0       	rjmp	.+30     	; 0x4a84 <main+0x50c>
    4a66:	88 ec       	ldi	r24, 0xC8	; 200
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	9e a7       	std	Y+46, r25	; 0x2e
    4a6c:	8d a7       	std	Y+45, r24	; 0x2d
    4a6e:	8d a5       	ldd	r24, Y+45	; 0x2d
    4a70:	9e a5       	ldd	r25, Y+46	; 0x2e
    4a72:	01 97       	sbiw	r24, 0x01	; 1
    4a74:	f1 f7       	brne	.-4      	; 0x4a72 <main+0x4fa>
    4a76:	9e a7       	std	Y+46, r25	; 0x2e
    4a78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a7c:	98 a9       	ldd	r25, Y+48	; 0x30
    4a7e:	01 97       	sbiw	r24, 0x01	; 1
    4a80:	98 ab       	std	Y+48, r25	; 0x30
    4a82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a84:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a86:	98 a9       	ldd	r25, Y+48	; 0x30
    4a88:	00 97       	sbiw	r24, 0x00	; 0
    4a8a:	69 f7       	brne	.-38     	; 0x4a66 <main+0x4ee>
    4a8c:	14 c0       	rjmp	.+40     	; 0x4ab6 <main+0x53e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a8e:	69 a9       	ldd	r22, Y+49	; 0x31
    4a90:	7a a9       	ldd	r23, Y+50	; 0x32
    4a92:	8b a9       	ldd	r24, Y+51	; 0x33
    4a94:	9c a9       	ldd	r25, Y+52	; 0x34
    4a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a9a:	dc 01       	movw	r26, r24
    4a9c:	cb 01       	movw	r24, r22
    4a9e:	98 ab       	std	Y+48, r25	; 0x30
    4aa0:	8f a7       	std	Y+47, r24	; 0x2f
    4aa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    4aa4:	98 a9       	ldd	r25, Y+48	; 0x30
    4aa6:	9c a7       	std	Y+44, r25	; 0x2c
    4aa8:	8b a7       	std	Y+43, r24	; 0x2b
    4aaa:	8b a5       	ldd	r24, Y+43	; 0x2b
    4aac:	9c a5       	ldd	r25, Y+44	; 0x2c
    4aae:	01 97       	sbiw	r24, 0x01	; 1
    4ab0:	f1 f7       	brne	.-4      	; 0x4aae <main+0x536>
    4ab2:	9c a7       	std	Y+44, r25	; 0x2c
    4ab4:	8b a7       	std	Y+43, r24	; 0x2b
              _delay_ms(1000);
              LCD_WRITE_COMMAND(lcd_Clear);
    4ab6:	81 e0       	ldi	r24, 0x01	; 1
    4ab8:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
              count =6 ;
    4abc:	fe 01       	movw	r30, r28
    4abe:	e8 5a       	subi	r30, 0xA8	; 168
    4ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac2:	86 e0       	ldi	r24, 0x06	; 6
    4ac4:	80 83       	st	Z, r24
              num_1 =0 ;
    4ac6:	10 92 02 02 	sts	0x0202, r1
    4aca:	10 92 01 02 	sts	0x0201, r1
    4ace:	84 cd       	rjmp	.-1272   	; 0x45d8 <main+0x60>
		}

		}

   else if( try_num<3  &&  try_num>0 && flage ==0){
    4ad0:	fe 01       	movw	r30, r28
    4ad2:	e9 5a       	subi	r30, 0xA9	; 169
    4ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad6:	80 81       	ld	r24, Z
    4ad8:	83 30       	cpi	r24, 0x03	; 3
    4ada:	08 f0       	brcs	.+2      	; 0x4ade <main+0x566>
    4adc:	2c c2       	rjmp	.+1112   	; 0x4f36 <main+0x9be>
    4ade:	fe 01       	movw	r30, r28
    4ae0:	e9 5a       	subi	r30, 0xA9	; 169
    4ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae4:	80 81       	ld	r24, Z
    4ae6:	88 23       	and	r24, r24
    4ae8:	09 f4       	brne	.+2      	; 0x4aec <main+0x574>
    4aea:	25 c2       	rjmp	.+1098   	; 0x4f36 <main+0x9be>
    4aec:	fe 01       	movw	r30, r28
    4aee:	ea 5a       	subi	r30, 0xAA	; 170
    4af0:	ff 4f       	sbci	r31, 0xFF	; 255
    4af2:	80 81       	ld	r24, Z
    4af4:	88 23       	and	r24, r24
    4af6:	09 f0       	breq	.+2      	; 0x4afa <main+0x582>
    4af8:	1e c2       	rjmp	.+1084   	; 0x4f36 <main+0x9be>
	   // servo angle 0 >> ocra1 == 1500
	   LCD_GO_TO(line1 , 3);
    4afa:	80 e0       	ldi	r24, 0x00	; 0
    4afc:	63 e0       	ldi	r22, 0x03	; 3
    4afe:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
	   LCD_WRITE_STRING("Try again : ");
    4b02:	83 e9       	ldi	r24, 0x93	; 147
    4b04:	91 e0       	ldi	r25, 0x01	; 1
    4b06:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
	   LCD_GO_TO(line2,0);
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
    4b0c:	60 e0       	ldi	r22, 0x00	; 0
    4b0e:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
	   i=0 ;
    4b12:	fe 01       	movw	r30, r28
    4b14:	eb 5a       	subi	r30, 0xAB	; 171
    4b16:	ff 4f       	sbci	r31, 0xFF	; 255
    4b18:	10 82       	st	Z, r1
	   // servo angle 0 >> ocra1 == 1500
	  while(1){
	   TIM1_OCR1AVAL(1500); // angle 180
    4b1a:	8c ed       	ldi	r24, 0xDC	; 220
    4b1c:	95 e0       	ldi	r25, 0x05	; 5
    4b1e:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <TIM1_OCR1AVAL>
	  		 do{
	  			 KPD_u8KpdGetKeyState(&pinvalue);
    4b22:	89 e0       	ldi	r24, 0x09	; 9
    4b24:	92 e0       	ldi	r25, 0x02	; 2
    4b26:	0e 94 23 0b 	call	0x1646	; 0x1646 <KPD_u8KpdGetKeyState>
	  		 }while(pinvalue == Kpd_keynotpressed);
    4b2a:	80 91 09 02 	lds	r24, 0x0209
    4b2e:	8f 3f       	cpi	r24, 0xFF	; 255
    4b30:	c1 f3       	breq	.-16     	; 0x4b22 <main+0x5aa>
	  		 sign_1 = pinvalue -'0';
    4b32:	80 91 09 02 	lds	r24, 0x0209
    4b36:	80 53       	subi	r24, 0x30	; 48
    4b38:	80 93 0a 02 	sts	0x020A, r24
	  		 if(sign_1 >=0 && sign_1<=9 ){
    4b3c:	80 91 0a 02 	lds	r24, 0x020A
    4b40:	8a 30       	cpi	r24, 0x0A	; 10
    4b42:	08 f0       	brcs	.+2      	; 0x4b46 <main+0x5ce>
    4b44:	a2 c0       	rjmp	.+324    	; 0x4c8a <main+0x712>

	          num_1 = (num_1*10) + (pinvalue -'0');
    4b46:	80 91 01 02 	lds	r24, 0x0201
    4b4a:	90 91 02 02 	lds	r25, 0x0202
    4b4e:	9c 01       	movw	r18, r24
    4b50:	22 0f       	add	r18, r18
    4b52:	33 1f       	adc	r19, r19
    4b54:	c9 01       	movw	r24, r18
    4b56:	88 0f       	add	r24, r24
    4b58:	99 1f       	adc	r25, r25
    4b5a:	88 0f       	add	r24, r24
    4b5c:	99 1f       	adc	r25, r25
    4b5e:	28 0f       	add	r18, r24
    4b60:	39 1f       	adc	r19, r25
    4b62:	80 91 09 02 	lds	r24, 0x0209
    4b66:	88 2f       	mov	r24, r24
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	82 0f       	add	r24, r18
    4b6c:	93 1f       	adc	r25, r19
    4b6e:	c0 97       	sbiw	r24, 0x30	; 48
    4b70:	90 93 02 02 	sts	0x0202, r25
    4b74:	80 93 01 02 	sts	0x0201, r24
	           LCD_WRITE_Char(pinvalue);
    4b78:	80 91 09 02 	lds	r24, 0x0209
    4b7c:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LCD_WRITE_Char>
    4b80:	80 e0       	ldi	r24, 0x00	; 0
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	a8 ec       	ldi	r26, 0xC8	; 200
    4b86:	b2 e4       	ldi	r27, 0x42	; 66
    4b88:	8f a3       	std	Y+39, r24	; 0x27
    4b8a:	98 a7       	std	Y+40, r25	; 0x28
    4b8c:	a9 a7       	std	Y+41, r26	; 0x29
    4b8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b90:	6f a1       	ldd	r22, Y+39	; 0x27
    4b92:	78 a5       	ldd	r23, Y+40	; 0x28
    4b94:	89 a5       	ldd	r24, Y+41	; 0x29
    4b96:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b98:	20 e0       	ldi	r18, 0x00	; 0
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	4a ef       	ldi	r20, 0xFA	; 250
    4b9e:	54 e4       	ldi	r21, 0x44	; 68
    4ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba4:	dc 01       	movw	r26, r24
    4ba6:	cb 01       	movw	r24, r22
    4ba8:	8b a3       	std	Y+35, r24	; 0x23
    4baa:	9c a3       	std	Y+36, r25	; 0x24
    4bac:	ad a3       	std	Y+37, r26	; 0x25
    4bae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4bb0:	6b a1       	ldd	r22, Y+35	; 0x23
    4bb2:	7c a1       	ldd	r23, Y+36	; 0x24
    4bb4:	8d a1       	ldd	r24, Y+37	; 0x25
    4bb6:	9e a1       	ldd	r25, Y+38	; 0x26
    4bb8:	20 e0       	ldi	r18, 0x00	; 0
    4bba:	30 e0       	ldi	r19, 0x00	; 0
    4bbc:	40 e8       	ldi	r20, 0x80	; 128
    4bbe:	5f e3       	ldi	r21, 0x3F	; 63
    4bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4bc4:	88 23       	and	r24, r24
    4bc6:	2c f4       	brge	.+10     	; 0x4bd2 <main+0x65a>
		__ticks = 1;
    4bc8:	81 e0       	ldi	r24, 0x01	; 1
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	9a a3       	std	Y+34, r25	; 0x22
    4bce:	89 a3       	std	Y+33, r24	; 0x21
    4bd0:	3f c0       	rjmp	.+126    	; 0x4c50 <main+0x6d8>
	else if (__tmp > 65535)
    4bd2:	6b a1       	ldd	r22, Y+35	; 0x23
    4bd4:	7c a1       	ldd	r23, Y+36	; 0x24
    4bd6:	8d a1       	ldd	r24, Y+37	; 0x25
    4bd8:	9e a1       	ldd	r25, Y+38	; 0x26
    4bda:	20 e0       	ldi	r18, 0x00	; 0
    4bdc:	3f ef       	ldi	r19, 0xFF	; 255
    4bde:	4f e7       	ldi	r20, 0x7F	; 127
    4be0:	57 e4       	ldi	r21, 0x47	; 71
    4be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4be6:	18 16       	cp	r1, r24
    4be8:	4c f5       	brge	.+82     	; 0x4c3c <main+0x6c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bea:	6f a1       	ldd	r22, Y+39	; 0x27
    4bec:	78 a5       	ldd	r23, Y+40	; 0x28
    4bee:	89 a5       	ldd	r24, Y+41	; 0x29
    4bf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	40 e2       	ldi	r20, 0x20	; 32
    4bf8:	51 e4       	ldi	r21, 0x41	; 65
    4bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfe:	dc 01       	movw	r26, r24
    4c00:	cb 01       	movw	r24, r22
    4c02:	bc 01       	movw	r22, r24
    4c04:	cd 01       	movw	r24, r26
    4c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c0a:	dc 01       	movw	r26, r24
    4c0c:	cb 01       	movw	r24, r22
    4c0e:	9a a3       	std	Y+34, r25	; 0x22
    4c10:	89 a3       	std	Y+33, r24	; 0x21
    4c12:	0f c0       	rjmp	.+30     	; 0x4c32 <main+0x6ba>
    4c14:	88 ec       	ldi	r24, 0xC8	; 200
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	98 a3       	std	Y+32, r25	; 0x20
    4c1a:	8f 8f       	std	Y+31, r24	; 0x1f
    4c1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c1e:	98 a1       	ldd	r25, Y+32	; 0x20
    4c20:	01 97       	sbiw	r24, 0x01	; 1
    4c22:	f1 f7       	brne	.-4      	; 0x4c20 <main+0x6a8>
    4c24:	98 a3       	std	Y+32, r25	; 0x20
    4c26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c28:	89 a1       	ldd	r24, Y+33	; 0x21
    4c2a:	9a a1       	ldd	r25, Y+34	; 0x22
    4c2c:	01 97       	sbiw	r24, 0x01	; 1
    4c2e:	9a a3       	std	Y+34, r25	; 0x22
    4c30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c32:	89 a1       	ldd	r24, Y+33	; 0x21
    4c34:	9a a1       	ldd	r25, Y+34	; 0x22
    4c36:	00 97       	sbiw	r24, 0x00	; 0
    4c38:	69 f7       	brne	.-38     	; 0x4c14 <main+0x69c>
    4c3a:	14 c0       	rjmp	.+40     	; 0x4c64 <main+0x6ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c3c:	6b a1       	ldd	r22, Y+35	; 0x23
    4c3e:	7c a1       	ldd	r23, Y+36	; 0x24
    4c40:	8d a1       	ldd	r24, Y+37	; 0x25
    4c42:	9e a1       	ldd	r25, Y+38	; 0x26
    4c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c48:	dc 01       	movw	r26, r24
    4c4a:	cb 01       	movw	r24, r22
    4c4c:	9a a3       	std	Y+34, r25	; 0x22
    4c4e:	89 a3       	std	Y+33, r24	; 0x21
    4c50:	89 a1       	ldd	r24, Y+33	; 0x21
    4c52:	9a a1       	ldd	r25, Y+34	; 0x22
    4c54:	9e 8f       	std	Y+30, r25	; 0x1e
    4c56:	8d 8f       	std	Y+29, r24	; 0x1d
    4c58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c5c:	01 97       	sbiw	r24, 0x01	; 1
    4c5e:	f1 f7       	brne	.-4      	; 0x4c5c <main+0x6e4>
    4c60:	9e 8f       	std	Y+30, r25	; 0x1e
    4c62:	8d 8f       	std	Y+29, r24	; 0x1d
	          	 _delay_ms(100);
	          	 LCD_GO_TO(line2 , i);
    4c64:	fe 01       	movw	r30, r28
    4c66:	eb 5a       	subi	r30, 0xAB	; 171
    4c68:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6a:	81 e0       	ldi	r24, 0x01	; 1
    4c6c:	60 81       	ld	r22, Z
    4c6e:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
	          	  LCD_WRITE_Char('*');
    4c72:	8a e2       	ldi	r24, 0x2A	; 42
    4c74:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LCD_WRITE_Char>
	          	        i++;
    4c78:	de 01       	movw	r26, r28
    4c7a:	ab 5a       	subi	r26, 0xAB	; 171
    4c7c:	bf 4f       	sbci	r27, 0xFF	; 255
    4c7e:	fe 01       	movw	r30, r28
    4c80:	eb 5a       	subi	r30, 0xAB	; 171
    4c82:	ff 4f       	sbci	r31, 0xFF	; 255
    4c84:	80 81       	ld	r24, Z
    4c86:	8f 5f       	subi	r24, 0xFF	; 255
    4c88:	8c 93       	st	X, r24
	  		  }
		 	  if( count == 1){
    4c8a:	fe 01       	movw	r30, r28
    4c8c:	e8 5a       	subi	r30, 0xA8	; 168
    4c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c90:	80 81       	ld	r24, Z
    4c92:	81 30       	cpi	r24, 0x01	; 1
    4c94:	51 f0       	breq	.+20     	; 0x4caa <main+0x732>
		 	 	 break;
		 	  }
		   else{
		 	 	 count-- ;
    4c96:	de 01       	movw	r26, r28
    4c98:	a8 5a       	subi	r26, 0xA8	; 168
    4c9a:	bf 4f       	sbci	r27, 0xFF	; 255
    4c9c:	fe 01       	movw	r30, r28
    4c9e:	e8 5a       	subi	r30, 0xA8	; 168
    4ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca2:	80 81       	ld	r24, Z
    4ca4:	81 50       	subi	r24, 0x01	; 1
    4ca6:	8c 93       	st	X, r24
    4ca8:	38 cf       	rjmp	.-400    	; 0x4b1a <main+0x5a2>
		 		 }
	  }

		 if(num_1 == pass ){
    4caa:	80 91 01 02 	lds	r24, 0x0201
    4cae:	90 91 02 02 	lds	r25, 0x0202
    4cb2:	fe 01       	movw	r30, r28
    4cb4:	e7 5a       	subi	r30, 0xA7	; 167
    4cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb8:	20 81       	ld	r18, Z
    4cba:	31 81       	ldd	r19, Z+1	; 0x01
    4cbc:	82 17       	cp	r24, r18
    4cbe:	93 07       	cpc	r25, r19
    4cc0:	09 f0       	breq	.+2      	; 0x4cc4 <main+0x74c>
    4cc2:	a2 c0       	rjmp	.+324    	; 0x4e08 <main+0x890>
			    num_1=0 ;
    4cc4:	10 92 02 02 	sts	0x0202, r1
    4cc8:	10 92 01 02 	sts	0x0201, r1
				flage=1;
    4ccc:	fe 01       	movw	r30, r28
    4cce:	ea 5a       	subi	r30, 0xAA	; 170
    4cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd2:	81 e0       	ldi	r24, 0x01	; 1
    4cd4:	80 83       	st	Z, r24
				count =6 ;
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	e8 5a       	subi	r30, 0xA8	; 168
    4cda:	ff 4f       	sbci	r31, 0xFF	; 255
    4cdc:	86 e0       	ldi	r24, 0x06	; 6
    4cde:	80 83       	st	Z, r24
			    LCD_WRITE_COMMAND(lcd_Clear);
    4ce0:	81 e0       	ldi	r24, 0x01	; 1
    4ce2:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
			    LCD_GO_TO(line1 , 3);
    4ce6:	80 e0       	ldi	r24, 0x00	; 0
    4ce8:	63 e0       	ldi	r22, 0x03	; 3
    4cea:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
			    LCD_WRITE_STRING(" correct password");
    4cee:	80 ea       	ldi	r24, 0xA0	; 160
    4cf0:	91 e0       	ldi	r25, 0x01	; 1
    4cf2:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
				LCD_GO_TO(line2 ,0);
    4cf6:	81 e0       	ldi	r24, 0x01	; 1
    4cf8:	60 e0       	ldi	r22, 0x00	; 0
    4cfa:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
			    LCD_WRITE_STRING(" Door open");
    4cfe:	82 eb       	ldi	r24, 0xB2	; 178
    4d00:	91 e0       	ldi	r25, 0x01	; 1
    4d02:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
    4d06:	80 e0       	ldi	r24, 0x00	; 0
    4d08:	90 e0       	ldi	r25, 0x00	; 0
    4d0a:	aa ef       	ldi	r26, 0xFA	; 250
    4d0c:	b3 e4       	ldi	r27, 0x43	; 67
    4d0e:	89 8f       	std	Y+25, r24	; 0x19
    4d10:	9a 8f       	std	Y+26, r25	; 0x1a
    4d12:	ab 8f       	std	Y+27, r26	; 0x1b
    4d14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d16:	69 8d       	ldd	r22, Y+25	; 0x19
    4d18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d1e:	20 e0       	ldi	r18, 0x00	; 0
    4d20:	30 e0       	ldi	r19, 0x00	; 0
    4d22:	4a ef       	ldi	r20, 0xFA	; 250
    4d24:	54 e4       	ldi	r21, 0x44	; 68
    4d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d2a:	dc 01       	movw	r26, r24
    4d2c:	cb 01       	movw	r24, r22
    4d2e:	8d 8b       	std	Y+21, r24	; 0x15
    4d30:	9e 8b       	std	Y+22, r25	; 0x16
    4d32:	af 8b       	std	Y+23, r26	; 0x17
    4d34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d36:	6d 89       	ldd	r22, Y+21	; 0x15
    4d38:	7e 89       	ldd	r23, Y+22	; 0x16
    4d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    4d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    4d3e:	20 e0       	ldi	r18, 0x00	; 0
    4d40:	30 e0       	ldi	r19, 0x00	; 0
    4d42:	40 e8       	ldi	r20, 0x80	; 128
    4d44:	5f e3       	ldi	r21, 0x3F	; 63
    4d46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d4a:	88 23       	and	r24, r24
    4d4c:	2c f4       	brge	.+10     	; 0x4d58 <main+0x7e0>
		__ticks = 1;
    4d4e:	81 e0       	ldi	r24, 0x01	; 1
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	9c 8b       	std	Y+20, r25	; 0x14
    4d54:	8b 8b       	std	Y+19, r24	; 0x13
    4d56:	3f c0       	rjmp	.+126    	; 0x4dd6 <main+0x85e>
	else if (__tmp > 65535)
    4d58:	6d 89       	ldd	r22, Y+21	; 0x15
    4d5a:	7e 89       	ldd	r23, Y+22	; 0x16
    4d5c:	8f 89       	ldd	r24, Y+23	; 0x17
    4d5e:	98 8d       	ldd	r25, Y+24	; 0x18
    4d60:	20 e0       	ldi	r18, 0x00	; 0
    4d62:	3f ef       	ldi	r19, 0xFF	; 255
    4d64:	4f e7       	ldi	r20, 0x7F	; 127
    4d66:	57 e4       	ldi	r21, 0x47	; 71
    4d68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d6c:	18 16       	cp	r1, r24
    4d6e:	4c f5       	brge	.+82     	; 0x4dc2 <main+0x84a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d70:	69 8d       	ldd	r22, Y+25	; 0x19
    4d72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d78:	20 e0       	ldi	r18, 0x00	; 0
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	40 e2       	ldi	r20, 0x20	; 32
    4d7e:	51 e4       	ldi	r21, 0x41	; 65
    4d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d84:	dc 01       	movw	r26, r24
    4d86:	cb 01       	movw	r24, r22
    4d88:	bc 01       	movw	r22, r24
    4d8a:	cd 01       	movw	r24, r26
    4d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d90:	dc 01       	movw	r26, r24
    4d92:	cb 01       	movw	r24, r22
    4d94:	9c 8b       	std	Y+20, r25	; 0x14
    4d96:	8b 8b       	std	Y+19, r24	; 0x13
    4d98:	0f c0       	rjmp	.+30     	; 0x4db8 <main+0x840>
    4d9a:	88 ec       	ldi	r24, 0xC8	; 200
    4d9c:	90 e0       	ldi	r25, 0x00	; 0
    4d9e:	9a 8b       	std	Y+18, r25	; 0x12
    4da0:	89 8b       	std	Y+17, r24	; 0x11
    4da2:	89 89       	ldd	r24, Y+17	; 0x11
    4da4:	9a 89       	ldd	r25, Y+18	; 0x12
    4da6:	01 97       	sbiw	r24, 0x01	; 1
    4da8:	f1 f7       	brne	.-4      	; 0x4da6 <main+0x82e>
    4daa:	9a 8b       	std	Y+18, r25	; 0x12
    4dac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dae:	8b 89       	ldd	r24, Y+19	; 0x13
    4db0:	9c 89       	ldd	r25, Y+20	; 0x14
    4db2:	01 97       	sbiw	r24, 0x01	; 1
    4db4:	9c 8b       	std	Y+20, r25	; 0x14
    4db6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4db8:	8b 89       	ldd	r24, Y+19	; 0x13
    4dba:	9c 89       	ldd	r25, Y+20	; 0x14
    4dbc:	00 97       	sbiw	r24, 0x00	; 0
    4dbe:	69 f7       	brne	.-38     	; 0x4d9a <main+0x822>
    4dc0:	14 c0       	rjmp	.+40     	; 0x4dea <main+0x872>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dc2:	6d 89       	ldd	r22, Y+21	; 0x15
    4dc4:	7e 89       	ldd	r23, Y+22	; 0x16
    4dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    4dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    4dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dce:	dc 01       	movw	r26, r24
    4dd0:	cb 01       	movw	r24, r22
    4dd2:	9c 8b       	std	Y+20, r25	; 0x14
    4dd4:	8b 8b       	std	Y+19, r24	; 0x13
    4dd6:	8b 89       	ldd	r24, Y+19	; 0x13
    4dd8:	9c 89       	ldd	r25, Y+20	; 0x14
    4dda:	98 8b       	std	Y+16, r25	; 0x10
    4ddc:	8f 87       	std	Y+15, r24	; 0x0f
    4dde:	8f 85       	ldd	r24, Y+15	; 0x0f
    4de0:	98 89       	ldd	r25, Y+16	; 0x10
    4de2:	01 97       	sbiw	r24, 0x01	; 1
    4de4:	f1 f7       	brne	.-4      	; 0x4de2 <main+0x86a>
    4de6:	98 8b       	std	Y+16, r25	; 0x10
    4de8:	8f 87       	std	Y+15, r24	; 0x0f
	            _delay_ms(500);
	            pass_correct_action();
    4dea:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <pass_correct_action>
	                   while(1){
	                      lcd_mode();
    4dee:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <lcd_mode>
	                      setting(num_1);
    4df2:	80 91 01 02 	lds	r24, 0x0201
    4df6:	90 91 02 02 	lds	r25, 0x0202
    4dfa:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <setting>

	                      num_1=0 ;
    4dfe:	10 92 02 02 	sts	0x0202, r1
    4e02:	10 92 01 02 	sts	0x0201, r1
    4e06:	f3 cf       	rjmp	.-26     	; 0x4dee <main+0x876>

	                   }
		 		}
		 else{
			 // servo angle 0 >> ocra1 == 1500
			 TIM1_OCR1AVAL(1500); // angle 180
    4e08:	8c ed       	ldi	r24, 0xDC	; 220
    4e0a:	95 e0       	ldi	r25, 0x05	; 5
    4e0c:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <TIM1_OCR1AVAL>
			  LCD_WRITE_COMMAND(lcd_Clear);
    4e10:	81 e0       	ldi	r24, 0x01	; 1
    4e12:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
			  LCD_GO_TO(line1 , 3);
    4e16:	80 e0       	ldi	r24, 0x00	; 0
    4e18:	63 e0       	ldi	r22, 0x03	; 3
    4e1a:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_GO_TO>
			 LCD_WRITE_STRING(" Wrong password");
    4e1e:	8d eb       	ldi	r24, 0xBD	; 189
    4e20:	91 e0       	ldi	r25, 0x01	; 1
    4e22:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
    4e26:	80 e0       	ldi	r24, 0x00	; 0
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	aa e7       	ldi	r26, 0x7A	; 122
    4e2c:	b4 e4       	ldi	r27, 0x44	; 68
    4e2e:	8b 87       	std	Y+11, r24	; 0x0b
    4e30:	9c 87       	std	Y+12, r25	; 0x0c
    4e32:	ad 87       	std	Y+13, r26	; 0x0d
    4e34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e3e:	20 e0       	ldi	r18, 0x00	; 0
    4e40:	30 e0       	ldi	r19, 0x00	; 0
    4e42:	4a ef       	ldi	r20, 0xFA	; 250
    4e44:	54 e4       	ldi	r21, 0x44	; 68
    4e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e4a:	dc 01       	movw	r26, r24
    4e4c:	cb 01       	movw	r24, r22
    4e4e:	8f 83       	std	Y+7, r24	; 0x07
    4e50:	98 87       	std	Y+8, r25	; 0x08
    4e52:	a9 87       	std	Y+9, r26	; 0x09
    4e54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e56:	6f 81       	ldd	r22, Y+7	; 0x07
    4e58:	78 85       	ldd	r23, Y+8	; 0x08
    4e5a:	89 85       	ldd	r24, Y+9	; 0x09
    4e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e5e:	20 e0       	ldi	r18, 0x00	; 0
    4e60:	30 e0       	ldi	r19, 0x00	; 0
    4e62:	40 e8       	ldi	r20, 0x80	; 128
    4e64:	5f e3       	ldi	r21, 0x3F	; 63
    4e66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e6a:	88 23       	and	r24, r24
    4e6c:	2c f4       	brge	.+10     	; 0x4e78 <main+0x900>
		__ticks = 1;
    4e6e:	81 e0       	ldi	r24, 0x01	; 1
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	9e 83       	std	Y+6, r25	; 0x06
    4e74:	8d 83       	std	Y+5, r24	; 0x05
    4e76:	3f c0       	rjmp	.+126    	; 0x4ef6 <main+0x97e>
	else if (__tmp > 65535)
    4e78:	6f 81       	ldd	r22, Y+7	; 0x07
    4e7a:	78 85       	ldd	r23, Y+8	; 0x08
    4e7c:	89 85       	ldd	r24, Y+9	; 0x09
    4e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e80:	20 e0       	ldi	r18, 0x00	; 0
    4e82:	3f ef       	ldi	r19, 0xFF	; 255
    4e84:	4f e7       	ldi	r20, 0x7F	; 127
    4e86:	57 e4       	ldi	r21, 0x47	; 71
    4e88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e8c:	18 16       	cp	r1, r24
    4e8e:	4c f5       	brge	.+82     	; 0x4ee2 <main+0x96a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e90:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e92:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e98:	20 e0       	ldi	r18, 0x00	; 0
    4e9a:	30 e0       	ldi	r19, 0x00	; 0
    4e9c:	40 e2       	ldi	r20, 0x20	; 32
    4e9e:	51 e4       	ldi	r21, 0x41	; 65
    4ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ea4:	dc 01       	movw	r26, r24
    4ea6:	cb 01       	movw	r24, r22
    4ea8:	bc 01       	movw	r22, r24
    4eaa:	cd 01       	movw	r24, r26
    4eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb0:	dc 01       	movw	r26, r24
    4eb2:	cb 01       	movw	r24, r22
    4eb4:	9e 83       	std	Y+6, r25	; 0x06
    4eb6:	8d 83       	std	Y+5, r24	; 0x05
    4eb8:	0f c0       	rjmp	.+30     	; 0x4ed8 <main+0x960>
    4eba:	88 ec       	ldi	r24, 0xC8	; 200
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	9c 83       	std	Y+4, r25	; 0x04
    4ec0:	8b 83       	std	Y+3, r24	; 0x03
    4ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ec6:	01 97       	sbiw	r24, 0x01	; 1
    4ec8:	f1 f7       	brne	.-4      	; 0x4ec6 <main+0x94e>
    4eca:	9c 83       	std	Y+4, r25	; 0x04
    4ecc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ece:	8d 81       	ldd	r24, Y+5	; 0x05
    4ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ed2:	01 97       	sbiw	r24, 0x01	; 1
    4ed4:	9e 83       	std	Y+6, r25	; 0x06
    4ed6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    4eda:	9e 81       	ldd	r25, Y+6	; 0x06
    4edc:	00 97       	sbiw	r24, 0x00	; 0
    4ede:	69 f7       	brne	.-38     	; 0x4eba <main+0x942>
    4ee0:	14 c0       	rjmp	.+40     	; 0x4f0a <main+0x992>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    4ee4:	78 85       	ldd	r23, Y+8	; 0x08
    4ee6:	89 85       	ldd	r24, Y+9	; 0x09
    4ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eee:	dc 01       	movw	r26, r24
    4ef0:	cb 01       	movw	r24, r22
    4ef2:	9e 83       	std	Y+6, r25	; 0x06
    4ef4:	8d 83       	std	Y+5, r24	; 0x05
    4ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    4efa:	9a 83       	std	Y+2, r25	; 0x02
    4efc:	89 83       	std	Y+1, r24	; 0x01
    4efe:	89 81       	ldd	r24, Y+1	; 0x01
    4f00:	9a 81       	ldd	r25, Y+2	; 0x02
    4f02:	01 97       	sbiw	r24, 0x01	; 1
    4f04:	f1 f7       	brne	.-4      	; 0x4f02 <main+0x98a>
    4f06:	9a 83       	std	Y+2, r25	; 0x02
    4f08:	89 83       	std	Y+1, r24	; 0x01
			 _delay_ms(1000);
			 LCD_WRITE_COMMAND(lcd_Clear);
    4f0a:	81 e0       	ldi	r24, 0x01	; 1
    4f0c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
		       try_num--;
    4f10:	de 01       	movw	r26, r28
    4f12:	a9 5a       	subi	r26, 0xA9	; 169
    4f14:	bf 4f       	sbci	r27, 0xFF	; 255
    4f16:	fe 01       	movw	r30, r28
    4f18:	e9 5a       	subi	r30, 0xA9	; 169
    4f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1c:	80 81       	ld	r24, Z
    4f1e:	81 50       	subi	r24, 0x01	; 1
    4f20:	8c 93       	st	X, r24
		       count =6 ;
    4f22:	fe 01       	movw	r30, r28
    4f24:	e8 5a       	subi	r30, 0xA8	; 168
    4f26:	ff 4f       	sbci	r31, 0xFF	; 255
    4f28:	86 e0       	ldi	r24, 0x06	; 6
    4f2a:	80 83       	st	Z, r24
		       num_1=0 ;
    4f2c:	10 92 02 02 	sts	0x0202, r1
    4f30:	10 92 01 02 	sts	0x0201, r1
    4f34:	51 cb       	rjmp	.-2398   	; 0x45d8 <main+0x60>
		 		}
	}
   else if( try_num==0){
    4f36:	fe 01       	movw	r30, r28
    4f38:	e9 5a       	subi	r30, 0xA9	; 169
    4f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3c:	80 81       	ld	r24, Z
    4f3e:	88 23       	and	r24, r24
    4f40:	09 f0       	breq	.+2      	; 0x4f44 <main+0x9cc>
    4f42:	4a cb       	rjmp	.-2412   	; 0x45d8 <main+0x60>
	   // servo angle 0 >> ocra1 == 1500
	   TIM1_OCR1AVAL(1500); // angle 180
    4f44:	8c ed       	ldi	r24, 0xDC	; 220
    4f46:	95 e0       	ldi	r25, 0x05	; 5
    4f48:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <TIM1_OCR1AVAL>
	   DIO_u8SetPinValue(PORTD ,trans , LOGIC_HIGH);
    4f4c:	84 e0       	ldi	r24, 0x04	; 4
    4f4e:	67 e0       	ldi	r22, 0x07	; 7
    4f50:	41 e0       	ldi	r20, 0x01	; 1
    4f52:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	   DIO_u8SetPinValue(PORTA ,red, LOGIC_HIGH);
    4f56:	81 e0       	ldi	r24, 0x01	; 1
    4f58:	67 e0       	ldi	r22, 0x07	; 7
    4f5a:	41 e0       	ldi	r20, 0x01	; 1
    4f5c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
        DIO_u8GetPinValue(PORTD, PIN_6 , &key_1);
    4f60:	9e 01       	movw	r18, r28
    4f62:	25 5a       	subi	r18, 0xA5	; 165
    4f64:	3f 4f       	sbci	r19, 0xFF	; 255
    4f66:	84 e0       	ldi	r24, 0x04	; 4
    4f68:	66 e0       	ldi	r22, 0x06	; 6
    4f6a:	a9 01       	movw	r20, r18
    4f6c:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_u8GetPinValue>
        LCD_WRITE_COMMAND(lcd_Clear);
    4f70:	81 e0       	ldi	r24, 0x01	; 1
    4f72:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
        LCD_WRITE_STRING(" Door locked");
    4f76:	8d ec       	ldi	r24, 0xCD	; 205
    4f78:	91 e0       	ldi	r25, 0x01	; 1
    4f7a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_WRITE_STRING>
    4f7e:	08 c0       	rjmp	.+16     	; 0x4f90 <main+0xa18>
     while( key_1 ==1){
	   DIO_u8GetPinValue(PORTD, PIN_6 , &key_1);
    4f80:	9e 01       	movw	r18, r28
    4f82:	25 5a       	subi	r18, 0xA5	; 165
    4f84:	3f 4f       	sbci	r19, 0xFF	; 255
    4f86:	84 e0       	ldi	r24, 0x04	; 4
    4f88:	66 e0       	ldi	r22, 0x06	; 6
    4f8a:	a9 01       	movw	r20, r18
    4f8c:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_u8GetPinValue>
	   DIO_u8SetPinValue(PORTD ,trans , LOGIC_HIGH);
	   DIO_u8SetPinValue(PORTA ,red, LOGIC_HIGH);
        DIO_u8GetPinValue(PORTD, PIN_6 , &key_1);
        LCD_WRITE_COMMAND(lcd_Clear);
        LCD_WRITE_STRING(" Door locked");
     while( key_1 ==1){
    4f90:	fe 01       	movw	r30, r28
    4f92:	e5 5a       	subi	r30, 0xA5	; 165
    4f94:	ff 4f       	sbci	r31, 0xFF	; 255
    4f96:	80 81       	ld	r24, Z
    4f98:	81 30       	cpi	r24, 0x01	; 1
    4f9a:	91 f3       	breq	.-28     	; 0x4f80 <main+0xa08>
	   DIO_u8GetPinValue(PORTD, PIN_6 , &key_1);
        }
    count =6 ;
    4f9c:	fe 01       	movw	r30, r28
    4f9e:	e8 5a       	subi	r30, 0xA8	; 168
    4fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa2:	86 e0       	ldi	r24, 0x06	; 6
    4fa4:	80 83       	st	Z, r24
	   try_num=3 ;
    4fa6:	fe 01       	movw	r30, r28
    4fa8:	e9 5a       	subi	r30, 0xA9	; 169
    4faa:	ff 4f       	sbci	r31, 0xFF	; 255
    4fac:	83 e0       	ldi	r24, 0x03	; 3
    4fae:	80 83       	st	Z, r24
	   flage =0 ;
    4fb0:	fe 01       	movw	r30, r28
    4fb2:	ea 5a       	subi	r30, 0xAA	; 170
    4fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb6:	10 82       	st	Z, r1
	   num_1=0;
    4fb8:	10 92 02 02 	sts	0x0202, r1
    4fbc:	10 92 01 02 	sts	0x0201, r1
	   DIO_u8SetPinValue(PORTD ,trans , LOGIC_LOW);
    4fc0:	84 e0       	ldi	r24, 0x04	; 4
    4fc2:	67 e0       	ldi	r22, 0x07	; 7
    4fc4:	40 e0       	ldi	r20, 0x00	; 0
    4fc6:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	   LCD_WRITE_COMMAND(lcd_Clear);
    4fca:	81 e0       	ldi	r24, 0x01	; 1
    4fcc:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_WRITE_COMMAND>
	   DIO_u8SetPinValue(PORTA ,red, LOGIC_LOW);
    4fd0:	81 e0       	ldi	r24, 0x01	; 1
    4fd2:	67 e0       	ldi	r22, 0x07	; 7
    4fd4:	40 e0       	ldi	r20, 0x00	; 0
    4fd6:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_u8SetPinValue>
	   i=0 ;
    4fda:	fe 01       	movw	r30, r28
    4fdc:	eb 5a       	subi	r30, 0xAB	; 171
    4fde:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe0:	10 82       	st	Z, r1
    4fe2:	fa ca       	rjmp	.-2572   	; 0x45d8 <main+0x60>

00004fe4 <__mulsi3>:
    4fe4:	62 9f       	mul	r22, r18
    4fe6:	d0 01       	movw	r26, r0
    4fe8:	73 9f       	mul	r23, r19
    4fea:	f0 01       	movw	r30, r0
    4fec:	82 9f       	mul	r24, r18
    4fee:	e0 0d       	add	r30, r0
    4ff0:	f1 1d       	adc	r31, r1
    4ff2:	64 9f       	mul	r22, r20
    4ff4:	e0 0d       	add	r30, r0
    4ff6:	f1 1d       	adc	r31, r1
    4ff8:	92 9f       	mul	r25, r18
    4ffa:	f0 0d       	add	r31, r0
    4ffc:	83 9f       	mul	r24, r19
    4ffe:	f0 0d       	add	r31, r0
    5000:	74 9f       	mul	r23, r20
    5002:	f0 0d       	add	r31, r0
    5004:	65 9f       	mul	r22, r21
    5006:	f0 0d       	add	r31, r0
    5008:	99 27       	eor	r25, r25
    500a:	72 9f       	mul	r23, r18
    500c:	b0 0d       	add	r27, r0
    500e:	e1 1d       	adc	r30, r1
    5010:	f9 1f       	adc	r31, r25
    5012:	63 9f       	mul	r22, r19
    5014:	b0 0d       	add	r27, r0
    5016:	e1 1d       	adc	r30, r1
    5018:	f9 1f       	adc	r31, r25
    501a:	bd 01       	movw	r22, r26
    501c:	cf 01       	movw	r24, r30
    501e:	11 24       	eor	r1, r1
    5020:	08 95       	ret

00005022 <__udivmodhi4>:
    5022:	aa 1b       	sub	r26, r26
    5024:	bb 1b       	sub	r27, r27
    5026:	51 e1       	ldi	r21, 0x11	; 17
    5028:	07 c0       	rjmp	.+14     	; 0x5038 <__udivmodhi4_ep>

0000502a <__udivmodhi4_loop>:
    502a:	aa 1f       	adc	r26, r26
    502c:	bb 1f       	adc	r27, r27
    502e:	a6 17       	cp	r26, r22
    5030:	b7 07       	cpc	r27, r23
    5032:	10 f0       	brcs	.+4      	; 0x5038 <__udivmodhi4_ep>
    5034:	a6 1b       	sub	r26, r22
    5036:	b7 0b       	sbc	r27, r23

00005038 <__udivmodhi4_ep>:
    5038:	88 1f       	adc	r24, r24
    503a:	99 1f       	adc	r25, r25
    503c:	5a 95       	dec	r21
    503e:	a9 f7       	brne	.-22     	; 0x502a <__udivmodhi4_loop>
    5040:	80 95       	com	r24
    5042:	90 95       	com	r25
    5044:	bc 01       	movw	r22, r24
    5046:	cd 01       	movw	r24, r26
    5048:	08 95       	ret

0000504a <__udivmodsi4>:
    504a:	a1 e2       	ldi	r26, 0x21	; 33
    504c:	1a 2e       	mov	r1, r26
    504e:	aa 1b       	sub	r26, r26
    5050:	bb 1b       	sub	r27, r27
    5052:	fd 01       	movw	r30, r26
    5054:	0d c0       	rjmp	.+26     	; 0x5070 <__udivmodsi4_ep>

00005056 <__udivmodsi4_loop>:
    5056:	aa 1f       	adc	r26, r26
    5058:	bb 1f       	adc	r27, r27
    505a:	ee 1f       	adc	r30, r30
    505c:	ff 1f       	adc	r31, r31
    505e:	a2 17       	cp	r26, r18
    5060:	b3 07       	cpc	r27, r19
    5062:	e4 07       	cpc	r30, r20
    5064:	f5 07       	cpc	r31, r21
    5066:	20 f0       	brcs	.+8      	; 0x5070 <__udivmodsi4_ep>
    5068:	a2 1b       	sub	r26, r18
    506a:	b3 0b       	sbc	r27, r19
    506c:	e4 0b       	sbc	r30, r20
    506e:	f5 0b       	sbc	r31, r21

00005070 <__udivmodsi4_ep>:
    5070:	66 1f       	adc	r22, r22
    5072:	77 1f       	adc	r23, r23
    5074:	88 1f       	adc	r24, r24
    5076:	99 1f       	adc	r25, r25
    5078:	1a 94       	dec	r1
    507a:	69 f7       	brne	.-38     	; 0x5056 <__udivmodsi4_loop>
    507c:	60 95       	com	r22
    507e:	70 95       	com	r23
    5080:	80 95       	com	r24
    5082:	90 95       	com	r25
    5084:	9b 01       	movw	r18, r22
    5086:	ac 01       	movw	r20, r24
    5088:	bd 01       	movw	r22, r26
    508a:	cf 01       	movw	r24, r30
    508c:	08 95       	ret

0000508e <__divmodsi4>:
    508e:	97 fb       	bst	r25, 7
    5090:	09 2e       	mov	r0, r25
    5092:	05 26       	eor	r0, r21
    5094:	0e d0       	rcall	.+28     	; 0x50b2 <__divmodsi4_neg1>
    5096:	57 fd       	sbrc	r21, 7
    5098:	04 d0       	rcall	.+8      	; 0x50a2 <__divmodsi4_neg2>
    509a:	d7 df       	rcall	.-82     	; 0x504a <__udivmodsi4>
    509c:	0a d0       	rcall	.+20     	; 0x50b2 <__divmodsi4_neg1>
    509e:	00 1c       	adc	r0, r0
    50a0:	38 f4       	brcc	.+14     	; 0x50b0 <__divmodsi4_exit>

000050a2 <__divmodsi4_neg2>:
    50a2:	50 95       	com	r21
    50a4:	40 95       	com	r20
    50a6:	30 95       	com	r19
    50a8:	21 95       	neg	r18
    50aa:	3f 4f       	sbci	r19, 0xFF	; 255
    50ac:	4f 4f       	sbci	r20, 0xFF	; 255
    50ae:	5f 4f       	sbci	r21, 0xFF	; 255

000050b0 <__divmodsi4_exit>:
    50b0:	08 95       	ret

000050b2 <__divmodsi4_neg1>:
    50b2:	f6 f7       	brtc	.-4      	; 0x50b0 <__divmodsi4_exit>
    50b4:	90 95       	com	r25
    50b6:	80 95       	com	r24
    50b8:	70 95       	com	r23
    50ba:	61 95       	neg	r22
    50bc:	7f 4f       	sbci	r23, 0xFF	; 255
    50be:	8f 4f       	sbci	r24, 0xFF	; 255
    50c0:	9f 4f       	sbci	r25, 0xFF	; 255
    50c2:	08 95       	ret

000050c4 <__prologue_saves__>:
    50c4:	2f 92       	push	r2
    50c6:	3f 92       	push	r3
    50c8:	4f 92       	push	r4
    50ca:	5f 92       	push	r5
    50cc:	6f 92       	push	r6
    50ce:	7f 92       	push	r7
    50d0:	8f 92       	push	r8
    50d2:	9f 92       	push	r9
    50d4:	af 92       	push	r10
    50d6:	bf 92       	push	r11
    50d8:	cf 92       	push	r12
    50da:	df 92       	push	r13
    50dc:	ef 92       	push	r14
    50de:	ff 92       	push	r15
    50e0:	0f 93       	push	r16
    50e2:	1f 93       	push	r17
    50e4:	cf 93       	push	r28
    50e6:	df 93       	push	r29
    50e8:	cd b7       	in	r28, 0x3d	; 61
    50ea:	de b7       	in	r29, 0x3e	; 62
    50ec:	ca 1b       	sub	r28, r26
    50ee:	db 0b       	sbc	r29, r27
    50f0:	0f b6       	in	r0, 0x3f	; 63
    50f2:	f8 94       	cli
    50f4:	de bf       	out	0x3e, r29	; 62
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	cd bf       	out	0x3d, r28	; 61
    50fa:	09 94       	ijmp

000050fc <__epilogue_restores__>:
    50fc:	2a 88       	ldd	r2, Y+18	; 0x12
    50fe:	39 88       	ldd	r3, Y+17	; 0x11
    5100:	48 88       	ldd	r4, Y+16	; 0x10
    5102:	5f 84       	ldd	r5, Y+15	; 0x0f
    5104:	6e 84       	ldd	r6, Y+14	; 0x0e
    5106:	7d 84       	ldd	r7, Y+13	; 0x0d
    5108:	8c 84       	ldd	r8, Y+12	; 0x0c
    510a:	9b 84       	ldd	r9, Y+11	; 0x0b
    510c:	aa 84       	ldd	r10, Y+10	; 0x0a
    510e:	b9 84       	ldd	r11, Y+9	; 0x09
    5110:	c8 84       	ldd	r12, Y+8	; 0x08
    5112:	df 80       	ldd	r13, Y+7	; 0x07
    5114:	ee 80       	ldd	r14, Y+6	; 0x06
    5116:	fd 80       	ldd	r15, Y+5	; 0x05
    5118:	0c 81       	ldd	r16, Y+4	; 0x04
    511a:	1b 81       	ldd	r17, Y+3	; 0x03
    511c:	aa 81       	ldd	r26, Y+2	; 0x02
    511e:	b9 81       	ldd	r27, Y+1	; 0x01
    5120:	ce 0f       	add	r28, r30
    5122:	d1 1d       	adc	r29, r1
    5124:	0f b6       	in	r0, 0x3f	; 63
    5126:	f8 94       	cli
    5128:	de bf       	out	0x3e, r29	; 62
    512a:	0f be       	out	0x3f, r0	; 63
    512c:	cd bf       	out	0x3d, r28	; 61
    512e:	ed 01       	movw	r28, r26
    5130:	08 95       	ret

00005132 <_exit>:
    5132:	f8 94       	cli

00005134 <__stop_program>:
    5134:	ff cf       	rjmp	.-2      	; 0x5134 <__stop_program>
